[1.0.0]
- Vector implementations no longer use squared value for margin comparisons, see: isZero(float margin), isUnit(float margin).
- Vector2 now has isUnit and isZero methods (copied from Vector3)
- Added new headless backend for server applications
- Support 'scaledSize' as a json skin data value for BitmapFont
- Added setAlpha(float a) method to Sprite class
- Added Input.Keys.toString(int keycode) and Input.Keys.valueOf(String keyname) methods
- Added Immersive Mode support to Android backend
- Added userObject to Actor in scene2d, allowing for custom data storage
- Altered Android's hide status bar behavior
- Changed the way wakelocks are implemented. You no longer need any special permissions for the libgdx wakelock
- BitmapFontCache setColor changes to match SpriteBatch and friends. http://www.badlogicgames.com/forum/viewtopic.php?f=23&t=12112
- Changed ParticleEffect: the ParticleEffect.save method now takes a Writer instead of a File
- TexturePacker2 renamed to TexturePacker, added grid and scaling settings.
- Added support for custom prefrences on the desktop backends.
- Fixed double resume calls on iOS.
- Android Music no longer throws exceptions if MediaPlayer is null.
- PolygonSpriteBatch implements Batch.
- New scene2d actions: EventAction, CountdownEventAction.
- Adds cancelHttpRequest() method to Net interface
- Update GWT/HTML5 Backend to GWT 2.6.0
- Minimal Android version is 2.2, see http://www.badlogicgames.com/wordpress/?p=3297
- Updated to LWJGL 2.9.1
- You can now embed your libgdx app as a fragment, more info on the wiki

[0.9.9]
- added setCursorImage method to Input interface to support custom mouse cursors on the desktop
- removed Xamarin backend, see http://www.badlogicgames.com/wordpress/?p=3213
- added Select class for selecting kth ordered statistic from arrays (see Array.selectRanked() method)
- refactored Box2D to use badlogic Arrays instead of java.util.ArrayLists
- MipMapGenerator methods now don't take disposePixmap argument anymore
- added GLTexture, base class for all textures, encapsulates target (2d, cubemap, ...)
- added CubeMap, 6 sided texture
- changed TextureData#consumeCompressedData, takes target now
- added RoboVM backend jar and native libs (libObjectAL, libgdx, in ios/ folder of distribution)
- added RoboVM backend to build
- changed Bullet wrapper API, see http://www.badlogicgames.com/wordpress/?p=3150
- changed MusicLoader and SoundLoader to be asynchronous loaders
- changed behaviour of Net#sendHttpRequest() so HttpResponseListener#handleHttpResponse() callback is executed in worker thread instead of main thread
- added Bresenham2, for drawing lines on an integer 2D grid
- added GridPoint2 and GridPoint3, representing integer points in a 2D or 3D grid
- added attribute location caching for VertexData/Mesh. Hand vertex attribs to a ShaderProgram, get back int[], pass that to Mesh
- added Android x86 builds, removed libandroidgl20.so, it's now build as part of gdx-core for Android
- changed method signature on Box2D World#getBodies and World#getJoints, pass in an Array to fill
- removed glGetShaderSource from GL20, use ShaderProgram#getVertexShaderSource/getFragmentShaderSource instead
- added reflection api
- added AsynchExecutor, execute tasks asynchronously. Used for GWT mainly.
- removed FileHandle#file(), has no business in there.
- removed box2deditor
- removed custom typedarrays in gwt backend
- added classpath files support for gwt backend (limited)
- moved AndroidWallpaperListener to Android Backend
- added new VertexAttribute Usage flags, bone weight, tangent, binormal. previously encoded as Usage.Generic. Also
  added field "unit" to VertexAttribute, used by texture coordinates and bone weights to specify index/unit.
- setup-ui template for iOS disables pngcrush, also updated wiki iOS article
- add Pixmap#fillTriangle via jni gdx2d_fill_triangle() to fill a triangle based on its vertices.
- add asynchronous download with continuous progress feedback to GWT asset preloader, see https://github.com/libgdx/libgdx/pull/409?w=1
- add capability to add/exclude package/classes GWT Reflection system, see https://github.com/libgdx/libgdx/pull/409?w=1
- add updated gdx-tiled-preprocessor, generate one single TextureAtlas for all the specified Tiled maps, see http://www.badlogicgames.com/forum/viewtopic.php?f=17&t=8911
- maps API, add new AtlasTiledMapLoader for loading maps produced by the tiled preprocessor tool
- ImageProcessor, TexturePacker2 now accepts BufferedImage objects as input
- TexturePacker2 now avoids duplicated aliases
- Updated to LWJGL 2.9.0
- refactored JSON API, see http://www.badlogicgames.com/wordpress/?p=2993
- Updated Box2D to the latest trunk. Body#applyXXX methods now take an additional boolean parameter.
- TmxMapLoader has a flag in Parameters that lets you specify whether to generate mipmaps
- Animation#isAnimationFinished was fixed to behave as per javadocs (ignores looping)
- remove GLU interface and implementations. Use Matrix4 et al instead. see http://www.badlogicgames.com/wordpress/?p=2886
- new maps API, see http://www.badlogicgames.com/wordpress/?p=2870
- removed static public tmp Vector2 instances, manage such temporary vars yourself, see http://www.badlogicgames.com/wordpress/?p=2840
- changed Scene2D Group#clear(), see http://www.badlogicgames.com/wordpress/?p=2837
- changed the build system, natives are now fetched from the build server, see http://www.badlogicgames.com/wordpress/?p=2821
- freetype extension supported on iOS, see http://www.badlogicgames.com/wordpress/?p=2819
- changed ShapeRenderer API, see http://www.badlogicgames.com/wordpress/?p=2809
- changed Actions.add to addAction, changed parameter order, and added removeAction, addListener, removeListener
- Box2d joints now allow for user data
- Changes to Intersector, Circle, Rectangle and BoundingBox for consistency in #overlap, #intersect and #contains methods, see https://github.com/libgdx/libgdx/pull/312
- Removed LwjglApplicationConfiguration CPU sync. Added foreground and background target framerate.
- scene2d, no longer use getters/setters internally for Actor x, y, width, height, scalex, scaley and rotation.
- Array, detect nested iterator usage and throw exception.
- Added getVolume to Music class and Android, IOS and GWT backends
- 1381, fixed JSON parsing of longs. In addition to Float, it now parses Long if no decimal point is found.
- Changed Array constructors that took an array to have offset and count
- scene2d, Actor parentToLocalCoordinates and localToParentCoordinates refactoring, see http://www.badlogicgames.com/forum/viewtopic.php?p=40441#p40441
- scene2d, Action#setActor no longer calls reset if the Action has no pool. This allows non-pooled actions to be add and removed from actors, restarted, and reused.
- ScrollBar#setForceOverscroll renamed to setForceScroll, as it affects more than just overscroll.
- ArrayMap#addAll renamed to putAll to match the other maps.
- Added ObjectSet and IntSet.
- Added completion listener to Music.
- Added Music#setPan.
- Sound#play and Sound#loop on Android now return -1 on failure, to match other backends.
- DelegateAction subclasses need to implement delegate() instead of act(). http://www.badlogicgames.com/forum/viewtopic.php?p=43576#p43576
- Added pause and resume methods to Sound.
- Changed AssetErrorListener#error to have AssetDescriptor to enable access to parameters of failed asset.
- Changed SelectBoxStyle to have ScrollPaneStyle and ListStyle for fully customizing the drop down list. http://www.badlogicgames.com/wordpress/?p=3110
- AssetLoader now takes a FileHandle that is the resolved file name. The AssetLoader no longer has to resolve the file name, so we can prevent it from being resolved twice.
- Rewrote EarClippingTriangulator to not allocate (no more Vector2s).
- Added ParticleEffectLoader to make AssetManager load ParticleEffects
- Added GeometryUtils, more Intersector functions, DelaunayTriangulator, ConvexHull.
- Added getBoundingBox to ParticleEffect
- EarClippingTriangulator changed to return triangle indices.
- PolygonSpriteBatch and friends refactored to use triangle indices.
- Added add(T, float), remove(int), remove(T) and clear() methods to BinaryHeap
- Bitmap Font changes:
	- FreeTypeFontGenerator allows you to specify the PixmapPacker now, to create an atlas with many different fonts (see FreeTypePackTest)
	- BitmapFont, BitmapFontCache and FreeTypeFontGenerator now support fonts with multiple texture pages. (see BitmapFontTest and FreeTypePackTest)
	- BitmapFontData.imagePath and getImagePath() is depreacted, use imagePaths[] and getImagePath(int) instead
	- Added two BitmapFont constructors for convenience; no need to specify flip boolean
	- Added getCache() to BitmapFont, for expert users who wish to use the BitmapFontCache (see BitmapFontTest)
	- FreeTypeFontGenerator now includes setMaxTextureSize and getMaxTextureSize to cap the generated glyph atlas size (default 1024)
- added render-hooks beginRender() and endRender() to BatchTiledMapRenderer
- Added panStop to GestureListener interface.
- ScissorStack#calculateScissors changed to take viewport, enabling it to work with glViewport.
- Added Bits#getAndClear, Bits#getAndSet and Bits#containsAll
- Added setX and setY to TextureAtlas.AtlasSprite so it matches expected behavior

[0.9.8]
- see http://www.badlogicgames.com/wordpress/?p=2791

[0.9.7]
- see http://www.badlogicgames.com/wordpress/?p=2664

[0.9.6]
- see http://www.badlogicgames.com/wordpress/?p=2513
