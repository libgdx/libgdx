<!-- 
template Ant build file for all projects that should go into the distribution. 
Fill out the properties at the beginning of the project definition.

The following things have to be set from the outside:

property name="jar" value="jar-name-without-suffix" -> the name of the resulting jar file
property name="distDir" value="dist-directory" -> the output directory for the resulting jar
path id="classpath" -> the filesets defining the classpath needed to compile the project
zipfileset id="jarfiles" -> the jar files to be merged with the project's classes
-->
<project name="template" default="all" basedir=".">
	<!-- default values -->
	<property name="src" value="src" />
	<property name="jni" value="jni" />
	<property name="target" value="target" />
	<property name="libs" value="libs" />
	<!-- define if native sources should be generated using jnigen or not, default false -->
	<property name="generateJni" value="false" />
	<!-- defines the class to invoke if generateJni is true -->
	<property name="jniBuildClass" value="" />
	<path id="classpath" />
	<zipfileset id="jarfiles" dir="." excludes="**" />
	<property name="targetClasses" value="${target}/java" />

	<!-- clean output directories -->
	<target name="clean">
		<delete dir="${target}" />
	</target>

	<!-- init task, creates all necessary directories -->
	<target name="init" depends="clean">
		<mkdir dir="${libs}/android32" />
		<mkdir dir="${libs}/armeabi" />
		<mkdir dir="${libs}/armeabi-v7a" />
		<mkdir dir="${libs}/linux32" />
		<mkdir dir="${libs}/linux64" />
		<mkdir dir="${libs}/macosx32" />
		<mkdir dir="${libs}/windows32" />
		<mkdir dir="${libs}/windows64" />

		<mkdir dir="${target}" />
		<mkdir dir="${targetClasses}" />
		<!-- need to copy the internal font to target if compiling the gdx core :/ -->
		<copy failonerror="false" tofile="${target}/java/com/badlogic/gdx/utils/arial-15.png" file="src/com/badlogic/gdx/utils/arial-15.png" />
		<copy failonerror="false" tofile="${target}/java/com/badlogic/gdx/utils/arial-15.fnt" file="src/com/badlogic/gdx/utils/arial-15.fnt" />
		<!-- need to copy jni headers for gdx-jnigen -->
		<copy failonerror="false" todir="${targetClasses}">
			<fileset dir="src">
				<include name="**/*.h"/>
				<include name="**/*.c"/>
				<include name="**/*.template"/>
			</fileset>
		</copy>
		<copy failonerror="false" todir="${targetClasses}">
			<fileset dir="src">
				<include name="**/*.gwt.xml"/>
			</fileset>
		</copy>
	</target>

	<!-- compiles the java code -->
	<target name="compile" depends="init">
		<javac debug="on" encoding="utf-8" srcdir="${src}" destdir="${targetClasses}">
			<classpath>
				<path refid="classpath"/>
				<fileset file="${libs}/*.jar">
					<exclude name="*-natives.jar"/>
				</fileset>
			</classpath>
			<exclude name="**/gwt/emu/java/lang/System.java"/>
		</javac>
	</target>

	<!-- checks to see if jni generation is enabled or not -->
	<target name="checkGenerateJniEnabled">
		<condition property="generateJniEnabled">
			<equals arg1="${generateJni}" arg2="true" />
		</condition>
	</target>

	<!-- if jni generation is enabled, then generates all the native code to be compiled later by invoking the specified build class -->
	<target name="generate-jni" depends="checkGenerateJniEnabled, compile" if="generateJniEnabled">
		<java classname="${jniBuildClass}" classpathref="classpath" dir="${basedir}" fork="true">
			<classpath id="classes" path="${targetClasses}" />
		</java>
	</target>

	<!-- compile native code if available -->
	<target name="check-natives" depends="generate-jni">
		<condition property="natives-present">
			<and>
				<available file="${jni}/build.xml"/>
				<istrue value="${build-natives}"/>
			</and>
		</condition>
	</target>
	<target name="compile-natives" depends="init, check-natives" if="natives-present">
		<echo message="compiling natives code"/>
		<ant antfile="build.xml" target="clean" dir="${jni}"/>
		<ant antfile="build.xml" target="all" dir="${jni}"/>
		<!-- copy shared libs for android -->
		<copy failonerror="false" todir="${distDir}/armeabi">
			<fileset dir="${libs}/armeabi">
				<include name="**/*.so"/>
			</fileset>
		</copy>
		<copy failonerror="false" todir="${distDir}/armeabi-v7a">
			<fileset dir="${libs}/armeabi-v7a">
				<include name="**/*.so"/>
			</fileset>
		</copy>
	</target>

	<!-- create source and class jar -->
	<target name="all" depends="compile,compile-natives">
		<!-- source jar -->
		<mkdir dir="${distDir}/sources" />
		<jar destfile="${distDir}/sources/${jar}-sources.jar" basedir="${src}" />

		<!-- copy shared libs for desktop -->
		<copy failonerror="false" todir="${distDir}">
			<fileset dir="${libs}">
				<include name="**/*-natives.jar"/>
				<exclude name="**/test-natives.jar"/>
			</fileset>
		</copy>

		<!-- copy shared libs for android -->
		<copy failonerror="false" todir="${distDir}/armeabi">
			<fileset dir="${libs}/armeabi">
				<include name="**/*.so"/>
			</fileset>
		</copy>
		<copy failonerror="false" todir="${distDir}/armeabi-v7a">
			<fileset dir="${libs}/armeabi-v7a">
				<include name="**/*.so"/>
			</fileset>
		</copy>

		<!-- class jar -->
		<jar destfile="${distDir}/${jar}.jar">
			<fileset dir="${targetClasses}"/>
			<!-- merge dependencies found in libs/ folder, exclude native, debug and android/gwt jars -->
			<zipgroupfileset file="${libs}/*.jar">
				<exclude name="*-natives.jar"/>
				<exclude name="*-debug.jar"/>
				<exclude name="android-*.jar"/>
				<exclude name="gwt*.jar"/>
			</zipgroupfileset>
			<!-- merge dependencies specified in parent build.xml -->
			<zipfileset refid="jarfiles"/>
		</jar>
	</target>
</project>
