diff -cr o/ffmpeg-2.2.2/libavcodec/fft.h ffmpeg-2.2.2/libavcodec/fft.h
*** o/ffmpeg-2.2.2/libavcodec/fft.h	2014-05-05 06:14:27.000000000 +0200
--- ffmpeg-2.2.2/libavcodec/fft.h	2014-07-30 15:23:07.146774546 +0200
***************
*** 112,119 ****
  #define COSTABLE_CONST
  #endif
  
  #define COSTABLE(size) \
!     COSTABLE_CONST DECLARE_ALIGNED(32, FFTSample, FFT_NAME(ff_cos_##size))[size/2]
  
  extern COSTABLE(16);
  extern COSTABLE(32);
--- 112,121 ----
  #define COSTABLE_CONST
  #endif
  
+ #define HIDDEN_FOR_LIBGDX __attribute__((visibility("hidden")))
+ 
  #define COSTABLE(size) \
!     COSTABLE_CONST DECLARE_ALIGNED(32, FFTSample, HIDDEN_FOR_LIBGDX FFT_NAME(ff_cos_##size))[size/2]
  
  extern COSTABLE(16);
  extern COSTABLE(32);
diff -cr o/ffmpeg-2.2.2/libavcodec/x86/constants.c ffmpeg-2.2.2/libavcodec/x86/constants.c
*** o/ffmpeg-2.2.2/libavcodec/x86/constants.c	2014-05-05 06:14:29.000000000 +0200
--- ffmpeg-2.2.2/libavcodec/x86/constants.c	2014-07-30 15:23:07.554765651 +0200
***************
*** 22,53 ****
  #include "libavutil/x86/asm.h" // for xmm_reg
  #include "constants.h"
  
! DECLARE_ALIGNED(8,  const uint64_t, ff_wtwo) = 0x0002000200020002ULL;
  
! DECLARE_ALIGNED(16, const xmm_reg,  ff_pw_1)    = { 0x0001000100010001ULL, 0x0001000100010001ULL };
! DECLARE_ALIGNED(16, const xmm_reg,  ff_pw_2)    = { 0x0002000200020002ULL, 0x0002000200020002ULL };
! DECLARE_ALIGNED(16, const xmm_reg,  ff_pw_3)    = { 0x0003000300030003ULL, 0x0003000300030003ULL };
! DECLARE_ALIGNED(16, const xmm_reg,  ff_pw_4)    = { 0x0004000400040004ULL, 0x0004000400040004ULL };
! DECLARE_ALIGNED(16, const xmm_reg,  ff_pw_5)    = { 0x0005000500050005ULL, 0x0005000500050005ULL };
! DECLARE_ALIGNED(16, const xmm_reg,  ff_pw_8)    = { 0x0008000800080008ULL, 0x0008000800080008ULL };
! DECLARE_ALIGNED(16, const xmm_reg,  ff_pw_9)    = { 0x0009000900090009ULL, 0x0009000900090009ULL };
! DECLARE_ALIGNED(8,  const uint64_t, ff_pw_15)   =   0x000F000F000F000FULL;
! DECLARE_ALIGNED(16, const xmm_reg,  ff_pw_16)   = { 0x0010001000100010ULL, 0x0010001000100010ULL };
! DECLARE_ALIGNED(16, const xmm_reg,  ff_pw_17)   = { 0x0011001100110011ULL, 0x0011001100110011ULL };
! DECLARE_ALIGNED(16, const xmm_reg,  ff_pw_18)   = { 0x0012001200120012ULL, 0x0012001200120012ULL };
! DECLARE_ALIGNED(8,  const uint64_t, ff_pw_20)   =   0x0014001400140014ULL;
! DECLARE_ALIGNED(16, const xmm_reg,  ff_pw_32)   = { 0x0020002000200020ULL, 0x0020002000200020ULL };
! DECLARE_ALIGNED(8,  const uint64_t, ff_pw_42)   =   0x002A002A002A002AULL;
! DECLARE_ALIGNED(8,  const uint64_t, ff_pw_53)   =   0x0035003500350035ULL;
! DECLARE_ALIGNED(16, const xmm_reg,  ff_pw_64)   = { 0x0040004000400040ULL, 0x0040004000400040ULL };
! DECLARE_ALIGNED(8,  const uint64_t, ff_pw_96)   =   0x0060006000600060ULL;
! DECLARE_ALIGNED(8,  const uint64_t, ff_pw_128)  =   0x0080008000800080ULL;
! DECLARE_ALIGNED(8,  const uint64_t, ff_pw_255)  =   0x00ff00ff00ff00ffULL;
! DECLARE_ALIGNED(16, const xmm_reg,  ff_pw_512)  = { 0x0200020002000200ULL, 0x0200020002000200ULL };
! DECLARE_ALIGNED(16, const xmm_reg,  ff_pw_1019) = { 0x03FB03FB03FB03FBULL, 0x03FB03FB03FB03FBULL };
  
- DECLARE_ALIGNED(16, const xmm_reg,  ff_pb_0)    = { 0x0000000000000000ULL, 0x0000000000000000ULL };
- DECLARE_ALIGNED(16, const xmm_reg,  ff_pb_1)    = { 0x0101010101010101ULL, 0x0101010101010101ULL };
- DECLARE_ALIGNED(16, const xmm_reg,  ff_pb_3)    = { 0x0303030303030303ULL, 0x0303030303030303ULL };
- DECLARE_ALIGNED(16, const xmm_reg,  ff_pb_80)   = { 0x8080808080808080ULL, 0x8080808080808080ULL };
- DECLARE_ALIGNED(8,  const uint64_t, ff_pb_FC)   =   0xFCFCFCFCFCFCFCFCULL;
--- 22,57 ----
  #include "libavutil/x86/asm.h" // for xmm_reg
  #include "constants.h"
  
! #define HIDDEN_FOR_LIBGDX __attribute__((visibility("hidden")))
  
! DECLARE_ALIGNED(8,  const uint64_t, HIDDEN_FOR_LIBGDX ff_wtwo) = 0x0002000200020002ULL;
! 
! DECLARE_ALIGNED(16, const xmm_reg,  HIDDEN_FOR_LIBGDX ff_pw_1)    = { 0x0001000100010001ULL, 0x0001000100010001ULL };
! DECLARE_ALIGNED(16, const xmm_reg,  HIDDEN_FOR_LIBGDX ff_pw_2)    = { 0x0002000200020002ULL, 0x0002000200020002ULL };
! DECLARE_ALIGNED(16, const xmm_reg,  HIDDEN_FOR_LIBGDX ff_pw_3)    = { 0x0003000300030003ULL, 0x0003000300030003ULL };
! DECLARE_ALIGNED(16, const xmm_reg,  HIDDEN_FOR_LIBGDX ff_pw_4)    = { 0x0004000400040004ULL, 0x0004000400040004ULL };
! DECLARE_ALIGNED(16, const xmm_reg,  HIDDEN_FOR_LIBGDX ff_pw_5)    = { 0x0005000500050005ULL, 0x0005000500050005ULL };
! DECLARE_ALIGNED(16, const xmm_reg,  HIDDEN_FOR_LIBGDX ff_pw_8)    = { 0x0008000800080008ULL, 0x0008000800080008ULL };
! DECLARE_ALIGNED(16, const xmm_reg,  HIDDEN_FOR_LIBGDX ff_pw_9)    = { 0x0009000900090009ULL, 0x0009000900090009ULL };
! DECLARE_ALIGNED(8,  const uint64_t, HIDDEN_FOR_LIBGDX ff_pw_15)   =   0x000F000F000F000FULL;
! DECLARE_ALIGNED(16, const xmm_reg,  HIDDEN_FOR_LIBGDX ff_pw_16)   = { 0x0010001000100010ULL, 0x0010001000100010ULL };
! DECLARE_ALIGNED(16, const xmm_reg,  HIDDEN_FOR_LIBGDX ff_pw_17)   = { 0x0011001100110011ULL, 0x0011001100110011ULL };
! DECLARE_ALIGNED(16, const xmm_reg,  HIDDEN_FOR_LIBGDX ff_pw_18)   = { 0x0012001200120012ULL, 0x0012001200120012ULL };
! DECLARE_ALIGNED(8,  const uint64_t, HIDDEN_FOR_LIBGDX ff_pw_20)   =   0x0014001400140014ULL;
! DECLARE_ALIGNED(16, const xmm_reg,  HIDDEN_FOR_LIBGDX ff_pw_32)   = { 0x0020002000200020ULL, 0x0020002000200020ULL };
! DECLARE_ALIGNED(8,  const uint64_t, HIDDEN_FOR_LIBGDX ff_pw_42)   =   0x002A002A002A002AULL;
! DECLARE_ALIGNED(8,  const uint64_t, HIDDEN_FOR_LIBGDX ff_pw_53)   =   0x0035003500350035ULL;
! DECLARE_ALIGNED(16, const xmm_reg,  HIDDEN_FOR_LIBGDX ff_pw_64)   = { 0x0040004000400040ULL, 0x0040004000400040ULL };
! DECLARE_ALIGNED(8,  const uint64_t, HIDDEN_FOR_LIBGDX ff_pw_96)   =   0x0060006000600060ULL;
! DECLARE_ALIGNED(8,  const uint64_t, HIDDEN_FOR_LIBGDX ff_pw_128)  =   0x0080008000800080ULL;
! DECLARE_ALIGNED(8,  const uint64_t, HIDDEN_FOR_LIBGDX ff_pw_255)  =   0x00ff00ff00ff00ffULL;
! DECLARE_ALIGNED(16, const xmm_reg,  HIDDEN_FOR_LIBGDX ff_pw_512)  = { 0x0200020002000200ULL, 0x0200020002000200ULL };
! DECLARE_ALIGNED(16, const xmm_reg,  HIDDEN_FOR_LIBGDX ff_pw_1019) = { 0x03FB03FB03FB03FBULL, 0x03FB03FB03FB03FBULL };
! 
! DECLARE_ALIGNED(16, const xmm_reg,  HIDDEN_FOR_LIBGDX ff_pb_0)    = { 0x0000000000000000ULL, 0x0000000000000000ULL };
! DECLARE_ALIGNED(16, const xmm_reg,  HIDDEN_FOR_LIBGDX ff_pb_1)    = { 0x0101010101010101ULL, 0x0101010101010101ULL };
! DECLARE_ALIGNED(16, const xmm_reg,  HIDDEN_FOR_LIBGDX ff_pb_3)    = { 0x0303030303030303ULL, 0x0303030303030303ULL };
! DECLARE_ALIGNED(16, const xmm_reg,  HIDDEN_FOR_LIBGDX ff_pb_80)   = { 0x8080808080808080ULL, 0x8080808080808080ULL };
! DECLARE_ALIGNED(8,  const uint64_t, HIDDEN_FOR_LIBGDX ff_pb_FC)   =   0xFCFCFCFCFCFCFCFCULL;
! #define HIDDEN_FOR_LIBGDX __attribute__((visibility("hidden")))
  
diff -cr o/ffmpeg-2.2.2/libswresample/x86/resample_mmx.h ffmpeg-2.2.2/libswresample/x86/resample_mmx.h
*** o/ffmpeg-2.2.2/libswresample/x86/resample_mmx.h	2014-03-23 23:07:55.000000000 +0100
--- ffmpeg-2.2.2/libswresample/x86/resample_mmx.h	2014-07-30 15:23:07.958756843 +0200
***************
*** 25,31 ****
  int swri_resample_int16_mmx2 (struct ResampleContext *c, int16_t *dst, const int16_t *src, int *consumed, int src_size, int dst_size, int update_ctx);
  int swri_resample_int16_ssse3(struct ResampleContext *c, int16_t *dst, const int16_t *src, int *consumed, int src_size, int dst_size, int update_ctx);
  
! DECLARE_ALIGNED(16, const uint64_t, ff_resample_int16_rounder)[2]    = { 0x0000000000004000ULL, 0x0000000000000000ULL};
  
  #define COMMON_CORE_INT16_MMX2 \
      x86_reg len= -2*c->filter_length;\
--- 25,33 ----
  int swri_resample_int16_mmx2 (struct ResampleContext *c, int16_t *dst, const int16_t *src, int *consumed, int src_size, int dst_size, int update_ctx);
  int swri_resample_int16_ssse3(struct ResampleContext *c, int16_t *dst, const int16_t *src, int *consumed, int src_size, int dst_size, int update_ctx);
  
! #define HIDDEN_FOR_LIBGDX __attribute__((visibility("hidden")))
! 
! DECLARE_ALIGNED(16, const uint64_t, HIDDEN_FOR_LIBGDX ff_resample_int16_rounder)[2]    = { 0x0000000000004000ULL, 0x0000000000000000ULL};
  
  #define COMMON_CORE_INT16_MMX2 \
      x86_reg len= -2*c->filter_length;\
***************
*** 68,70 ****
--- 70,74 ----
        "r" (((uint8_t*)filter)-len),\
        "r" (dst+dst_index)\
  );
+ #define HIDDEN_FOR_LIBGDX __attribute__((visibility("hidden")))
+ 
diff -cr o/ffmpeg-2.2.2/libswscale/x86/swscale.c ffmpeg-2.2.2/libswscale/x86/swscale.c
*** o/ffmpeg-2.2.2/libswscale/x86/swscale.c	2014-05-05 06:14:32.000000000 +0200
--- ffmpeg-2.2.2/libswscale/x86/swscale.c	2014-07-30 15:23:08.382747598 +0200
***************
*** 54,71 ****
  DECLARE_ASM_CONST(8, uint64_t, g15Mask)=   0x03E003E003E003E0LL;
  DECLARE_ASM_CONST(8, uint64_t, r15Mask)=   0x7C007C007C007C00LL;
  
! DECLARE_ALIGNED(8, const uint64_t, ff_M24A)         = 0x00FF0000FF0000FFLL;
! DECLARE_ALIGNED(8, const uint64_t, ff_M24B)         = 0xFF0000FF0000FF00LL;
! DECLARE_ALIGNED(8, const uint64_t, ff_M24C)         = 0x0000FF0000FF0000LL;
! 
! DECLARE_ALIGNED(8, const uint64_t, ff_bgr2YCoeff)   = 0x000020E540830C8BULL;
! DECLARE_ALIGNED(8, const uint64_t, ff_bgr2UCoeff)   = 0x0000ED0FDAC23831ULL;
! DECLARE_ALIGNED(8, const uint64_t, ff_bgr2VCoeff)   = 0x00003831D0E6F6EAULL;
! 
! DECLARE_ALIGNED(8, const uint64_t, ff_bgr2YOffset)  = 0x1010101010101010ULL;
! DECLARE_ALIGNED(8, const uint64_t, ff_bgr2UVOffset) = 0x8080808080808080ULL;
! DECLARE_ALIGNED(8, const uint64_t, ff_w1111)        = 0x0001000100010001ULL;
  
  
  //MMX versions
  #if HAVE_MMX_INLINE
--- 54,72 ----
  DECLARE_ASM_CONST(8, uint64_t, g15Mask)=   0x03E003E003E003E0LL;
  DECLARE_ASM_CONST(8, uint64_t, r15Mask)=   0x7C007C007C007C00LL;
  
! #define HIDDEN_FOR_LIBGDX __attribute__((visibility("hidden")))
  
+ DECLARE_ALIGNED(8, const uint64_t, HIDDEN_FOR_LIBGDX ff_M24A)         = 0x00FF0000FF0000FFLL;
+ DECLARE_ALIGNED(8, const uint64_t, HIDDEN_FOR_LIBGDX ff_M24B)         = 0xFF0000FF0000FF00LL;
+ DECLARE_ALIGNED(8, const uint64_t, HIDDEN_FOR_LIBGDX ff_M24C)         = 0x0000FF0000FF0000LL;
+ 
+ DECLARE_ALIGNED(8, const uint64_t, HIDDEN_FOR_LIBGDX ff_bgr2YCoeff)   = 0x000020E540830C8BULL;
+ DECLARE_ALIGNED(8, const uint64_t, HIDDEN_FOR_LIBGDX ff_bgr2UCoeff)   = 0x0000ED0FDAC23831ULL;
+ DECLARE_ALIGNED(8, const uint64_t, HIDDEN_FOR_LIBGDX ff_bgr2VCoeff)   = 0x00003831D0E6F6EAULL;
+ 
+ DECLARE_ALIGNED(8, const uint64_t, HIDDEN_FOR_LIBGDX ff_bgr2YOffset)  = 0x1010101010101010ULL;
+ DECLARE_ALIGNED(8, const uint64_t, HIDDEN_FOR_LIBGDX ff_bgr2UVOffset) = 0x8080808080808080ULL;
+ DECLARE_ALIGNED(8, const uint64_t, HIDDEN_FOR_LIBGDX ff_w1111)        = 0x0001000100010001ULL;
  
  //MMX versions
  #if HAVE_MMX_INLINE
***************
*** 112,117 ****
--- 113,120 ----
          c->greenDither= ff_dither8[dstY&1];
      else
          c->greenDither= ff_dither4[dstY&1];
+ #define HIDDEN_FOR_LIBGDX __attribute__((visibility("hidden")))
+ 
      c->redDither= ff_dither8[(dstY+1)&1];
      if (dstY < dstH - 2) {
          const int16_t **lumSrcPtr= (const int16_t **)(void*) lumPixBuf + lumBufIndex + firstLumSrcY - lastInLumBuf + vLumBufSize;