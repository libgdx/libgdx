<project name="gdx-tokamak-Windows-32" basedir="." default="postcompile">
	<!-- include the environment -->
	<property environment="env"/>	
	<!-- output directory for temporary object files -->
	<property name="buildDir" value="../target/windows32" />
	<!-- output directory for the shared library -->
	<property name="libsDir" value="../libs/windows32" />
	<!-- the name of the shared library -->
	<property name="libName" value="gdx-tokamak.dll"/>
	<!-- the jni header jniPlatform to use -->
	<property name="jniPlatform" value="win32"/>
	<!-- the compilerPrefix for the C & C++ compilers -->
	<property name="compilerPrefix" value=""/>	
	
	<!-- define gcc compiler, options and files to compile -->
	<property name="gcc" value="${compilerPrefix}gcc"/>	
	<property name="gcc-opts" value="-c -Wall -O2 -mfpmath=sse -msse2 -fmessage-length=0 -m32"/>
	<fileset id="gcc-files" dir="./">
		<exclude name="target/"/>		
				<include name="**/*.c"/>

		
	</fileset>
	
	<!-- define g++ compiler, options and files to compile -->
	<property name="g++" value="${compilerPrefix}g++"/>
	<property name="g++-opts" value="-c -Wall -O2 -mfpmath=sse -msse2 -fmessage-length=0 -m32"/>
	<fileset id="g++-files" dir="./">
		<exclude name="target/"/>
				<include name="**/*.cpp"/>

				<exclude name="**/perflinux.cpp"/>

	</fileset>

	<!-- define linker and options -->
	<property name="linker" value="${compilerPrefix}g++"/>
	<property name="linker-opts" value="-Wl,--kill-at -shared -m32"/>
	
	<!-- cleans the build directory, removes all object files and shared libs -->
	<target name="clean">
		<delete includeemptydirs="true" quiet="true">
			<fileset dir="${buildDir}"/>
			<fileset dir="${libsDir}" includes="**/*" excludes="**/.svn"/>
		</delete>
	</target>
	
	<target name="precompile">
		
	</target>
	
	<target name="create-build-dir" depends="precompile">
		<!-- FIXME this is pretty nasty :/ -->
		<copy todir="${buildDir}">
			<fileset refid="g++-files"/>
			<fileset refid="gcc-files"/>
		</copy>
		<delete>
			<fileset dir="${buildDir}">
				<include name="*"/>
				<exclude name="*.o"/>
			</fileset>
		</delete>
	</target>

	<!-- compiles all C and C++ files to object files in the build directory -->
	<target name="compile" depends="create-build-dir" >
		<mkdir dir="${buildDir}"/>
		<apply failonerror="true" executable="${g++}" dest="${buildDir}" verbose="true">
			<arg line="${g++-opts}"/>
			<arg value="-Ijni-headers"/>
			<arg value="-Ijni-headers/${jniPlatform}"/>
			<arg value="-I."/>
						<arg value="-I."/>
			<arg value="-Itokamak/include"/>

			<srcfile/>
			<arg value="-o"/>
			<targetfile/>
			<fileset refid="g++-files"/>
			<chainedmapper>
				<mapper type="glob" from="*.cpp" to="*.o"/>
			</chainedmapper>
		</apply>
		<apply failonerror="true" executable="${gcc}" dest="${buildDir}" verbose="true">
			<arg line="${gcc-opts}"/>
			<arg value="-Ijni-headers"/>
			<arg value="-Ijni-headers/${jniPlatform}"/>
			<arg value="-I."/>
						<arg value="-I."/>
			<arg value="-Itokamak/include"/>

			<srcfile/>
			<arg value="-o"/>
			<targetfile/>
			<fileset refid="gcc-files"/>
			<chainedmapper>
				<mapper type="glob" from="*.c" to="*.o"/>
			</chainedmapper>
		</apply>
	</target>	

	<!-- links the shared library based on the previously compiled object files -->	
	<target name="link" depends="compile">
		<mkdir dir="${libsDir}"/>
		<apply failonerror="true" executable="${linker}" parallel="true" dir="${buildDir}">
			<arg line="${linker-opts}"/>
			<arg value="-o"/>
			<arg path="${libsDir}/${libName}"/>		
			<fileset dir="${buildDir}">
				<patternset>
					<include name="**/*.o"/>
				</patternset>
			</fileset>
		</apply>
	</target>	
	
	<target name="postcompile" depends="link">
		
	</target>
</project>
