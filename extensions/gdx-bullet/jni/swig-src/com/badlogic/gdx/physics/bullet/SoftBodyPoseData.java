/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.10
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package com.badlogic.gdx.physics.bullet;

import com.badlogic.gdx.math.Vector3;
import com.badlogic.gdx.math.Quaternion;
import com.badlogic.gdx.math.Matrix3;
import com.badlogic.gdx.math.Matrix4;

public class SoftBodyPoseData {
  private long swigCPtr;
  protected boolean swigCMemOwn;

  protected SoftBodyPoseData(long cPtr, boolean cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }

  public static long getCPtr(SoftBodyPoseData obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        gdxBulletJNI.delete_SoftBodyPoseData(swigCPtr);
      }
      swigCPtr = 0;
    }
  }

  public void setM_rot(SWIGTYPE_p_btMatrix3x3FloatData value) {
    gdxBulletJNI.SoftBodyPoseData_m_rot_set(swigCPtr, this, SWIGTYPE_p_btMatrix3x3FloatData.getCPtr(value));
  }

  public SWIGTYPE_p_btMatrix3x3FloatData getM_rot() {
    return new SWIGTYPE_p_btMatrix3x3FloatData(gdxBulletJNI.SoftBodyPoseData_m_rot_get(swigCPtr, this), true);
  }

  public void setM_scale(SWIGTYPE_p_btMatrix3x3FloatData value) {
    gdxBulletJNI.SoftBodyPoseData_m_scale_set(swigCPtr, this, SWIGTYPE_p_btMatrix3x3FloatData.getCPtr(value));
  }

  public SWIGTYPE_p_btMatrix3x3FloatData getM_scale() {
    return new SWIGTYPE_p_btMatrix3x3FloatData(gdxBulletJNI.SoftBodyPoseData_m_scale_get(swigCPtr, this), true);
  }

  public void setM_aqq(SWIGTYPE_p_btMatrix3x3FloatData value) {
    gdxBulletJNI.SoftBodyPoseData_m_aqq_set(swigCPtr, this, SWIGTYPE_p_btMatrix3x3FloatData.getCPtr(value));
  }

  public SWIGTYPE_p_btMatrix3x3FloatData getM_aqq() {
    return new SWIGTYPE_p_btMatrix3x3FloatData(gdxBulletJNI.SoftBodyPoseData_m_aqq_get(swigCPtr, this), true);
  }

  public void setM_com(btVector3FloatData value) {
    gdxBulletJNI.SoftBodyPoseData_m_com_set(swigCPtr, this, btVector3FloatData.getCPtr(value), value);
  }

  public btVector3FloatData getM_com() {
    long cPtr = gdxBulletJNI.SoftBodyPoseData_m_com_get(swigCPtr, this);
    return (cPtr == 0) ? null : new btVector3FloatData(cPtr, false);
  }

  public void setM_positions(btVector3FloatData value) {
    gdxBulletJNI.SoftBodyPoseData_m_positions_set(swigCPtr, this, btVector3FloatData.getCPtr(value), value);
  }

  public btVector3FloatData getM_positions() {
    long cPtr = gdxBulletJNI.SoftBodyPoseData_m_positions_get(swigCPtr, this);
    return (cPtr == 0) ? null : new btVector3FloatData(cPtr, false);
  }

  public void setM_weights(java.nio.FloatBuffer value) {
    assert value.isDirect() : "Buffer must be allocated direct.";
    {
      gdxBulletJNI.SoftBodyPoseData_m_weights_set(swigCPtr, this, value);
    }
  }

  public java.nio.FloatBuffer getM_weights() {
    return gdxBulletJNI.SoftBodyPoseData_m_weights_get(swigCPtr, this);
}

  public void setM_numPositions(int value) {
    gdxBulletJNI.SoftBodyPoseData_m_numPositions_set(swigCPtr, this, value);
  }

  public int getM_numPositions() {
    return gdxBulletJNI.SoftBodyPoseData_m_numPositions_get(swigCPtr, this);
  }

  public void setM_numWeigts(int value) {
    gdxBulletJNI.SoftBodyPoseData_m_numWeigts_set(swigCPtr, this, value);
  }

  public int getM_numWeigts() {
    return gdxBulletJNI.SoftBodyPoseData_m_numWeigts_get(swigCPtr, this);
  }

  public void setM_bvolume(int value) {
    gdxBulletJNI.SoftBodyPoseData_m_bvolume_set(swigCPtr, this, value);
  }

  public int getM_bvolume() {
    return gdxBulletJNI.SoftBodyPoseData_m_bvolume_get(swigCPtr, this);
  }

  public void setM_bframe(int value) {
    gdxBulletJNI.SoftBodyPoseData_m_bframe_set(swigCPtr, this, value);
  }

  public int getM_bframe() {
    return gdxBulletJNI.SoftBodyPoseData_m_bframe_get(swigCPtr, this);
  }

  public void setM_restVolume(float value) {
    gdxBulletJNI.SoftBodyPoseData_m_restVolume_set(swigCPtr, this, value);
  }

  public float getM_restVolume() {
    return gdxBulletJNI.SoftBodyPoseData_m_restVolume_get(swigCPtr, this);
  }

  public void setM_pad(int value) {
    gdxBulletJNI.SoftBodyPoseData_m_pad_set(swigCPtr, this, value);
  }

  public int getM_pad() {
    return gdxBulletJNI.SoftBodyPoseData_m_pad_get(swigCPtr, this);
  }

  public SoftBodyPoseData() {
    this(gdxBulletJNI.new_SoftBodyPoseData(), true);
  }

}
