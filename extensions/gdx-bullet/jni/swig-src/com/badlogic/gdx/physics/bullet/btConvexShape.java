/*******************************************************************************
 * Copyright 2011 See AUTHORS file.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 ******************************************************************************/

 /* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.10
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package com.badlogic.gdx.physics.bullet;

import com.badlogic.gdx.math.Vector3;
import com.badlogic.gdx.math.Quaternion;
import com.badlogic.gdx.math.Matrix3;
import com.badlogic.gdx.math.Matrix4;

public class btConvexShape extends btCollisionShape {
	private long swigCPtr;
	
	protected btConvexShape(final String className, long cPtr, boolean cMemoryOwn) {
		super(className, gdxBulletJNI.btConvexShape_SWIGUpcast(cPtr), cMemoryOwn);
		swigCPtr = cPtr;
	}
	
	protected btConvexShape(long cPtr, boolean cMemoryOwn) {
		this("btConvexShape", cPtr, cMemoryOwn);
		construct();
	}
	
	public static long getCPtr(btConvexShape obj) {
		return (obj == null) ? 0 : obj.swigCPtr;
	}

	@Override
	protected void finalize() throws Throwable {
		if (!destroyed)
			destroy();
		super.finalize();
	}

  @Override protected synchronized void delete() {
		if (swigCPtr != 0) {
			if (swigCMemOwn) {
				swigCMemOwn = false;
				gdxBulletJNI.delete_btConvexShape(swigCPtr);
			}
			swigCPtr = 0;
		}
		super.delete();
	}

  public Vector3 localGetSupportingVertex(Vector3 vec) {
	return gdxBulletJNI.btConvexShape_localGetSupportingVertex(swigCPtr, this, vec);
}

  public Vector3 localGetSupportingVertexWithoutMargin(Vector3 vec) {
	return gdxBulletJNI.btConvexShape_localGetSupportingVertexWithoutMargin(swigCPtr, this, vec);
}

  public Vector3 localGetSupportVertexWithoutMarginNonVirtual(Vector3 vec) {
	return gdxBulletJNI.btConvexShape_localGetSupportVertexWithoutMarginNonVirtual(swigCPtr, this, vec);
}

  public Vector3 localGetSupportVertexNonVirtual(Vector3 vec) {
	return gdxBulletJNI.btConvexShape_localGetSupportVertexNonVirtual(swigCPtr, this, vec);
}

  public float getMarginNonVirtual() {
    return gdxBulletJNI.btConvexShape_getMarginNonVirtual(swigCPtr, this);
  }

  public void getAabbNonVirtual(Matrix4 t, Vector3 aabbMin, Vector3 aabbMax) {
    gdxBulletJNI.btConvexShape_getAabbNonVirtual(swigCPtr, this, t, aabbMin, aabbMax);
  }

  public void project(Matrix4 trans, Vector3 dir, SWIGTYPE_p_float min, SWIGTYPE_p_float max) {
    gdxBulletJNI.btConvexShape_project(swigCPtr, this, trans, dir, SWIGTYPE_p_float.getCPtr(min), SWIGTYPE_p_float.getCPtr(max));
  }

  public void batchedUnitVectorGetSupportingVertexWithoutMargin(btVector3 vectors, btVector3 supportVerticesOut, int numVectors) {
    gdxBulletJNI.btConvexShape_batchedUnitVectorGetSupportingVertexWithoutMargin(swigCPtr, this, btVector3.getCPtr(vectors), vectors, btVector3.getCPtr(supportVerticesOut), supportVerticesOut, numVectors);
  }

  public void getAabbSlow(Matrix4 t, Vector3 aabbMin, Vector3 aabbMax) {
    gdxBulletJNI.btConvexShape_getAabbSlow(swigCPtr, this, t, aabbMin, aabbMax);
  }

  public int getNumPreferredPenetrationDirections() {
    return gdxBulletJNI.btConvexShape_getNumPreferredPenetrationDirections(swigCPtr, this);
  }

  public void getPreferredPenetrationDirection(int index, Vector3 penetrationVector) {
    gdxBulletJNI.btConvexShape_getPreferredPenetrationDirection(swigCPtr, this, index, penetrationVector);
  }

}
