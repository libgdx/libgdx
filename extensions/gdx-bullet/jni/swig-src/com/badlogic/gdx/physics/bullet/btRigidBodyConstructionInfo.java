/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.10
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package com.badlogic.gdx.physics.bullet;

import com.badlogic.gdx.math.Vector3;
import com.badlogic.gdx.math.Quaternion;
import com.badlogic.gdx.math.Matrix3;
import com.badlogic.gdx.math.Matrix4;

public class btRigidBodyConstructionInfo {
  private long swigCPtr;
  protected boolean swigCMemOwn;

  protected btRigidBodyConstructionInfo(long cPtr, boolean cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }

  public static long getCPtr(btRigidBodyConstructionInfo obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        gdxBulletJNI.delete_btRigidBodyConstructionInfo(swigCPtr);
      }
      swigCPtr = 0;
    }
  }

	protected btMotionState motionState;
	protected btCollisionShape collisionShape;
	
	public void setMotionState(btMotionState motionState) {
		this.motionState = motionState;
		setM_motionState(motionState);
	}
	
	public btMotionState getMotionState() {
		return motionState != null ? motionState : (motionState = getM_motionState());
	}
	
	public void setCollisionShape(btCollisionShape collisionShape) {
		this.collisionShape = collisionShape;
		setM_collisionShape(collisionShape);
	}
	
	public btCollisionShape getCollisionShape() {
		return collisionShape != null ? collisionShape : (collisionShape = getM_collisionShape());
	}
	
	public btRigidBodyConstructionInfo(float mass, btMotionState motionState, btCollisionShape collisionShape, Vector3 localInertia) {
		this(false, mass, motionState, collisionShape, localInertia);
		this.motionState = motionState;
		this.collisionShape = collisionShape;
	}
	
	public btRigidBodyConstructionInfo(float mass, btMotionState motionState, btCollisionShape collisionShape) {
		this(false, mass, motionState, collisionShape);
		this.motionState = motionState;
		this.collisionShape = collisionShape;
	}

  public void setMass(float value) {
    gdxBulletJNI.btRigidBodyConstructionInfo_mass_set(swigCPtr, this, value);
  }

  public float getMass() {
    return gdxBulletJNI.btRigidBodyConstructionInfo_mass_get(swigCPtr, this);
  }

  private void setM_motionState(btMotionState value) {
    gdxBulletJNI.btRigidBodyConstructionInfo_m_motionState_set(swigCPtr, this, btMotionState.getCPtr(value), value);
  }

  private btMotionState getM_motionState() {
    long cPtr = gdxBulletJNI.btRigidBodyConstructionInfo_m_motionState_get(swigCPtr, this);
    return (cPtr == 0) ? null : new btMotionState(cPtr, false);
  }

  public void setStartWorldTransform(btTransform value) {
    gdxBulletJNI.btRigidBodyConstructionInfo_startWorldTransform_set(swigCPtr, this, btTransform.getCPtr(value), value);
  }

  public btTransform getStartWorldTransform() {
    long cPtr = gdxBulletJNI.btRigidBodyConstructionInfo_startWorldTransform_get(swigCPtr, this);
    return (cPtr == 0) ? null : new btTransform(cPtr, false);
  }

  private void setM_collisionShape(btCollisionShape value) {
    gdxBulletJNI.btRigidBodyConstructionInfo_m_collisionShape_set(swigCPtr, this, btCollisionShape.getCPtr(value), value);
  }

  private btCollisionShape getM_collisionShape() {
    long cPtr = gdxBulletJNI.btRigidBodyConstructionInfo_m_collisionShape_get(swigCPtr, this);
    return (cPtr == 0) ? null : btCollisionShape.newDerivedObject(cPtr, false);
  }

  public void setLocalInertia(btVector3 value) {
    gdxBulletJNI.btRigidBodyConstructionInfo_localInertia_set(swigCPtr, this, btVector3.getCPtr(value), value);
  }

  public btVector3 getLocalInertia() {
    long cPtr = gdxBulletJNI.btRigidBodyConstructionInfo_localInertia_get(swigCPtr, this);
    return (cPtr == 0) ? null : new btVector3(cPtr, false);
  }

  public void setLinearDamping(float value) {
    gdxBulletJNI.btRigidBodyConstructionInfo_linearDamping_set(swigCPtr, this, value);
  }

  public float getLinearDamping() {
    return gdxBulletJNI.btRigidBodyConstructionInfo_linearDamping_get(swigCPtr, this);
  }

  public void setAngularDamping(float value) {
    gdxBulletJNI.btRigidBodyConstructionInfo_angularDamping_set(swigCPtr, this, value);
  }

  public float getAngularDamping() {
    return gdxBulletJNI.btRigidBodyConstructionInfo_angularDamping_get(swigCPtr, this);
  }

  public void setFriction(float value) {
    gdxBulletJNI.btRigidBodyConstructionInfo_friction_set(swigCPtr, this, value);
  }

  public float getFriction() {
    return gdxBulletJNI.btRigidBodyConstructionInfo_friction_get(swigCPtr, this);
  }

  public void setRestitution(float value) {
    gdxBulletJNI.btRigidBodyConstructionInfo_restitution_set(swigCPtr, this, value);
  }

  public float getRestitution() {
    return gdxBulletJNI.btRigidBodyConstructionInfo_restitution_get(swigCPtr, this);
  }

  public void setLinearSleepingThreshold(float value) {
    gdxBulletJNI.btRigidBodyConstructionInfo_linearSleepingThreshold_set(swigCPtr, this, value);
  }

  public float getLinearSleepingThreshold() {
    return gdxBulletJNI.btRigidBodyConstructionInfo_linearSleepingThreshold_get(swigCPtr, this);
  }

  public void setAngularSleepingThreshold(float value) {
    gdxBulletJNI.btRigidBodyConstructionInfo_angularSleepingThreshold_set(swigCPtr, this, value);
  }

  public float getAngularSleepingThreshold() {
    return gdxBulletJNI.btRigidBodyConstructionInfo_angularSleepingThreshold_get(swigCPtr, this);
  }

  public void setAdditionalDamping(boolean value) {
    gdxBulletJNI.btRigidBodyConstructionInfo_additionalDamping_set(swigCPtr, this, value);
  }

  public boolean getAdditionalDamping() {
    return gdxBulletJNI.btRigidBodyConstructionInfo_additionalDamping_get(swigCPtr, this);
  }

  public void setAdditionalDampingFactor(float value) {
    gdxBulletJNI.btRigidBodyConstructionInfo_additionalDampingFactor_set(swigCPtr, this, value);
  }

  public float getAdditionalDampingFactor() {
    return gdxBulletJNI.btRigidBodyConstructionInfo_additionalDampingFactor_get(swigCPtr, this);
  }

  public void setAdditionalLinearDampingThresholdSqr(float value) {
    gdxBulletJNI.btRigidBodyConstructionInfo_additionalLinearDampingThresholdSqr_set(swigCPtr, this, value);
  }

  public float getAdditionalLinearDampingThresholdSqr() {
    return gdxBulletJNI.btRigidBodyConstructionInfo_additionalLinearDampingThresholdSqr_get(swigCPtr, this);
  }

  public void setAdditionalAngularDampingThresholdSqr(float value) {
    gdxBulletJNI.btRigidBodyConstructionInfo_additionalAngularDampingThresholdSqr_set(swigCPtr, this, value);
  }

  public float getAdditionalAngularDampingThresholdSqr() {
    return gdxBulletJNI.btRigidBodyConstructionInfo_additionalAngularDampingThresholdSqr_get(swigCPtr, this);
  }

  public void setAdditionalAngularDampingFactor(float value) {
    gdxBulletJNI.btRigidBodyConstructionInfo_additionalAngularDampingFactor_set(swigCPtr, this, value);
  }

  public float getAdditionalAngularDampingFactor() {
    return gdxBulletJNI.btRigidBodyConstructionInfo_additionalAngularDampingFactor_get(swigCPtr, this);
  }

  private btRigidBodyConstructionInfo(boolean dummy, float mass, btMotionState motionState, btCollisionShape collisionShape, Vector3 localInertia) {
    this(gdxBulletJNI.new_btRigidBodyConstructionInfo__SWIG_0(dummy, mass, btMotionState.getCPtr(motionState), motionState, btCollisionShape.getCPtr(collisionShape), collisionShape, localInertia), true);
  }

  private btRigidBodyConstructionInfo(boolean dummy, float mass, btMotionState motionState, btCollisionShape collisionShape) {
    this(gdxBulletJNI.new_btRigidBodyConstructionInfo__SWIG_1(dummy, mass, btMotionState.getCPtr(motionState), motionState, btCollisionShape.getCPtr(collisionShape), collisionShape), true);
  }

}
