/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.10
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package com.badlogic.gdx.physics.bullet;

import com.badlogic.gdx.math.Vector3;
import com.badlogic.gdx.math.Quaternion;
import com.badlogic.gdx.math.Matrix3;
import com.badlogic.gdx.math.Matrix4;

public class btBulletWorldImporter extends btWorldImporter {
  private long swigCPtr;

  protected btBulletWorldImporter(long cPtr, boolean cMemoryOwn) {
    super(gdxBulletJNI.btBulletWorldImporter_SWIGUpcast(cPtr), cMemoryOwn);
    swigCPtr = cPtr;
  }

  public static long getCPtr(btBulletWorldImporter obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        gdxBulletJNI.delete_btBulletWorldImporter(swigCPtr);
      }
      swigCPtr = 0;
    }
    super.delete();
  }

  protected void swigDirectorDisconnect() {
    swigCMemOwn = false;
    delete();
  }

  public void swigReleaseOwnership() {
    swigCMemOwn = false;
    gdxBulletJNI.btBulletWorldImporter_change_ownership(this, swigCPtr, false);
  }

  public void swigTakeOwnership() {
    swigCMemOwn = true;
    gdxBulletJNI.btBulletWorldImporter_change_ownership(this, swigCPtr, true);
  }

	public boolean loadFile(final com.badlogic.gdx.files.FileHandle fileHandle) {
		final int len = (int)fileHandle.length();
		if (len <= 0)
			throw new com.badlogic.gdx.utils.GdxRuntimeException("Incorrect file specified");
		java.nio.ByteBuffer buff = com.badlogic.gdx.utils.BufferUtils.newUnsafeByteBuffer(len);
		buff.put(fileHandle.readBytes());
		buff.position(0);
		boolean result = loadFileFromMemory(buff, len);
		com.badlogic.gdx.utils.BufferUtils.disposeUnsafeByteBuffer(buff);
		return result;
	}

  public btBulletWorldImporter(btDynamicsWorld world) {
    this(gdxBulletJNI.new_btBulletWorldImporter__SWIG_0(btDynamicsWorld.getCPtr(world), world), true);
    gdxBulletJNI.btBulletWorldImporter_director_connect(this, swigCPtr, swigCMemOwn, true);
  }

  public btBulletWorldImporter() {
    this(gdxBulletJNI.new_btBulletWorldImporter__SWIG_1(), true);
    gdxBulletJNI.btBulletWorldImporter_director_connect(this, swigCPtr, swigCMemOwn, true);
  }

  public boolean loadFile(String fileName) {
    return gdxBulletJNI.btBulletWorldImporter_loadFile(swigCPtr, this, fileName);
  }

  public boolean loadFileFromMemory(SWIGTYPE_p_bParse__btBulletFile file) {
    return gdxBulletJNI.btBulletWorldImporter_loadFileFromMemory__SWIG_0(swigCPtr, this, SWIGTYPE_p_bParse__btBulletFile.getCPtr(file));
  }

  public boolean convertAllObjects(SWIGTYPE_p_bParse__btBulletFile file) {
    return (getClass() == btBulletWorldImporter.class) ? gdxBulletJNI.btBulletWorldImporter_convertAllObjects(swigCPtr, this, SWIGTYPE_p_bParse__btBulletFile.getCPtr(file)) : gdxBulletJNI.btBulletWorldImporter_convertAllObjectsSwigExplicitbtBulletWorldImporter(swigCPtr, this, SWIGTYPE_p_bParse__btBulletFile.getCPtr(file));
  }

  public boolean loadFileFromMemory(java.nio.ByteBuffer memoryBuffer, int len) {
    assert memoryBuffer.isDirect() : "Buffer must be allocated direct.";
    {
      return gdxBulletJNI.btBulletWorldImporter_loadFileFromMemory__SWIG_1(swigCPtr, this, memoryBuffer, len);
    }
  }

}
