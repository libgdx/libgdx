/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.10
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package com.badlogic.gdx.physics.bullet;

import com.badlogic.gdx.math.Vector3;
import com.badlogic.gdx.math.Quaternion;
import com.badlogic.gdx.math.Matrix3;
import com.badlogic.gdx.math.Matrix4;
import com.badlogic.gdx.graphics.Mesh;
import com.badlogic.gdx.graphics.g3d.model.MeshPart;

public class btSoftBody extends btCollisionObject {
	private long swigCPtr;
	
	protected btSoftBody(final String className, long cPtr, boolean cMemoryOwn) {
		super(className, gdxBulletJNI.btSoftBody_SWIGUpcast(cPtr), cMemoryOwn);
		swigCPtr = cPtr;
	}
	
	protected btSoftBody(long cPtr, boolean cMemoryOwn) {
		this("btSoftBody", cPtr, cMemoryOwn);
		construct();
	}
	
	@Override
	protected void reset(long cPtr, boolean cMemoryOwn) {
		if (!destroyed)
			destroy();
		super.reset(gdxBulletJNI.btSoftBody_SWIGUpcast(swigCPtr = cPtr), cMemoryOwn);
	}
	
	public static long getCPtr(btSoftBody obj) {
		return (obj == null) ? 0 : obj.swigCPtr;
	}

	@Override
	protected void finalize() throws Throwable {
		if (!destroyed)
			destroy();
		super.finalize();
	}

  @Override protected synchronized void delete() {
		if (swigCPtr != 0) {
			if (swigCMemOwn) {
				swigCMemOwn = false;
				gdxBulletJNI.delete_btSoftBody(swigCPtr);
			}
			swigCPtr = 0;
		}
		super.delete();
	}

  public void setCollisionDisabledObjects(SWIGTYPE_p_btAlignedObjectArrayT_btCollisionObject_const_p_t value) {
    gdxBulletJNI.btSoftBody_collisionDisabledObjects_set(swigCPtr, this, SWIGTYPE_p_btAlignedObjectArrayT_btCollisionObject_const_p_t.getCPtr(value));
  }

  public SWIGTYPE_p_btAlignedObjectArrayT_btCollisionObject_const_p_t getCollisionDisabledObjects() {
    long cPtr = gdxBulletJNI.btSoftBody_collisionDisabledObjects_get(swigCPtr, this);
    return (cPtr == 0) ? null : new SWIGTYPE_p_btAlignedObjectArrayT_btCollisionObject_const_p_t(cPtr, false);
  }

  public void setSoftBodySolver(btSoftBodySolver value) {
    gdxBulletJNI.btSoftBody_softBodySolver_set(swigCPtr, this, btSoftBodySolver.getCPtr(value), value);
  }

  public btSoftBodySolver getSoftBodySolver() {
    long cPtr = gdxBulletJNI.btSoftBody_softBodySolver_get(swigCPtr, this);
    return (cPtr == 0) ? null : new btSoftBodySolver(cPtr, false);
  }

  public void setCfg(SWIGTYPE_p_btSoftBody__Config value) {
    gdxBulletJNI.btSoftBody_cfg_set(swigCPtr, this, SWIGTYPE_p_btSoftBody__Config.getCPtr(value));
  }

  public SWIGTYPE_p_btSoftBody__Config getCfg() {
    long cPtr = gdxBulletJNI.btSoftBody_cfg_get(swigCPtr, this);
    return (cPtr == 0) ? null : new SWIGTYPE_p_btSoftBody__Config(cPtr, false);
  }

  public void setSst(SWIGTYPE_p_btSoftBody__SolverState value) {
    gdxBulletJNI.btSoftBody_sst_set(swigCPtr, this, SWIGTYPE_p_btSoftBody__SolverState.getCPtr(value));
  }

  public SWIGTYPE_p_btSoftBody__SolverState getSst() {
    long cPtr = gdxBulletJNI.btSoftBody_sst_get(swigCPtr, this);
    return (cPtr == 0) ? null : new SWIGTYPE_p_btSoftBody__SolverState(cPtr, false);
  }

  public void setPose(SWIGTYPE_p_btSoftBody__Pose value) {
    gdxBulletJNI.btSoftBody_pose_set(swigCPtr, this, SWIGTYPE_p_btSoftBody__Pose.getCPtr(value));
  }

  public SWIGTYPE_p_btSoftBody__Pose getPose() {
    long cPtr = gdxBulletJNI.btSoftBody_pose_get(swigCPtr, this);
    return (cPtr == 0) ? null : new SWIGTYPE_p_btSoftBody__Pose(cPtr, false);
  }

  public void setTag(SWIGTYPE_p_void value) {
    gdxBulletJNI.btSoftBody_tag_set(swigCPtr, this, SWIGTYPE_p_void.getCPtr(value));
  }

  public SWIGTYPE_p_void getTag() {
    long cPtr = gdxBulletJNI.btSoftBody_tag_get(swigCPtr, this);
    return (cPtr == 0) ? null : new SWIGTYPE_p_void(cPtr, false);
  }

  public void setWorldInfo(btSoftBodyWorldInfo value) {
    gdxBulletJNI.btSoftBody_worldInfo_set(swigCPtr, this, btSoftBodyWorldInfo.getCPtr(value), value);
  }

  public btSoftBodyWorldInfo getWorldInfo() {
    long cPtr = gdxBulletJNI.btSoftBody_worldInfo_get(swigCPtr, this);
    return (cPtr == 0) ? null : new btSoftBodyWorldInfo(cPtr, false);
  }

  public void setNotes(SWIGTYPE_p_btAlignedObjectArrayT_btSoftBody__Note_t value) {
    gdxBulletJNI.btSoftBody_notes_set(swigCPtr, this, SWIGTYPE_p_btAlignedObjectArrayT_btSoftBody__Note_t.getCPtr(value));
  }

  public SWIGTYPE_p_btAlignedObjectArrayT_btSoftBody__Note_t getNotes() {
    long cPtr = gdxBulletJNI.btSoftBody_notes_get(swigCPtr, this);
    return (cPtr == 0) ? null : new SWIGTYPE_p_btAlignedObjectArrayT_btSoftBody__Note_t(cPtr, false);
  }

  public void setNodes(SWIGTYPE_p_btAlignedObjectArrayT_Node_t value) {
    gdxBulletJNI.btSoftBody_nodes_set(swigCPtr, this, SWIGTYPE_p_btAlignedObjectArrayT_Node_t.getCPtr(value));
  }

  public SWIGTYPE_p_btAlignedObjectArrayT_Node_t getNodes() {
    long cPtr = gdxBulletJNI.btSoftBody_nodes_get(swigCPtr, this);
    return (cPtr == 0) ? null : new SWIGTYPE_p_btAlignedObjectArrayT_Node_t(cPtr, false);
  }

  public void setLinks(SWIGTYPE_p_btAlignedObjectArrayT_Link_t value) {
    gdxBulletJNI.btSoftBody_links_set(swigCPtr, this, SWIGTYPE_p_btAlignedObjectArrayT_Link_t.getCPtr(value));
  }

  public SWIGTYPE_p_btAlignedObjectArrayT_Link_t getLinks() {
    long cPtr = gdxBulletJNI.btSoftBody_links_get(swigCPtr, this);
    return (cPtr == 0) ? null : new SWIGTYPE_p_btAlignedObjectArrayT_Link_t(cPtr, false);
  }

  public void setFaces(SWIGTYPE_p_btAlignedObjectArrayT_Face_t value) {
    gdxBulletJNI.btSoftBody_faces_set(swigCPtr, this, SWIGTYPE_p_btAlignedObjectArrayT_Face_t.getCPtr(value));
  }

  public SWIGTYPE_p_btAlignedObjectArrayT_Face_t getFaces() {
    long cPtr = gdxBulletJNI.btSoftBody_faces_get(swigCPtr, this);
    return (cPtr == 0) ? null : new SWIGTYPE_p_btAlignedObjectArrayT_Face_t(cPtr, false);
  }

  public void setTetras(SWIGTYPE_p_btAlignedObjectArrayT_btSoftBody__Tetra_t value) {
    gdxBulletJNI.btSoftBody_tetras_set(swigCPtr, this, SWIGTYPE_p_btAlignedObjectArrayT_btSoftBody__Tetra_t.getCPtr(value));
  }

  public SWIGTYPE_p_btAlignedObjectArrayT_btSoftBody__Tetra_t getTetras() {
    long cPtr = gdxBulletJNI.btSoftBody_tetras_get(swigCPtr, this);
    return (cPtr == 0) ? null : new SWIGTYPE_p_btAlignedObjectArrayT_btSoftBody__Tetra_t(cPtr, false);
  }

  public void setAnchors(SWIGTYPE_p_btAlignedObjectArrayT_btSoftBody__Anchor_t value) {
    gdxBulletJNI.btSoftBody_anchors_set(swigCPtr, this, SWIGTYPE_p_btAlignedObjectArrayT_btSoftBody__Anchor_t.getCPtr(value));
  }

  public SWIGTYPE_p_btAlignedObjectArrayT_btSoftBody__Anchor_t getAnchors() {
    long cPtr = gdxBulletJNI.btSoftBody_anchors_get(swigCPtr, this);
    return (cPtr == 0) ? null : new SWIGTYPE_p_btAlignedObjectArrayT_btSoftBody__Anchor_t(cPtr, false);
  }

  public void setRcontacts(SWIGTYPE_p_btAlignedObjectArrayT_btSoftBody__RContact_t value) {
    gdxBulletJNI.btSoftBody_rcontacts_set(swigCPtr, this, SWIGTYPE_p_btAlignedObjectArrayT_btSoftBody__RContact_t.getCPtr(value));
  }

  public SWIGTYPE_p_btAlignedObjectArrayT_btSoftBody__RContact_t getRcontacts() {
    long cPtr = gdxBulletJNI.btSoftBody_rcontacts_get(swigCPtr, this);
    return (cPtr == 0) ? null : new SWIGTYPE_p_btAlignedObjectArrayT_btSoftBody__RContact_t(cPtr, false);
  }

  public void setScontacts(SWIGTYPE_p_btAlignedObjectArrayT_btSoftBody__SContact_t value) {
    gdxBulletJNI.btSoftBody_scontacts_set(swigCPtr, this, SWIGTYPE_p_btAlignedObjectArrayT_btSoftBody__SContact_t.getCPtr(value));
  }

  public SWIGTYPE_p_btAlignedObjectArrayT_btSoftBody__SContact_t getScontacts() {
    long cPtr = gdxBulletJNI.btSoftBody_scontacts_get(swigCPtr, this);
    return (cPtr == 0) ? null : new SWIGTYPE_p_btAlignedObjectArrayT_btSoftBody__SContact_t(cPtr, false);
  }

  public void setJoints(SWIGTYPE_p_btAlignedObjectArrayT_btSoftBody__Joint_p_t value) {
    gdxBulletJNI.btSoftBody_joints_set(swigCPtr, this, SWIGTYPE_p_btAlignedObjectArrayT_btSoftBody__Joint_p_t.getCPtr(value));
  }

  public SWIGTYPE_p_btAlignedObjectArrayT_btSoftBody__Joint_p_t getJoints() {
    long cPtr = gdxBulletJNI.btSoftBody_joints_get(swigCPtr, this);
    return (cPtr == 0) ? null : new SWIGTYPE_p_btAlignedObjectArrayT_btSoftBody__Joint_p_t(cPtr, false);
  }

  public void setMaterials(SWIGTYPE_p_btAlignedObjectArrayT_Material_p_t value) {
    gdxBulletJNI.btSoftBody_materials_set(swigCPtr, this, SWIGTYPE_p_btAlignedObjectArrayT_Material_p_t.getCPtr(value));
  }

  public SWIGTYPE_p_btAlignedObjectArrayT_Material_p_t getMaterials() {
    long cPtr = gdxBulletJNI.btSoftBody_materials_get(swigCPtr, this);
    return (cPtr == 0) ? null : new SWIGTYPE_p_btAlignedObjectArrayT_Material_p_t(cPtr, false);
  }

  public void setTimeacc(float value) {
    gdxBulletJNI.btSoftBody_timeacc_set(swigCPtr, this, value);
  }

  public float getTimeacc() {
    return gdxBulletJNI.btSoftBody_timeacc_get(swigCPtr, this);
  }

  public void setBounds(btVector3 value) {
    gdxBulletJNI.btSoftBody_bounds_set(swigCPtr, this, btVector3.getCPtr(value), value);
  }

  public btVector3 getBounds() {
    long cPtr = gdxBulletJNI.btSoftBody_bounds_get(swigCPtr, this);
    return (cPtr == 0) ? null : new btVector3(cPtr, false);
  }

  public void setBUpdateRtCst(boolean value) {
    gdxBulletJNI.btSoftBody_bUpdateRtCst_set(swigCPtr, this, value);
  }

  public boolean getBUpdateRtCst() {
    return gdxBulletJNI.btSoftBody_bUpdateRtCst_get(swigCPtr, this);
  }

  public void setNdbvt(btDbvt value) {
    gdxBulletJNI.btSoftBody_ndbvt_set(swigCPtr, this, btDbvt.getCPtr(value), value);
  }

  public btDbvt getNdbvt() {
    long cPtr = gdxBulletJNI.btSoftBody_ndbvt_get(swigCPtr, this);
    return (cPtr == 0) ? null : new btDbvt(cPtr, false);
  }

  public void setFdbvt(btDbvt value) {
    gdxBulletJNI.btSoftBody_fdbvt_set(swigCPtr, this, btDbvt.getCPtr(value), value);
  }

  public btDbvt getFdbvt() {
    long cPtr = gdxBulletJNI.btSoftBody_fdbvt_get(swigCPtr, this);
    return (cPtr == 0) ? null : new btDbvt(cPtr, false);
  }

  public void setCdbvt(btDbvt value) {
    gdxBulletJNI.btSoftBody_cdbvt_set(swigCPtr, this, btDbvt.getCPtr(value), value);
  }

  public btDbvt getCdbvt() {
    long cPtr = gdxBulletJNI.btSoftBody_cdbvt_get(swigCPtr, this);
    return (cPtr == 0) ? null : new btDbvt(cPtr, false);
  }

  public void setClusters(SWIGTYPE_p_btAlignedObjectArrayT_btSoftBody__Cluster_p_t value) {
    gdxBulletJNI.btSoftBody_clusters_set(swigCPtr, this, SWIGTYPE_p_btAlignedObjectArrayT_btSoftBody__Cluster_p_t.getCPtr(value));
  }

  public SWIGTYPE_p_btAlignedObjectArrayT_btSoftBody__Cluster_p_t getClusters() {
    long cPtr = gdxBulletJNI.btSoftBody_clusters_get(swigCPtr, this);
    return (cPtr == 0) ? null : new SWIGTYPE_p_btAlignedObjectArrayT_btSoftBody__Cluster_p_t(cPtr, false);
  }

  public void setClusterConnectivity(SWIGTYPE_p_btAlignedObjectArrayT_bool_t value) {
    gdxBulletJNI.btSoftBody_clusterConnectivity_set(swigCPtr, this, SWIGTYPE_p_btAlignedObjectArrayT_bool_t.getCPtr(value));
  }

  public SWIGTYPE_p_btAlignedObjectArrayT_bool_t getClusterConnectivity() {
    long cPtr = gdxBulletJNI.btSoftBody_clusterConnectivity_get(swigCPtr, this);
    return (cPtr == 0) ? null : new SWIGTYPE_p_btAlignedObjectArrayT_bool_t(cPtr, false);
  }

  public void setInitialWorldTransform(btTransform value) {
    gdxBulletJNI.btSoftBody_initialWorldTransform_set(swigCPtr, this, btTransform.getCPtr(value), value);
  }

  public btTransform getInitialWorldTransform() {
    long cPtr = gdxBulletJNI.btSoftBody_initialWorldTransform_get(swigCPtr, this);
    return (cPtr == 0) ? null : new btTransform(cPtr, false);
  }

  public void setWindVelocity(btVector3 value) {
    gdxBulletJNI.btSoftBody_windVelocity_set(swigCPtr, this, btVector3.getCPtr(value), value);
  }

  public btVector3 getWindVelocity() {
    long cPtr = gdxBulletJNI.btSoftBody_windVelocity_get(swigCPtr, this);
    return (cPtr == 0) ? null : new btVector3(cPtr, false);
  }

  public void setRestLengthScale(float value) {
    gdxBulletJNI.btSoftBody_restLengthScale_set(swigCPtr, this, value);
  }

  public float getRestLengthScale() {
    return gdxBulletJNI.btSoftBody_restLengthScale_get(swigCPtr, this);
  }

  static private long SwigConstructbtSoftBody(btSoftBodyWorldInfo worldInfo, int node_count, btVector3 x, java.nio.FloatBuffer m) {
    assert m.isDirect() : "Buffer must be allocated direct.";
    return gdxBulletJNI.new_btSoftBody__SWIG_0(btSoftBodyWorldInfo.getCPtr(worldInfo), worldInfo, node_count, btVector3.getCPtr(x), x, m);
  }

  public btSoftBody(btSoftBodyWorldInfo worldInfo, int node_count, btVector3 x, java.nio.FloatBuffer m) {
    this(btSoftBody.SwigConstructbtSoftBody(worldInfo, node_count, x, m), true);
  }

  public btSoftBody(btSoftBodyWorldInfo worldInfo) {
    this(gdxBulletJNI.new_btSoftBody__SWIG_1(btSoftBodyWorldInfo.getCPtr(worldInfo), worldInfo), true);
  }

  public void initDefaults() {
    gdxBulletJNI.btSoftBody_initDefaults(swigCPtr, this);
  }

  public void setUserIndexMapping(SWIGTYPE_p_btAlignedObjectArrayT_int_t value) {
    gdxBulletJNI.btSoftBody_userIndexMapping_set(swigCPtr, this, SWIGTYPE_p_btAlignedObjectArrayT_int_t.getCPtr(value));
  }

  public SWIGTYPE_p_btAlignedObjectArrayT_int_t getUserIndexMapping() {
    long cPtr = gdxBulletJNI.btSoftBody_userIndexMapping_get(swigCPtr, this);
    return (cPtr == 0) ? null : new SWIGTYPE_p_btAlignedObjectArrayT_int_t(cPtr, false);
  }

  public boolean checkLink(int node0, int node1) {
    return gdxBulletJNI.btSoftBody_checkLink__SWIG_0(swigCPtr, this, node0, node1);
  }

  public boolean checkLink(Node node0, Node node1) {
    return gdxBulletJNI.btSoftBody_checkLink__SWIG_1(swigCPtr, this, Node.getCPtr(node0), node0, Node.getCPtr(node1), node1);
  }

  public boolean checkFace(int node0, int node1, int node2) {
    return gdxBulletJNI.btSoftBody_checkFace(swigCPtr, this, node0, node1, node2);
  }

  public Material appendMaterial() {
    long cPtr = gdxBulletJNI.btSoftBody_appendMaterial(swigCPtr, this);
    return (cPtr == 0) ? null : new Material(cPtr, false);
  }

  public void appendNote(String text, Vector3 o, btVector4 c, Node n0, Node n1, Node n2, Node n3) {
    gdxBulletJNI.btSoftBody_appendNote__SWIG_0(swigCPtr, this, text, o, btVector4.getCPtr(c), c, Node.getCPtr(n0), n0, Node.getCPtr(n1), n1, Node.getCPtr(n2), n2, Node.getCPtr(n3), n3);
  }

  public void appendNote(String text, Vector3 o, btVector4 c, Node n0, Node n1, Node n2) {
    gdxBulletJNI.btSoftBody_appendNote__SWIG_1(swigCPtr, this, text, o, btVector4.getCPtr(c), c, Node.getCPtr(n0), n0, Node.getCPtr(n1), n1, Node.getCPtr(n2), n2);
  }

  public void appendNote(String text, Vector3 o, btVector4 c, Node n0, Node n1) {
    gdxBulletJNI.btSoftBody_appendNote__SWIG_2(swigCPtr, this, text, o, btVector4.getCPtr(c), c, Node.getCPtr(n0), n0, Node.getCPtr(n1), n1);
  }

  public void appendNote(String text, Vector3 o, btVector4 c, Node n0) {
    gdxBulletJNI.btSoftBody_appendNote__SWIG_3(swigCPtr, this, text, o, btVector4.getCPtr(c), c, Node.getCPtr(n0), n0);
  }

  public void appendNote(String text, Vector3 o, btVector4 c) {
    gdxBulletJNI.btSoftBody_appendNote__SWIG_4(swigCPtr, this, text, o, btVector4.getCPtr(c), c);
  }

  public void appendNote(String text, Vector3 o) {
    gdxBulletJNI.btSoftBody_appendNote__SWIG_5(swigCPtr, this, text, o);
  }

  public void appendNote(String text, Vector3 o, Node feature) {
    gdxBulletJNI.btSoftBody_appendNote__SWIG_6(swigCPtr, this, text, o, Node.getCPtr(feature), feature);
  }

  public void appendNote(String text, Vector3 o, Link feature) {
    gdxBulletJNI.btSoftBody_appendNote__SWIG_7(swigCPtr, this, text, o, Link.getCPtr(feature), feature);
  }

  public void appendNote(String text, Vector3 o, Face feature) {
    gdxBulletJNI.btSoftBody_appendNote__SWIG_8(swigCPtr, this, text, o, Face.getCPtr(feature), feature);
  }

  public void appendNode(Vector3 x, float m) {
    gdxBulletJNI.btSoftBody_appendNode(swigCPtr, this, x, m);
  }

  public void appendLink(int model, Material mat) {
    gdxBulletJNI.btSoftBody_appendLink__SWIG_0(swigCPtr, this, model, Material.getCPtr(mat), mat);
  }

  public void appendLink(int model) {
    gdxBulletJNI.btSoftBody_appendLink__SWIG_1(swigCPtr, this, model);
  }

  public void appendLink() {
    gdxBulletJNI.btSoftBody_appendLink__SWIG_2(swigCPtr, this);
  }

  public void appendLink(int node0, int node1, Material mat, boolean bcheckexist) {
    gdxBulletJNI.btSoftBody_appendLink__SWIG_3(swigCPtr, this, node0, node1, Material.getCPtr(mat), mat, bcheckexist);
  }

  public void appendLink(int node0, int node1, Material mat) {
    gdxBulletJNI.btSoftBody_appendLink__SWIG_4(swigCPtr, this, node0, node1, Material.getCPtr(mat), mat);
  }

  public void appendLink(int node0, int node1) {
    gdxBulletJNI.btSoftBody_appendLink__SWIG_5(swigCPtr, this, node0, node1);
  }

  public void appendLink(Node node0, Node node1, Material mat, boolean bcheckexist) {
    gdxBulletJNI.btSoftBody_appendLink__SWIG_6(swigCPtr, this, Node.getCPtr(node0), node0, Node.getCPtr(node1), node1, Material.getCPtr(mat), mat, bcheckexist);
  }

  public void appendLink(Node node0, Node node1, Material mat) {
    gdxBulletJNI.btSoftBody_appendLink__SWIG_7(swigCPtr, this, Node.getCPtr(node0), node0, Node.getCPtr(node1), node1, Material.getCPtr(mat), mat);
  }

  public void appendLink(Node node0, Node node1) {
    gdxBulletJNI.btSoftBody_appendLink__SWIG_8(swigCPtr, this, Node.getCPtr(node0), node0, Node.getCPtr(node1), node1);
  }

  public void appendFace(int model, Material mat) {
    gdxBulletJNI.btSoftBody_appendFace__SWIG_0(swigCPtr, this, model, Material.getCPtr(mat), mat);
  }

  public void appendFace(int model) {
    gdxBulletJNI.btSoftBody_appendFace__SWIG_1(swigCPtr, this, model);
  }

  public void appendFace() {
    gdxBulletJNI.btSoftBody_appendFace__SWIG_2(swigCPtr, this);
  }

  public void appendFace(int node0, int node1, int node2, Material mat) {
    gdxBulletJNI.btSoftBody_appendFace__SWIG_3(swigCPtr, this, node0, node1, node2, Material.getCPtr(mat), mat);
  }

  public void appendFace(int node0, int node1, int node2) {
    gdxBulletJNI.btSoftBody_appendFace__SWIG_4(swigCPtr, this, node0, node1, node2);
  }

  public void appendTetra(int model, Material mat) {
    gdxBulletJNI.btSoftBody_appendTetra__SWIG_0(swigCPtr, this, model, Material.getCPtr(mat), mat);
  }

  public void appendTetra(int node0, int node1, int node2, int node3, Material mat) {
    gdxBulletJNI.btSoftBody_appendTetra__SWIG_1(swigCPtr, this, node0, node1, node2, node3, Material.getCPtr(mat), mat);
  }

  public void appendTetra(int node0, int node1, int node2, int node3) {
    gdxBulletJNI.btSoftBody_appendTetra__SWIG_2(swigCPtr, this, node0, node1, node2, node3);
  }

  public void appendAnchor(int node, btRigidBody body, boolean disableCollisionBetweenLinkedBodies, float influence) {
    gdxBulletJNI.btSoftBody_appendAnchor__SWIG_0(swigCPtr, this, node, btRigidBody.getCPtr(body), body, disableCollisionBetweenLinkedBodies, influence);
  }

  public void appendAnchor(int node, btRigidBody body, boolean disableCollisionBetweenLinkedBodies) {
    gdxBulletJNI.btSoftBody_appendAnchor__SWIG_1(swigCPtr, this, node, btRigidBody.getCPtr(body), body, disableCollisionBetweenLinkedBodies);
  }

  public void appendAnchor(int node, btRigidBody body) {
    gdxBulletJNI.btSoftBody_appendAnchor__SWIG_2(swigCPtr, this, node, btRigidBody.getCPtr(body), body);
  }

  public void appendAnchor(int node, btRigidBody body, Vector3 localPivot, boolean disableCollisionBetweenLinkedBodies, float influence) {
    gdxBulletJNI.btSoftBody_appendAnchor__SWIG_3(swigCPtr, this, node, btRigidBody.getCPtr(body), body, localPivot, disableCollisionBetweenLinkedBodies, influence);
  }

  public void appendAnchor(int node, btRigidBody body, Vector3 localPivot, boolean disableCollisionBetweenLinkedBodies) {
    gdxBulletJNI.btSoftBody_appendAnchor__SWIG_4(swigCPtr, this, node, btRigidBody.getCPtr(body), body, localPivot, disableCollisionBetweenLinkedBodies);
  }

  public void appendAnchor(int node, btRigidBody body, Vector3 localPivot) {
    gdxBulletJNI.btSoftBody_appendAnchor__SWIG_5(swigCPtr, this, node, btRigidBody.getCPtr(body), body, localPivot);
  }

  public void appendLinearJoint(SWIGTYPE_p_btSoftBody__LJoint__Specs specs, SWIGTYPE_p_btSoftBody__Cluster body0, SWIGTYPE_p_btSoftBody__Body body1) {
    gdxBulletJNI.btSoftBody_appendLinearJoint__SWIG_0(swigCPtr, this, SWIGTYPE_p_btSoftBody__LJoint__Specs.getCPtr(specs), SWIGTYPE_p_btSoftBody__Cluster.getCPtr(body0), SWIGTYPE_p_btSoftBody__Body.getCPtr(body1));
  }

  public void appendLinearJoint(SWIGTYPE_p_btSoftBody__LJoint__Specs specs, SWIGTYPE_p_btSoftBody__Body body) {
    gdxBulletJNI.btSoftBody_appendLinearJoint__SWIG_1(swigCPtr, this, SWIGTYPE_p_btSoftBody__LJoint__Specs.getCPtr(specs), SWIGTYPE_p_btSoftBody__Body.getCPtr(body));
  }

  public void appendLinearJoint(SWIGTYPE_p_btSoftBody__LJoint__Specs specs) {
    gdxBulletJNI.btSoftBody_appendLinearJoint__SWIG_2(swigCPtr, this, SWIGTYPE_p_btSoftBody__LJoint__Specs.getCPtr(specs));
  }

  public void appendLinearJoint(SWIGTYPE_p_btSoftBody__LJoint__Specs specs, btSoftBody body) {
    gdxBulletJNI.btSoftBody_appendLinearJoint__SWIG_3(swigCPtr, this, SWIGTYPE_p_btSoftBody__LJoint__Specs.getCPtr(specs), btSoftBody.getCPtr(body), body);
  }

  public void appendAngularJoint(SWIGTYPE_p_btSoftBody__AJoint__Specs specs, SWIGTYPE_p_btSoftBody__Cluster body0, SWIGTYPE_p_btSoftBody__Body body1) {
    gdxBulletJNI.btSoftBody_appendAngularJoint__SWIG_0(swigCPtr, this, SWIGTYPE_p_btSoftBody__AJoint__Specs.getCPtr(specs), SWIGTYPE_p_btSoftBody__Cluster.getCPtr(body0), SWIGTYPE_p_btSoftBody__Body.getCPtr(body1));
  }

  public void appendAngularJoint(SWIGTYPE_p_btSoftBody__AJoint__Specs specs, SWIGTYPE_p_btSoftBody__Body body) {
    gdxBulletJNI.btSoftBody_appendAngularJoint__SWIG_1(swigCPtr, this, SWIGTYPE_p_btSoftBody__AJoint__Specs.getCPtr(specs), SWIGTYPE_p_btSoftBody__Body.getCPtr(body));
  }

  public void appendAngularJoint(SWIGTYPE_p_btSoftBody__AJoint__Specs specs) {
    gdxBulletJNI.btSoftBody_appendAngularJoint__SWIG_2(swigCPtr, this, SWIGTYPE_p_btSoftBody__AJoint__Specs.getCPtr(specs));
  }

  public void appendAngularJoint(SWIGTYPE_p_btSoftBody__AJoint__Specs specs, btSoftBody body) {
    gdxBulletJNI.btSoftBody_appendAngularJoint__SWIG_3(swigCPtr, this, SWIGTYPE_p_btSoftBody__AJoint__Specs.getCPtr(specs), btSoftBody.getCPtr(body), body);
  }

  public void addForce(Vector3 force) {
    gdxBulletJNI.btSoftBody_addForce__SWIG_0(swigCPtr, this, force);
  }

  public void addForce(Vector3 force, int node) {
    gdxBulletJNI.btSoftBody_addForce__SWIG_1(swigCPtr, this, force, node);
  }

  public void addAeroForceToNode(Vector3 windVelocity, int nodeIndex) {
    gdxBulletJNI.btSoftBody_addAeroForceToNode(swigCPtr, this, windVelocity, nodeIndex);
  }

  public void addAeroForceToFace(Vector3 windVelocity, int faceIndex) {
    gdxBulletJNI.btSoftBody_addAeroForceToFace(swigCPtr, this, windVelocity, faceIndex);
  }

  public void addVelocity(Vector3 velocity) {
    gdxBulletJNI.btSoftBody_addVelocity__SWIG_0(swigCPtr, this, velocity);
  }

  public void setVelocity(Vector3 velocity) {
    gdxBulletJNI.btSoftBody_setVelocity(swigCPtr, this, velocity);
  }

  public void addVelocity(Vector3 velocity, int node) {
    gdxBulletJNI.btSoftBody_addVelocity__SWIG_1(swigCPtr, this, velocity, node);
  }

  public void setMass(int node, float mass) {
    gdxBulletJNI.btSoftBody_setMass(swigCPtr, this, node, mass);
  }

  public float getMass(int node) {
    return gdxBulletJNI.btSoftBody_getMass(swigCPtr, this, node);
  }

  public float getTotalMass() {
    return gdxBulletJNI.btSoftBody_getTotalMass(swigCPtr, this);
  }

  public void setTotalMass(float mass, boolean fromfaces) {
    gdxBulletJNI.btSoftBody_setTotalMass__SWIG_0(swigCPtr, this, mass, fromfaces);
  }

  public void setTotalMass(float mass) {
    gdxBulletJNI.btSoftBody_setTotalMass__SWIG_1(swigCPtr, this, mass);
  }

  public void setTotalDensity(float density) {
    gdxBulletJNI.btSoftBody_setTotalDensity(swigCPtr, this, density);
  }

  public void setVolumeMass(float mass) {
    gdxBulletJNI.btSoftBody_setVolumeMass(swigCPtr, this, mass);
  }

  public void setVolumeDensity(float density) {
    gdxBulletJNI.btSoftBody_setVolumeDensity(swigCPtr, this, density);
  }

  public void transform(Matrix4 trs) {
    gdxBulletJNI.btSoftBody_transform(swigCPtr, this, trs);
  }

  public void translate(Vector3 trs) {
    gdxBulletJNI.btSoftBody_translate(swigCPtr, this, trs);
  }

  public void rotate(Quaternion rot) {
    gdxBulletJNI.btSoftBody_rotate(swigCPtr, this, rot);
  }

  public void scale(Vector3 scl) {
    gdxBulletJNI.btSoftBody_scale(swigCPtr, this, scl);
  }

  public void setPose(boolean bvolume, boolean bframe) {
    gdxBulletJNI.btSoftBody_setPose(swigCPtr, this, bvolume, bframe);
  }

  public void resetLinkRestLengths() {
    gdxBulletJNI.btSoftBody_resetLinkRestLengths(swigCPtr, this);
  }

  public float getVolume() {
    return gdxBulletJNI.btSoftBody_getVolume(swigCPtr, this);
  }

  public int clusterCount() {
    return gdxBulletJNI.btSoftBody_clusterCount(swigCPtr, this);
  }

  public static Vector3 clusterCom(SWIGTYPE_p_btSoftBody__Cluster cluster) {
	return gdxBulletJNI.btSoftBody_clusterCom__SWIG_0(SWIGTYPE_p_btSoftBody__Cluster.getCPtr(cluster));
}

  public Vector3 clusterCom(int cluster) {
	return gdxBulletJNI.btSoftBody_clusterCom__SWIG_1(swigCPtr, this, cluster);
}

  public static Vector3 clusterVelocity(SWIGTYPE_p_btSoftBody__Cluster cluster, Vector3 rpos) {
	return gdxBulletJNI.btSoftBody_clusterVelocity(SWIGTYPE_p_btSoftBody__Cluster.getCPtr(cluster), rpos);
}

  public static void clusterVImpulse(SWIGTYPE_p_btSoftBody__Cluster cluster, Vector3 rpos, Vector3 impulse) {
    gdxBulletJNI.btSoftBody_clusterVImpulse(SWIGTYPE_p_btSoftBody__Cluster.getCPtr(cluster), rpos, impulse);
  }

  public static void clusterDImpulse(SWIGTYPE_p_btSoftBody__Cluster cluster, Vector3 rpos, Vector3 impulse) {
    gdxBulletJNI.btSoftBody_clusterDImpulse(SWIGTYPE_p_btSoftBody__Cluster.getCPtr(cluster), rpos, impulse);
  }

  public static void clusterImpulse(SWIGTYPE_p_btSoftBody__Cluster cluster, Vector3 rpos, SWIGTYPE_p_btSoftBody__Impulse impulse) {
    gdxBulletJNI.btSoftBody_clusterImpulse(SWIGTYPE_p_btSoftBody__Cluster.getCPtr(cluster), rpos, SWIGTYPE_p_btSoftBody__Impulse.getCPtr(impulse));
  }

  public static void clusterVAImpulse(SWIGTYPE_p_btSoftBody__Cluster cluster, Vector3 impulse) {
    gdxBulletJNI.btSoftBody_clusterVAImpulse(SWIGTYPE_p_btSoftBody__Cluster.getCPtr(cluster), impulse);
  }

  public static void clusterDAImpulse(SWIGTYPE_p_btSoftBody__Cluster cluster, Vector3 impulse) {
    gdxBulletJNI.btSoftBody_clusterDAImpulse(SWIGTYPE_p_btSoftBody__Cluster.getCPtr(cluster), impulse);
  }

  public static void clusterAImpulse(SWIGTYPE_p_btSoftBody__Cluster cluster, SWIGTYPE_p_btSoftBody__Impulse impulse) {
    gdxBulletJNI.btSoftBody_clusterAImpulse(SWIGTYPE_p_btSoftBody__Cluster.getCPtr(cluster), SWIGTYPE_p_btSoftBody__Impulse.getCPtr(impulse));
  }

  public static void clusterDCImpulse(SWIGTYPE_p_btSoftBody__Cluster cluster, Vector3 impulse) {
    gdxBulletJNI.btSoftBody_clusterDCImpulse(SWIGTYPE_p_btSoftBody__Cluster.getCPtr(cluster), impulse);
  }

  public int generateBendingConstraints(int distance, Material mat) {
    return gdxBulletJNI.btSoftBody_generateBendingConstraints__SWIG_0(swigCPtr, this, distance, Material.getCPtr(mat), mat);
  }

  public int generateBendingConstraints(int distance) {
    return gdxBulletJNI.btSoftBody_generateBendingConstraints__SWIG_1(swigCPtr, this, distance);
  }

  public void randomizeConstraints() {
    gdxBulletJNI.btSoftBody_randomizeConstraints(swigCPtr, this);
  }

  public void releaseCluster(int index) {
    gdxBulletJNI.btSoftBody_releaseCluster(swigCPtr, this, index);
  }

  public void releaseClusters() {
    gdxBulletJNI.btSoftBody_releaseClusters(swigCPtr, this);
  }

  public int generateClusters(int k, int maxiterations) {
    return gdxBulletJNI.btSoftBody_generateClusters__SWIG_0(swigCPtr, this, k, maxiterations);
  }

  public int generateClusters(int k) {
    return gdxBulletJNI.btSoftBody_generateClusters__SWIG_1(swigCPtr, this, k);
  }

  public void refine(SWIGTYPE_p_btSoftBody__ImplicitFn ifn, float accurary, boolean cut) {
    gdxBulletJNI.btSoftBody_refine(swigCPtr, this, SWIGTYPE_p_btSoftBody__ImplicitFn.getCPtr(ifn), accurary, cut);
  }

  public boolean cutLink(int node0, int node1, float position) {
    return gdxBulletJNI.btSoftBody_cutLink__SWIG_0(swigCPtr, this, node0, node1, position);
  }

  public boolean cutLink(Node node0, Node node1, float position) {
    return gdxBulletJNI.btSoftBody_cutLink__SWIG_1(swigCPtr, this, Node.getCPtr(node0), node0, Node.getCPtr(node1), node1, position);
  }

  public boolean rayTest(Vector3 rayFrom, Vector3 rayTo, SWIGTYPE_p_btSoftBody__sRayCast results) {
    return gdxBulletJNI.btSoftBody_rayTest__SWIG_0(swigCPtr, this, rayFrom, rayTo, SWIGTYPE_p_btSoftBody__sRayCast.getCPtr(results));
  }

  public void setSolver(SWIGTYPE_p_btSoftBody__eSolverPresets___ preset) {
    gdxBulletJNI.btSoftBody_setSolver(swigCPtr, this, SWIGTYPE_p_btSoftBody__eSolverPresets___.getCPtr(preset));
  }

  public void predictMotion(float dt) {
    gdxBulletJNI.btSoftBody_predictMotion(swigCPtr, this, dt);
  }

  public void solveConstraints() {
    gdxBulletJNI.btSoftBody_solveConstraints(swigCPtr, this);
  }

  public void staticSolve(int iterations) {
    gdxBulletJNI.btSoftBody_staticSolve(swigCPtr, this, iterations);
  }

  public static void solveCommonConstraints(SWIGTYPE_p_p_btSoftBody bodies, int count, int iterations) {
    gdxBulletJNI.btSoftBody_solveCommonConstraints(SWIGTYPE_p_p_btSoftBody.getCPtr(bodies), count, iterations);
  }

  public static void solveClusters(SWIGTYPE_p_btAlignedObjectArrayT_btSoftBody_p_t bodies) {
    gdxBulletJNI.btSoftBody_solveClusters__SWIG_0(SWIGTYPE_p_btAlignedObjectArrayT_btSoftBody_p_t.getCPtr(bodies));
  }

  public void integrateMotion() {
    gdxBulletJNI.btSoftBody_integrateMotion(swigCPtr, this);
  }

  public void defaultCollisionHandler(btCollisionObjectWrapper pcoWrap) {
    gdxBulletJNI.btSoftBody_defaultCollisionHandler__SWIG_0(swigCPtr, this, btCollisionObjectWrapper.getCPtr(pcoWrap), pcoWrap);
  }

  public void defaultCollisionHandler(btSoftBody psb) {
    gdxBulletJNI.btSoftBody_defaultCollisionHandler__SWIG_1(swigCPtr, this, btSoftBody.getCPtr(psb), psb);
  }

  public void setWindVelocity(Vector3 velocity) {
    gdxBulletJNI.btSoftBody_setWindVelocity(swigCPtr, this, velocity);
  }

  public static btSoftBody upcast(btCollisionObject colObj) {
    long cPtr = gdxBulletJNI.btSoftBody_upcast__SWIG_0(btCollisionObject.getCPtr(colObj), colObj);
    return (cPtr == 0) ? null : new btSoftBody(cPtr, false);
  }

  public void getAabb(Vector3 aabbMin, Vector3 aabbMax) {
    gdxBulletJNI.btSoftBody_getAabb(swigCPtr, this, aabbMin, aabbMax);
  }

  public void pointersToIndices() {
    gdxBulletJNI.btSoftBody_pointersToIndices(swigCPtr, this);
  }

  public void indicesToPointers(java.nio.IntBuffer map) {
    assert map.isDirect() : "Buffer must be allocated direct.";
    {
      gdxBulletJNI.btSoftBody_indicesToPointers__SWIG_0(swigCPtr, this, map);
    }
  }

  public void indicesToPointers() {
    gdxBulletJNI.btSoftBody_indicesToPointers__SWIG_1(swigCPtr, this);
  }

  public int rayTest(Vector3 rayFrom, Vector3 rayTo, SWIGTYPE_p_float mint, SWIGTYPE_p_btSoftBody__eFeature___ feature, SWIGTYPE_p_int index, boolean bcountonly) {
    return gdxBulletJNI.btSoftBody_rayTest__SWIG_1(swigCPtr, this, rayFrom, rayTo, SWIGTYPE_p_float.getCPtr(mint), SWIGTYPE_p_btSoftBody__eFeature___.getCPtr(feature), SWIGTYPE_p_int.getCPtr(index), bcountonly);
  }

  public void initializeFaceTree() {
    gdxBulletJNI.btSoftBody_initializeFaceTree(swigCPtr, this);
  }

  public Vector3 evaluateCom() {
	return gdxBulletJNI.btSoftBody_evaluateCom(swigCPtr, this);
}

  public boolean checkContact(btCollisionObjectWrapper colObjWrap, Vector3 x, float margin, sCti cti) {
    return gdxBulletJNI.btSoftBody_checkContact(swigCPtr, this, btCollisionObjectWrapper.getCPtr(colObjWrap), colObjWrap, x, margin, sCti.getCPtr(cti), cti);
  }

  public void updateNormals() {
    gdxBulletJNI.btSoftBody_updateNormals(swigCPtr, this);
  }

  public void updateBounds() {
    gdxBulletJNI.btSoftBody_updateBounds(swigCPtr, this);
  }

  public void updatePose() {
    gdxBulletJNI.btSoftBody_updatePose(swigCPtr, this);
  }

  public void updateConstants() {
    gdxBulletJNI.btSoftBody_updateConstants(swigCPtr, this);
  }

  public void updateLinkConstants() {
    gdxBulletJNI.btSoftBody_updateLinkConstants(swigCPtr, this);
  }

  public void updateArea(boolean averageArea) {
    gdxBulletJNI.btSoftBody_updateArea__SWIG_0(swigCPtr, this, averageArea);
  }

  public void updateArea() {
    gdxBulletJNI.btSoftBody_updateArea__SWIG_1(swigCPtr, this);
  }

  public void initializeClusters() {
    gdxBulletJNI.btSoftBody_initializeClusters(swigCPtr, this);
  }

  public void updateClusters() {
    gdxBulletJNI.btSoftBody_updateClusters(swigCPtr, this);
  }

  public void cleanupClusters() {
    gdxBulletJNI.btSoftBody_cleanupClusters(swigCPtr, this);
  }

  public void prepareClusters(int iterations) {
    gdxBulletJNI.btSoftBody_prepareClusters(swigCPtr, this, iterations);
  }

  public void solveClusters(float sor) {
    gdxBulletJNI.btSoftBody_solveClusters__SWIG_1(swigCPtr, this, sor);
  }

  public void applyClusters(boolean drift) {
    gdxBulletJNI.btSoftBody_applyClusters(swigCPtr, this, drift);
  }

  public void dampClusters() {
    gdxBulletJNI.btSoftBody_dampClusters(swigCPtr, this);
  }

  public void applyForces() {
    gdxBulletJNI.btSoftBody_applyForces(swigCPtr, this);
  }

  public static void PSolve_Anchors(btSoftBody psb, float kst, float ti) {
    gdxBulletJNI.btSoftBody_PSolve_Anchors(btSoftBody.getCPtr(psb), psb, kst, ti);
  }

  public static void PSolve_RContacts(btSoftBody psb, float kst, float ti) {
    gdxBulletJNI.btSoftBody_PSolve_RContacts(btSoftBody.getCPtr(psb), psb, kst, ti);
  }

  public static void PSolve_SContacts(btSoftBody psb, float arg1, float ti) {
    gdxBulletJNI.btSoftBody_PSolve_SContacts(btSoftBody.getCPtr(psb), psb, arg1, ti);
  }

  public static void PSolve_Links(btSoftBody psb, float kst, float ti) {
    gdxBulletJNI.btSoftBody_PSolve_Links(btSoftBody.getCPtr(psb), psb, kst, ti);
  }

  public static void VSolve_Links(btSoftBody psb, float kst) {
    gdxBulletJNI.btSoftBody_VSolve_Links(btSoftBody.getCPtr(psb), psb, kst);
  }

  public static SWIGTYPE_p_f_p_btSoftBody_float_float__void getSolver(SWIGTYPE_p_btSoftBody__ePSolver___ solver) {
    long cPtr = gdxBulletJNI.btSoftBody_getSolver__SWIG_0(SWIGTYPE_p_btSoftBody__ePSolver___.getCPtr(solver));
    return (cPtr == 0) ? null : new SWIGTYPE_p_f_p_btSoftBody_float_float__void(cPtr, false);
  }

  public static SWIGTYPE_p_f_p_btSoftBody_float__void getSolver(SWIGTYPE_p_btSoftBody__eVSolver___ solver) {
    long cPtr = gdxBulletJNI.btSoftBody_getSolver__SWIG_1(SWIGTYPE_p_btSoftBody__eVSolver___.getCPtr(solver));
    return (cPtr == 0) ? null : new SWIGTYPE_p_f_p_btSoftBody_float__void(cPtr, false);
  }

  static private long SwigConstructbtSoftBody(btSoftBodyWorldInfo worldInfo, java.nio.FloatBuffer vertices, int vertexSize, int posOffset, int normalOffset, java.nio.ShortBuffer indices, int indexOffset, int numVertices, java.nio.ShortBuffer indexMap, int indexMapOffset) {
    assert vertices.isDirect() : "Buffer must be allocated direct.";
    assert indices.isDirect() : "Buffer must be allocated direct.";
    assert indexMap.isDirect() : "Buffer must be allocated direct.";
    return gdxBulletJNI.new_btSoftBody__SWIG_2(btSoftBodyWorldInfo.getCPtr(worldInfo), worldInfo, vertices, vertexSize, posOffset, normalOffset, indices, indexOffset, numVertices, indexMap, indexMapOffset);
  }

  public btSoftBody(btSoftBodyWorldInfo worldInfo, java.nio.FloatBuffer vertices, int vertexSize, int posOffset, int normalOffset, java.nio.ShortBuffer indices, int indexOffset, int numVertices, java.nio.ShortBuffer indexMap, int indexMapOffset) {
    this(btSoftBody.SwigConstructbtSoftBody(worldInfo, vertices, vertexSize, posOffset, normalOffset, indices, indexOffset, numVertices, indexMap, indexMapOffset), true);
  }

  public int getNodeCount() {
    return gdxBulletJNI.btSoftBody_getNodeCount(swigCPtr, this);
  }

  public Node getNode(int idx) {
    long cPtr = gdxBulletJNI.btSoftBody_getNode(swigCPtr, this, idx);
    return (cPtr == 0) ? null : new Node(cPtr, false);
  }

  public void getVertices(java.nio.FloatBuffer buffer, int vertexCount, int vertexSize, int posOffset) {
    assert buffer.isDirect() : "Buffer must be allocated direct.";
    {
      gdxBulletJNI.btSoftBody_getVertices__SWIG_0(swigCPtr, this, buffer, vertexCount, vertexSize, posOffset);
    }
  }

  public void getVertices(java.nio.FloatBuffer vertices, int vertexSize, int posOffset, java.nio.ShortBuffer indices, int indexOffset, int numVertices, java.nio.ShortBuffer indexMap, int indexMapOffset) {
    assert vertices.isDirect() : "Buffer must be allocated direct.";
    assert indices.isDirect() : "Buffer must be allocated direct.";
    assert indexMap.isDirect() : "Buffer must be allocated direct.";
    {
      gdxBulletJNI.btSoftBody_getVertices__SWIG_1(swigCPtr, this, vertices, vertexSize, posOffset, indices, indexOffset, numVertices, indexMap, indexMapOffset);
    }
  }

  public void getVertices(java.nio.FloatBuffer vertices, int vertexSize, int posOffset, int normalOffset, java.nio.ShortBuffer indices, int indexOffset, int numVertices, java.nio.ShortBuffer indexMap, int indexMapOffset) {
    assert vertices.isDirect() : "Buffer must be allocated direct.";
    assert indices.isDirect() : "Buffer must be allocated direct.";
    assert indexMap.isDirect() : "Buffer must be allocated direct.";
    {
      gdxBulletJNI.btSoftBody_getVertices__SWIG_2(swigCPtr, this, vertices, vertexSize, posOffset, normalOffset, indices, indexOffset, numVertices, indexMap, indexMapOffset);
    }
  }

  public int getFaceCount() {
    return gdxBulletJNI.btSoftBody_getFaceCount(swigCPtr, this);
  }

  public Face getFace(int idx) {
    long cPtr = gdxBulletJNI.btSoftBody_getFace(swigCPtr, this, idx);
    return (cPtr == 0) ? null : new Face(cPtr, false);
  }

  public void getIndices(java.nio.ShortBuffer buffer, int triangleCount) {
    assert buffer.isDirect() : "Buffer must be allocated direct.";
    {
      gdxBulletJNI.btSoftBody_getIndices(swigCPtr, this, buffer, triangleCount);
    }
  }

  public void setConfig_kVCF(float v) {
    gdxBulletJNI.btSoftBody_setConfig_kVCF(swigCPtr, this, v);
  }

  public void setConfig_kDP(float v) {
    gdxBulletJNI.btSoftBody_setConfig_kDP(swigCPtr, this, v);
  }

  public void setConfig_kDG(float v) {
    gdxBulletJNI.btSoftBody_setConfig_kDG(swigCPtr, this, v);
  }

  public void setConfig_kLF(float v) {
    gdxBulletJNI.btSoftBody_setConfig_kLF(swigCPtr, this, v);
  }

  public void setConfig_kPR(float v) {
    gdxBulletJNI.btSoftBody_setConfig_kPR(swigCPtr, this, v);
  }

  public void setConfig_kVC(float v) {
    gdxBulletJNI.btSoftBody_setConfig_kVC(swigCPtr, this, v);
  }

  public void setConfig_kDF(float v) {
    gdxBulletJNI.btSoftBody_setConfig_kDF(swigCPtr, this, v);
  }

  public void setConfig_kMT(float v) {
    gdxBulletJNI.btSoftBody_setConfig_kMT(swigCPtr, this, v);
  }

  public void setConfig_kCHR(float v) {
    gdxBulletJNI.btSoftBody_setConfig_kCHR(swigCPtr, this, v);
  }

  public void setConfig_kKHR(float v) {
    gdxBulletJNI.btSoftBody_setConfig_kKHR(swigCPtr, this, v);
  }

  public void setConfig_kSHR(float v) {
    gdxBulletJNI.btSoftBody_setConfig_kSHR(swigCPtr, this, v);
  }

  public void setConfig_kAHR(float v) {
    gdxBulletJNI.btSoftBody_setConfig_kAHR(swigCPtr, this, v);
  }

  public void setConfig_kSRHR_CL(float v) {
    gdxBulletJNI.btSoftBody_setConfig_kSRHR_CL(swigCPtr, this, v);
  }

  public void setConfig_kSKHR_CL(float v) {
    gdxBulletJNI.btSoftBody_setConfig_kSKHR_CL(swigCPtr, this, v);
  }

  public void setConfig_kSSHR_CL(float v) {
    gdxBulletJNI.btSoftBody_setConfig_kSSHR_CL(swigCPtr, this, v);
  }

  public void setConfig_kSR_SPLT_CL(float v) {
    gdxBulletJNI.btSoftBody_setConfig_kSR_SPLT_CL(swigCPtr, this, v);
  }

  public void setConfig_kSK_SPLT_CL(float v) {
    gdxBulletJNI.btSoftBody_setConfig_kSK_SPLT_CL(swigCPtr, this, v);
  }

  public void setConfig_kSS_SPLT_CL(float v) {
    gdxBulletJNI.btSoftBody_setConfig_kSS_SPLT_CL(swigCPtr, this, v);
  }

  public void setConfig_maxvolume(float v) {
    gdxBulletJNI.btSoftBody_setConfig_maxvolume(swigCPtr, this, v);
  }

  public void setConfig_timescale(float v) {
    gdxBulletJNI.btSoftBody_setConfig_timescale(swigCPtr, this, v);
  }

  public void setConfig_viterations(int v) {
    gdxBulletJNI.btSoftBody_setConfig_viterations(swigCPtr, this, v);
  }

  public void setConfig_piterations(int v) {
    gdxBulletJNI.btSoftBody_setConfig_piterations(swigCPtr, this, v);
  }

  public void setConfig_diterations(int v) {
    gdxBulletJNI.btSoftBody_setConfig_diterations(swigCPtr, this, v);
  }

  public void setConfig_citerations(int v) {
    gdxBulletJNI.btSoftBody_setConfig_citerations(swigCPtr, this, v);
  }

  public void setConfig_collisions(int v) {
    gdxBulletJNI.btSoftBody_setConfig_collisions(swigCPtr, this, v);
  }

}
