/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.10
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package com.badlogic.gdx.physics.bullet;

import com.badlogic.gdx.math.Vector3;
import com.badlogic.gdx.math.Quaternion;
import com.badlogic.gdx.math.Matrix3;
import com.badlogic.gdx.math.Matrix4;

public class btSoftBodyWorldInfo {
  private long swigCPtr;
  protected boolean swigCMemOwn;

  protected btSoftBodyWorldInfo(long cPtr, boolean cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }

  public static long getCPtr(btSoftBodyWorldInfo obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        gdxBulletJNI.delete_btSoftBodyWorldInfo(swigCPtr);
      }
      swigCPtr = 0;
    }
  }

  public void setAir_density(float value) {
    gdxBulletJNI.btSoftBodyWorldInfo_air_density_set(swigCPtr, this, value);
  }

  public float getAir_density() {
    return gdxBulletJNI.btSoftBodyWorldInfo_air_density_get(swigCPtr, this);
  }

  public void setWater_density(float value) {
    gdxBulletJNI.btSoftBodyWorldInfo_water_density_set(swigCPtr, this, value);
  }

  public float getWater_density() {
    return gdxBulletJNI.btSoftBodyWorldInfo_water_density_get(swigCPtr, this);
  }

  public void setWater_offset(float value) {
    gdxBulletJNI.btSoftBodyWorldInfo_water_offset_set(swigCPtr, this, value);
  }

  public float getWater_offset() {
    return gdxBulletJNI.btSoftBodyWorldInfo_water_offset_get(swigCPtr, this);
  }

  public void setWater_normal(btVector3 value) {
    gdxBulletJNI.btSoftBodyWorldInfo_water_normal_set(swigCPtr, this, btVector3.getCPtr(value), value);
  }

  public btVector3 getWater_normal() {
    long cPtr = gdxBulletJNI.btSoftBodyWorldInfo_water_normal_get(swigCPtr, this);
    return (cPtr == 0) ? null : new btVector3(cPtr, false);
  }

  public void setM_broadphase(btBroadphaseInterface value) {
    gdxBulletJNI.btSoftBodyWorldInfo_m_broadphase_set(swigCPtr, this, btBroadphaseInterface.getCPtr(value), value);
  }

  public btBroadphaseInterface getM_broadphase() {
    long cPtr = gdxBulletJNI.btSoftBodyWorldInfo_m_broadphase_get(swigCPtr, this);
    return (cPtr == 0) ? null : new btBroadphaseInterface(cPtr, false);
  }

  public void setM_dispatcher(btDispatcher value) {
    gdxBulletJNI.btSoftBodyWorldInfo_m_dispatcher_set(swigCPtr, this, btDispatcher.getCPtr(value), value);
  }

  public btDispatcher getM_dispatcher() {
    long cPtr = gdxBulletJNI.btSoftBodyWorldInfo_m_dispatcher_get(swigCPtr, this);
    return (cPtr == 0) ? null : new btDispatcher(cPtr, false);
  }

  public void setM_gravity(btVector3 value) {
    gdxBulletJNI.btSoftBodyWorldInfo_m_gravity_set(swigCPtr, this, btVector3.getCPtr(value), value);
  }

  public btVector3 getM_gravity() {
    long cPtr = gdxBulletJNI.btSoftBodyWorldInfo_m_gravity_get(swigCPtr, this);
    return (cPtr == 0) ? null : new btVector3(cPtr, false);
  }

  public void setM_sparsesdf(btSparseSdf3 value) {
    gdxBulletJNI.btSoftBodyWorldInfo_m_sparsesdf_set(swigCPtr, this, btSparseSdf3.getCPtr(value), value);
  }

  public btSparseSdf3 getM_sparsesdf() {
    long cPtr = gdxBulletJNI.btSoftBodyWorldInfo_m_sparsesdf_get(swigCPtr, this);
    return (cPtr == 0) ? null : new btSparseSdf3(cPtr, false);
  }

  public btSoftBodyWorldInfo() {
    this(gdxBulletJNI.new_btSoftBodyWorldInfo(), true);
  }

}
