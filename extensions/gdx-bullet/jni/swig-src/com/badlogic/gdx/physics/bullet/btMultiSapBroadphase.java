/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.10
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package com.badlogic.gdx.physics.bullet;

import com.badlogic.gdx.math.Vector3;
import com.badlogic.gdx.math.Quaternion;
import com.badlogic.gdx.math.Matrix3;
import com.badlogic.gdx.math.Matrix4;

public class btMultiSapBroadphase extends btBroadphaseInterface {
  private long swigCPtr;

  protected btMultiSapBroadphase(long cPtr, boolean cMemoryOwn) {
    super(gdxBulletJNI.btMultiSapBroadphase_SWIGUpcast(cPtr), cMemoryOwn);
    swigCPtr = cPtr;
  }

  public static long getCPtr(btMultiSapBroadphase obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        gdxBulletJNI.delete_btMultiSapBroadphase(swigCPtr);
      }
      swigCPtr = 0;
    }
    super.delete();
  }

  public SWIGTYPE_p_btAlignedObjectArrayT_btBroadphaseInterface_p_t getBroadphaseArray() {
    return new SWIGTYPE_p_btAlignedObjectArrayT_btBroadphaseInterface_p_t(gdxBulletJNI.btMultiSapBroadphase_getBroadphaseArray__SWIG_0(swigCPtr, this), false);
  }

  public void rayTest(Vector3 rayFrom, Vector3 rayTo, btBroadphaseRayCallback rayCallback, Vector3 aabbMin, Vector3 aabbMax) {
    gdxBulletJNI.btMultiSapBroadphase_rayTest__SWIG_0(swigCPtr, this, rayFrom, rayTo, btBroadphaseRayCallback.getCPtr(rayCallback), rayCallback, aabbMin, aabbMax);
  }

  public void rayTest(Vector3 rayFrom, Vector3 rayTo, btBroadphaseRayCallback rayCallback, Vector3 aabbMin) {
    gdxBulletJNI.btMultiSapBroadphase_rayTest__SWIG_1(swigCPtr, this, rayFrom, rayTo, btBroadphaseRayCallback.getCPtr(rayCallback), rayCallback, aabbMin);
  }

  public void rayTest(Vector3 rayFrom, Vector3 rayTo, btBroadphaseRayCallback rayCallback) {
    gdxBulletJNI.btMultiSapBroadphase_rayTest__SWIG_2(swigCPtr, this, rayFrom, rayTo, btBroadphaseRayCallback.getCPtr(rayCallback), rayCallback);
  }

  public void addToChildBroadphase(SWIGTYPE_p_btMultiSapBroadphase__btMultiSapProxy parentMultiSapProxy, btBroadphaseProxy childProxy, btBroadphaseInterface childBroadphase) {
    gdxBulletJNI.btMultiSapBroadphase_addToChildBroadphase(swigCPtr, this, SWIGTYPE_p_btMultiSapBroadphase__btMultiSapProxy.getCPtr(parentMultiSapProxy), btBroadphaseProxy.getCPtr(childProxy), childProxy, btBroadphaseInterface.getCPtr(childBroadphase), childBroadphase);
  }

  public boolean testAabbOverlap(btBroadphaseProxy proxy0, btBroadphaseProxy proxy1) {
    return gdxBulletJNI.btMultiSapBroadphase_testAabbOverlap(swigCPtr, this, btBroadphaseProxy.getCPtr(proxy0), proxy0, btBroadphaseProxy.getCPtr(proxy1), proxy1);
  }

  public btOverlappingPairCache getOverlappingPairCache() {
    long cPtr = gdxBulletJNI.btMultiSapBroadphase_getOverlappingPairCache__SWIG_0(swigCPtr, this);
    return (cPtr == 0) ? null : new btOverlappingPairCache(cPtr, false);
  }

  public void buildTree(Vector3 bvhAabbMin, Vector3 bvhAabbMax) {
    gdxBulletJNI.btMultiSapBroadphase_buildTree(swigCPtr, this, bvhAabbMin, bvhAabbMax);
  }

  public void quicksort(btBroadphasePairArray a, int lo, int hi) {
    gdxBulletJNI.btMultiSapBroadphase_quicksort(swigCPtr, this, btBroadphasePairArray.getCPtr(a), a, lo, hi);
  }

}
