/*******************************************************************************
 * Copyright 2011 See AUTHORS file.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 ******************************************************************************/

 /* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.10
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package com.badlogic.gdx.physics.bullet;

import com.badlogic.gdx.math.Vector3;
import com.badlogic.gdx.math.Quaternion;
import com.badlogic.gdx.math.Matrix3;
import com.badlogic.gdx.math.Matrix4;

public class btConvexPointCloudShape extends btPolyhedralConvexAabbCachingShape {
	private long swigCPtr;
	
	protected btConvexPointCloudShape(final String className, long cPtr, boolean cMemoryOwn) {
		super(className, gdxBulletJNI.btConvexPointCloudShape_SWIGUpcast(cPtr), cMemoryOwn);
		swigCPtr = cPtr;
	}
	
	protected btConvexPointCloudShape(long cPtr, boolean cMemoryOwn) {
		this("btConvexPointCloudShape", cPtr, cMemoryOwn);
		construct();
	}
	
	public static long getCPtr(btConvexPointCloudShape obj) {
		return (obj == null) ? 0 : obj.swigCPtr;
	}

	@Override
	protected void finalize() throws Throwable {
		if (!destroyed)
			destroy();
		super.finalize();
	}

  @Override protected synchronized void delete() {
		if (swigCPtr != 0) {
			if (swigCMemOwn) {
				swigCMemOwn = false;
				gdxBulletJNI.delete_btConvexPointCloudShape(swigCPtr);
			}
			swigCPtr = 0;
		}
		super.delete();
	}

  public btConvexPointCloudShape() {
    this(gdxBulletJNI.new_btConvexPointCloudShape__SWIG_0(), true);
  }

  public btConvexPointCloudShape(btVector3 points, int numPoints, Vector3 localScaling, boolean computeAabb) {
    this(gdxBulletJNI.new_btConvexPointCloudShape__SWIG_1(btVector3.getCPtr(points), points, numPoints, localScaling, computeAabb), true);
  }

  public btConvexPointCloudShape(btVector3 points, int numPoints, Vector3 localScaling) {
    this(gdxBulletJNI.new_btConvexPointCloudShape__SWIG_2(btVector3.getCPtr(points), points, numPoints, localScaling), true);
  }

  public void setPoints(btVector3 points, int numPoints, boolean computeAabb, Vector3 localScaling) {
    gdxBulletJNI.btConvexPointCloudShape_setPoints__SWIG_0(swigCPtr, this, btVector3.getCPtr(points), points, numPoints, computeAabb, localScaling);
  }

  public void setPoints(btVector3 points, int numPoints, boolean computeAabb) {
    gdxBulletJNI.btConvexPointCloudShape_setPoints__SWIG_1(swigCPtr, this, btVector3.getCPtr(points), points, numPoints, computeAabb);
  }

  public void setPoints(btVector3 points, int numPoints) {
    gdxBulletJNI.btConvexPointCloudShape_setPoints__SWIG_2(swigCPtr, this, btVector3.getCPtr(points), points, numPoints);
  }

  public btVector3 getUnscaledPoints() {
    long cPtr = gdxBulletJNI.btConvexPointCloudShape_getUnscaledPoints__SWIG_0(swigCPtr, this);
    return (cPtr == 0) ? null : new btVector3(cPtr, false);
  }

  public int getNumPoints() {
    return gdxBulletJNI.btConvexPointCloudShape_getNumPoints(swigCPtr, this);
  }

  public Vector3 getScaledPoint(int index) {
	return gdxBulletJNI.btConvexPointCloudShape_getScaledPoint(swigCPtr, this, index);
}

}
