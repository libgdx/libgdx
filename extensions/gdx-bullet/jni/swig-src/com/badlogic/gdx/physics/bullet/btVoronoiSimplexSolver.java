/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.10
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package com.badlogic.gdx.physics.bullet;

import com.badlogic.gdx.math.Vector3;
import com.badlogic.gdx.math.Quaternion;
import com.badlogic.gdx.math.Matrix3;
import com.badlogic.gdx.math.Matrix4;

public class btVoronoiSimplexSolver {
  private long swigCPtr;
  protected boolean swigCMemOwn;

  protected btVoronoiSimplexSolver(long cPtr, boolean cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }

  public static long getCPtr(btVoronoiSimplexSolver obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        gdxBulletJNI.delete_btVoronoiSimplexSolver(swigCPtr);
      }
      swigCPtr = 0;
    }
  }

  public void setM_numVertices(int value) {
    gdxBulletJNI.btVoronoiSimplexSolver_m_numVertices_set(swigCPtr, this, value);
  }

  public int getM_numVertices() {
    return gdxBulletJNI.btVoronoiSimplexSolver_m_numVertices_get(swigCPtr, this);
  }

  public void setM_simplexVectorW(btVector3 value) {
    gdxBulletJNI.btVoronoiSimplexSolver_m_simplexVectorW_set(swigCPtr, this, btVector3.getCPtr(value), value);
  }

  public btVector3 getM_simplexVectorW() {
    long cPtr = gdxBulletJNI.btVoronoiSimplexSolver_m_simplexVectorW_get(swigCPtr, this);
    return (cPtr == 0) ? null : new btVector3(cPtr, false);
  }

  public void setM_simplexPointsP(btVector3 value) {
    gdxBulletJNI.btVoronoiSimplexSolver_m_simplexPointsP_set(swigCPtr, this, btVector3.getCPtr(value), value);
  }

  public btVector3 getM_simplexPointsP() {
    long cPtr = gdxBulletJNI.btVoronoiSimplexSolver_m_simplexPointsP_get(swigCPtr, this);
    return (cPtr == 0) ? null : new btVector3(cPtr, false);
  }

  public void setM_simplexPointsQ(btVector3 value) {
    gdxBulletJNI.btVoronoiSimplexSolver_m_simplexPointsQ_set(swigCPtr, this, btVector3.getCPtr(value), value);
  }

  public btVector3 getM_simplexPointsQ() {
    long cPtr = gdxBulletJNI.btVoronoiSimplexSolver_m_simplexPointsQ_get(swigCPtr, this);
    return (cPtr == 0) ? null : new btVector3(cPtr, false);
  }

  public void setM_cachedP1(btVector3 value) {
    gdxBulletJNI.btVoronoiSimplexSolver_m_cachedP1_set(swigCPtr, this, btVector3.getCPtr(value), value);
  }

  public btVector3 getM_cachedP1() {
    long cPtr = gdxBulletJNI.btVoronoiSimplexSolver_m_cachedP1_get(swigCPtr, this);
    return (cPtr == 0) ? null : new btVector3(cPtr, false);
  }

  public void setM_cachedP2(btVector3 value) {
    gdxBulletJNI.btVoronoiSimplexSolver_m_cachedP2_set(swigCPtr, this, btVector3.getCPtr(value), value);
  }

  public btVector3 getM_cachedP2() {
    long cPtr = gdxBulletJNI.btVoronoiSimplexSolver_m_cachedP2_get(swigCPtr, this);
    return (cPtr == 0) ? null : new btVector3(cPtr, false);
  }

  public void setM_cachedV(btVector3 value) {
    gdxBulletJNI.btVoronoiSimplexSolver_m_cachedV_set(swigCPtr, this, btVector3.getCPtr(value), value);
  }

  public btVector3 getM_cachedV() {
    long cPtr = gdxBulletJNI.btVoronoiSimplexSolver_m_cachedV_get(swigCPtr, this);
    return (cPtr == 0) ? null : new btVector3(cPtr, false);
  }

  public void setM_lastW(btVector3 value) {
    gdxBulletJNI.btVoronoiSimplexSolver_m_lastW_set(swigCPtr, this, btVector3.getCPtr(value), value);
  }

  public btVector3 getM_lastW() {
    long cPtr = gdxBulletJNI.btVoronoiSimplexSolver_m_lastW_get(swigCPtr, this);
    return (cPtr == 0) ? null : new btVector3(cPtr, false);
  }

  public void setM_equalVertexThreshold(float value) {
    gdxBulletJNI.btVoronoiSimplexSolver_m_equalVertexThreshold_set(swigCPtr, this, value);
  }

  public float getM_equalVertexThreshold() {
    return gdxBulletJNI.btVoronoiSimplexSolver_m_equalVertexThreshold_get(swigCPtr, this);
  }

  public void setM_cachedValidClosest(boolean value) {
    gdxBulletJNI.btVoronoiSimplexSolver_m_cachedValidClosest_set(swigCPtr, this, value);
  }

  public boolean getM_cachedValidClosest() {
    return gdxBulletJNI.btVoronoiSimplexSolver_m_cachedValidClosest_get(swigCPtr, this);
  }

  public void setM_cachedBC(btSubSimplexClosestResult value) {
    gdxBulletJNI.btVoronoiSimplexSolver_m_cachedBC_set(swigCPtr, this, btSubSimplexClosestResult.getCPtr(value), value);
  }

  public btSubSimplexClosestResult getM_cachedBC() {
    long cPtr = gdxBulletJNI.btVoronoiSimplexSolver_m_cachedBC_get(swigCPtr, this);
    return (cPtr == 0) ? null : new btSubSimplexClosestResult(cPtr, false);
  }

  public void setM_needsUpdate(boolean value) {
    gdxBulletJNI.btVoronoiSimplexSolver_m_needsUpdate_set(swigCPtr, this, value);
  }

  public boolean getM_needsUpdate() {
    return gdxBulletJNI.btVoronoiSimplexSolver_m_needsUpdate_get(swigCPtr, this);
  }

  public void removeVertex(int index) {
    gdxBulletJNI.btVoronoiSimplexSolver_removeVertex(swigCPtr, this, index);
  }

  public void reduceVertices(btUsageBitfield usedVerts) {
    gdxBulletJNI.btVoronoiSimplexSolver_reduceVertices(swigCPtr, this, btUsageBitfield.getCPtr(usedVerts), usedVerts);
  }

  public boolean updateClosestVectorAndPoints() {
    return gdxBulletJNI.btVoronoiSimplexSolver_updateClosestVectorAndPoints(swigCPtr, this);
  }

  public boolean closestPtPointTetrahedron(Vector3 p, Vector3 a, Vector3 b, Vector3 c, Vector3 d, btSubSimplexClosestResult finalResult) {
    return gdxBulletJNI.btVoronoiSimplexSolver_closestPtPointTetrahedron(swigCPtr, this, p, a, b, c, d, btSubSimplexClosestResult.getCPtr(finalResult), finalResult);
  }

  public int pointOutsideOfPlane(Vector3 p, Vector3 a, Vector3 b, Vector3 c, Vector3 d) {
    return gdxBulletJNI.btVoronoiSimplexSolver_pointOutsideOfPlane(swigCPtr, this, p, a, b, c, d);
  }

  public boolean closestPtPointTriangle(Vector3 p, Vector3 a, Vector3 b, Vector3 c, btSubSimplexClosestResult result) {
    return gdxBulletJNI.btVoronoiSimplexSolver_closestPtPointTriangle(swigCPtr, this, p, a, b, c, btSubSimplexClosestResult.getCPtr(result), result);
  }

  public btVoronoiSimplexSolver() {
    this(gdxBulletJNI.new_btVoronoiSimplexSolver(), true);
  }

  public void reset() {
    gdxBulletJNI.btVoronoiSimplexSolver_reset(swigCPtr, this);
  }

  public void addVertex(Vector3 w, Vector3 p, Vector3 q) {
    gdxBulletJNI.btVoronoiSimplexSolver_addVertex(swigCPtr, this, w, p, q);
  }

  public void setEqualVertexThreshold(float threshold) {
    gdxBulletJNI.btVoronoiSimplexSolver_setEqualVertexThreshold(swigCPtr, this, threshold);
  }

  public float getEqualVertexThreshold() {
    return gdxBulletJNI.btVoronoiSimplexSolver_getEqualVertexThreshold(swigCPtr, this);
  }

  public boolean closest(Vector3 v) {
    return gdxBulletJNI.btVoronoiSimplexSolver_closest(swigCPtr, this, v);
  }

  public float maxVertex() {
    return gdxBulletJNI.btVoronoiSimplexSolver_maxVertex(swigCPtr, this);
  }

  public boolean fullSimplex() {
    return gdxBulletJNI.btVoronoiSimplexSolver_fullSimplex(swigCPtr, this);
  }

  public int getSimplex(btVector3 pBuf, btVector3 qBuf, btVector3 yBuf) {
    return gdxBulletJNI.btVoronoiSimplexSolver_getSimplex(swigCPtr, this, btVector3.getCPtr(pBuf), pBuf, btVector3.getCPtr(qBuf), qBuf, btVector3.getCPtr(yBuf), yBuf);
  }

  public boolean inSimplex(Vector3 w) {
    return gdxBulletJNI.btVoronoiSimplexSolver_inSimplex(swigCPtr, this, w);
  }

  public void backup_closest(Vector3 v) {
    gdxBulletJNI.btVoronoiSimplexSolver_backup_closest(swigCPtr, this, v);
  }

  public boolean emptySimplex() {
    return gdxBulletJNI.btVoronoiSimplexSolver_emptySimplex(swigCPtr, this);
  }

  public void compute_points(Vector3 p1, Vector3 p2) {
    gdxBulletJNI.btVoronoiSimplexSolver_compute_points(swigCPtr, this, p1, p2);
  }

  public int numVertices() {
    return gdxBulletJNI.btVoronoiSimplexSolver_numVertices(swigCPtr, this);
  }

}
