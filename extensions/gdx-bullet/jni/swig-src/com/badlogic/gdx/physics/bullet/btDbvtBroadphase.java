/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.10
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package com.badlogic.gdx.physics.bullet;

import com.badlogic.gdx.math.Vector3;
import com.badlogic.gdx.math.Quaternion;
import com.badlogic.gdx.math.Matrix3;
import com.badlogic.gdx.math.Matrix4;

public class btDbvtBroadphase extends btBroadphaseInterface {
  private long swigCPtr;

  protected btDbvtBroadphase(long cPtr, boolean cMemoryOwn) {
    super(gdxBulletJNI.btDbvtBroadphase_SWIGUpcast(cPtr), cMemoryOwn);
    swigCPtr = cPtr;
  }

  public static long getCPtr(btDbvtBroadphase obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        gdxBulletJNI.delete_btDbvtBroadphase(swigCPtr);
      }
      swigCPtr = 0;
    }
    super.delete();
  }

  public void setM_sets(btDbvt value) {
    gdxBulletJNI.btDbvtBroadphase_m_sets_set(swigCPtr, this, btDbvt.getCPtr(value), value);
  }

  public btDbvt getM_sets() {
    long cPtr = gdxBulletJNI.btDbvtBroadphase_m_sets_get(swigCPtr, this);
    return (cPtr == 0) ? null : new btDbvt(cPtr, false);
  }

  public void setM_stageRoots(SWIGTYPE_p_p_btDbvtProxy value) {
    gdxBulletJNI.btDbvtBroadphase_m_stageRoots_set(swigCPtr, this, SWIGTYPE_p_p_btDbvtProxy.getCPtr(value));
  }

  public SWIGTYPE_p_p_btDbvtProxy getM_stageRoots() {
    long cPtr = gdxBulletJNI.btDbvtBroadphase_m_stageRoots_get(swigCPtr, this);
    return (cPtr == 0) ? null : new SWIGTYPE_p_p_btDbvtProxy(cPtr, false);
  }

  public void setM_paircache(btOverlappingPairCache value) {
    gdxBulletJNI.btDbvtBroadphase_m_paircache_set(swigCPtr, this, btOverlappingPairCache.getCPtr(value), value);
  }

  public btOverlappingPairCache getM_paircache() {
    long cPtr = gdxBulletJNI.btDbvtBroadphase_m_paircache_get(swigCPtr, this);
    return (cPtr == 0) ? null : new btOverlappingPairCache(cPtr, false);
  }

  public void setM_prediction(float value) {
    gdxBulletJNI.btDbvtBroadphase_m_prediction_set(swigCPtr, this, value);
  }

  public float getM_prediction() {
    return gdxBulletJNI.btDbvtBroadphase_m_prediction_get(swigCPtr, this);
  }

  public void setM_stageCurrent(int value) {
    gdxBulletJNI.btDbvtBroadphase_m_stageCurrent_set(swigCPtr, this, value);
  }

  public int getM_stageCurrent() {
    return gdxBulletJNI.btDbvtBroadphase_m_stageCurrent_get(swigCPtr, this);
  }

  public void setM_fupdates(int value) {
    gdxBulletJNI.btDbvtBroadphase_m_fupdates_set(swigCPtr, this, value);
  }

  public int getM_fupdates() {
    return gdxBulletJNI.btDbvtBroadphase_m_fupdates_get(swigCPtr, this);
  }

  public void setM_dupdates(int value) {
    gdxBulletJNI.btDbvtBroadphase_m_dupdates_set(swigCPtr, this, value);
  }

  public int getM_dupdates() {
    return gdxBulletJNI.btDbvtBroadphase_m_dupdates_get(swigCPtr, this);
  }

  public void setM_cupdates(int value) {
    gdxBulletJNI.btDbvtBroadphase_m_cupdates_set(swigCPtr, this, value);
  }

  public int getM_cupdates() {
    return gdxBulletJNI.btDbvtBroadphase_m_cupdates_get(swigCPtr, this);
  }

  public void setM_newpairs(int value) {
    gdxBulletJNI.btDbvtBroadphase_m_newpairs_set(swigCPtr, this, value);
  }

  public int getM_newpairs() {
    return gdxBulletJNI.btDbvtBroadphase_m_newpairs_get(swigCPtr, this);
  }

  public void setM_fixedleft(int value) {
    gdxBulletJNI.btDbvtBroadphase_m_fixedleft_set(swigCPtr, this, value);
  }

  public int getM_fixedleft() {
    return gdxBulletJNI.btDbvtBroadphase_m_fixedleft_get(swigCPtr, this);
  }

  public void setM_updates_call(long value) {
    gdxBulletJNI.btDbvtBroadphase_m_updates_call_set(swigCPtr, this, value);
  }

  public long getM_updates_call() {
    return gdxBulletJNI.btDbvtBroadphase_m_updates_call_get(swigCPtr, this);
  }

  public void setM_updates_done(long value) {
    gdxBulletJNI.btDbvtBroadphase_m_updates_done_set(swigCPtr, this, value);
  }

  public long getM_updates_done() {
    return gdxBulletJNI.btDbvtBroadphase_m_updates_done_get(swigCPtr, this);
  }

  public void setM_updates_ratio(float value) {
    gdxBulletJNI.btDbvtBroadphase_m_updates_ratio_set(swigCPtr, this, value);
  }

  public float getM_updates_ratio() {
    return gdxBulletJNI.btDbvtBroadphase_m_updates_ratio_get(swigCPtr, this);
  }

  public void setM_pid(int value) {
    gdxBulletJNI.btDbvtBroadphase_m_pid_set(swigCPtr, this, value);
  }

  public int getM_pid() {
    return gdxBulletJNI.btDbvtBroadphase_m_pid_get(swigCPtr, this);
  }

  public void setM_cid(int value) {
    gdxBulletJNI.btDbvtBroadphase_m_cid_set(swigCPtr, this, value);
  }

  public int getM_cid() {
    return gdxBulletJNI.btDbvtBroadphase_m_cid_get(swigCPtr, this);
  }

  public void setM_gid(int value) {
    gdxBulletJNI.btDbvtBroadphase_m_gid_set(swigCPtr, this, value);
  }

  public int getM_gid() {
    return gdxBulletJNI.btDbvtBroadphase_m_gid_get(swigCPtr, this);
  }

  public void setM_releasepaircache(boolean value) {
    gdxBulletJNI.btDbvtBroadphase_m_releasepaircache_set(swigCPtr, this, value);
  }

  public boolean getM_releasepaircache() {
    return gdxBulletJNI.btDbvtBroadphase_m_releasepaircache_get(swigCPtr, this);
  }

  public void setM_deferedcollide(boolean value) {
    gdxBulletJNI.btDbvtBroadphase_m_deferedcollide_set(swigCPtr, this, value);
  }

  public boolean getM_deferedcollide() {
    return gdxBulletJNI.btDbvtBroadphase_m_deferedcollide_get(swigCPtr, this);
  }

  public void setM_needcleanup(boolean value) {
    gdxBulletJNI.btDbvtBroadphase_m_needcleanup_set(swigCPtr, this, value);
  }

  public boolean getM_needcleanup() {
    return gdxBulletJNI.btDbvtBroadphase_m_needcleanup_get(swigCPtr, this);
  }

  public btDbvtBroadphase(btOverlappingPairCache paircache) {
    this(gdxBulletJNI.new_btDbvtBroadphase__SWIG_0(btOverlappingPairCache.getCPtr(paircache), paircache), true);
  }

  public btDbvtBroadphase() {
    this(gdxBulletJNI.new_btDbvtBroadphase__SWIG_1(), true);
  }

  public void collide(btDispatcher dispatcher) {
    gdxBulletJNI.btDbvtBroadphase_collide(swigCPtr, this, btDispatcher.getCPtr(dispatcher), dispatcher);
  }

  public void optimize() {
    gdxBulletJNI.btDbvtBroadphase_optimize(swigCPtr, this);
  }

  public void rayTest(Vector3 rayFrom, Vector3 rayTo, btBroadphaseRayCallback rayCallback, Vector3 aabbMin, Vector3 aabbMax) {
    gdxBulletJNI.btDbvtBroadphase_rayTest__SWIG_0(swigCPtr, this, rayFrom, rayTo, btBroadphaseRayCallback.getCPtr(rayCallback), rayCallback, aabbMin, aabbMax);
  }

  public void rayTest(Vector3 rayFrom, Vector3 rayTo, btBroadphaseRayCallback rayCallback, Vector3 aabbMin) {
    gdxBulletJNI.btDbvtBroadphase_rayTest__SWIG_1(swigCPtr, this, rayFrom, rayTo, btBroadphaseRayCallback.getCPtr(rayCallback), rayCallback, aabbMin);
  }

  public void rayTest(Vector3 rayFrom, Vector3 rayTo, btBroadphaseRayCallback rayCallback) {
    gdxBulletJNI.btDbvtBroadphase_rayTest__SWIG_2(swigCPtr, this, rayFrom, rayTo, btBroadphaseRayCallback.getCPtr(rayCallback), rayCallback);
  }

  public btOverlappingPairCache getOverlappingPairCache() {
    long cPtr = gdxBulletJNI.btDbvtBroadphase_getOverlappingPairCache__SWIG_0(swigCPtr, this);
    return (cPtr == 0) ? null : new btOverlappingPairCache(cPtr, false);
  }

  public void performDeferredRemoval(btDispatcher dispatcher) {
    gdxBulletJNI.btDbvtBroadphase_performDeferredRemoval(swigCPtr, this, btDispatcher.getCPtr(dispatcher), dispatcher);
  }

  public void setVelocityPrediction(float prediction) {
    gdxBulletJNI.btDbvtBroadphase_setVelocityPrediction(swigCPtr, this, prediction);
  }

  public float getVelocityPrediction() {
    return gdxBulletJNI.btDbvtBroadphase_getVelocityPrediction(swigCPtr, this);
  }

  public void setAabbForceUpdate(btBroadphaseProxy absproxy, Vector3 aabbMin, Vector3 aabbMax, btDispatcher arg3) {
    gdxBulletJNI.btDbvtBroadphase_setAabbForceUpdate(swigCPtr, this, btBroadphaseProxy.getCPtr(absproxy), absproxy, aabbMin, aabbMax, btDispatcher.getCPtr(arg3), arg3);
  }

  public static void benchmark(btBroadphaseInterface arg0) {
    gdxBulletJNI.btDbvtBroadphase_benchmark(btBroadphaseInterface.getCPtr(arg0), arg0);
  }

  public final static int DYNAMIC_SET = 0;
  public final static int FIXED_SET = 1;
  public final static int STAGECOUNT = 2;

}
