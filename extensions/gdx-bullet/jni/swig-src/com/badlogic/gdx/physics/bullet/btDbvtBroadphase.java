/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.10
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package com.badlogic.gdx.physics.bullet;

import com.badlogic.gdx.math.Vector3;
import com.badlogic.gdx.math.Quaternion;
import com.badlogic.gdx.math.Matrix3;
import com.badlogic.gdx.math.Matrix4;

public class btDbvtBroadphase extends btBroadphaseInterface {
	private long swigCPtr;
	
	protected btDbvtBroadphase(final String className, long cPtr, boolean cMemoryOwn) {
		super(className, gdxBulletJNI.btDbvtBroadphase_SWIGUpcast(cPtr), cMemoryOwn);
		swigCPtr = cPtr;
	}
	
	protected btDbvtBroadphase(long cPtr, boolean cMemoryOwn) {
		this("btDbvtBroadphase", cPtr, cMemoryOwn);
		construct();
	}
	
	@Override
	protected void reset(long cPtr, boolean cMemoryOwn) {
		if (!destroyed)
			destroy();
		super.reset(gdxBulletJNI.btDbvtBroadphase_SWIGUpcast(swigCPtr = cPtr), cMemoryOwn);
	}
	
	public static long getCPtr(btDbvtBroadphase obj) {
		return (obj == null) ? 0 : obj.swigCPtr;
	}

	@Override
	protected void finalize() throws Throwable {
		if (!destroyed)
			destroy();
		super.finalize();
	}

  @Override protected synchronized void delete() {
		if (swigCPtr != 0) {
			if (swigCMemOwn) {
				swigCMemOwn = false;
				gdxBulletJNI.delete_btDbvtBroadphase(swigCPtr);
			}
			swigCPtr = 0;
		}
		super.delete();
	}

  public void setSets(btDbvt value) {
    gdxBulletJNI.btDbvtBroadphase_sets_set(swigCPtr, this, btDbvt.getCPtr(value), value);
  }

  public btDbvt getSets() {
    long cPtr = gdxBulletJNI.btDbvtBroadphase_sets_get(swigCPtr, this);
    return (cPtr == 0) ? null : new btDbvt(cPtr, false);
  }

  public void setStageRoots(SWIGTYPE_p_p_btDbvtProxy value) {
    gdxBulletJNI.btDbvtBroadphase_stageRoots_set(swigCPtr, this, SWIGTYPE_p_p_btDbvtProxy.getCPtr(value));
  }

  public SWIGTYPE_p_p_btDbvtProxy getStageRoots() {
    long cPtr = gdxBulletJNI.btDbvtBroadphase_stageRoots_get(swigCPtr, this);
    return (cPtr == 0) ? null : new SWIGTYPE_p_p_btDbvtProxy(cPtr, false);
  }

  public void setPaircache(btOverlappingPairCache value) {
    gdxBulletJNI.btDbvtBroadphase_paircache_set(swigCPtr, this, btOverlappingPairCache.getCPtr(value), value);
  }

  public btOverlappingPairCache getPaircache() {
    long cPtr = gdxBulletJNI.btDbvtBroadphase_paircache_get(swigCPtr, this);
    return (cPtr == 0) ? null : new btOverlappingPairCache(cPtr, false);
  }

  public void setPrediction(float value) {
    gdxBulletJNI.btDbvtBroadphase_prediction_set(swigCPtr, this, value);
  }

  public float getPrediction() {
    return gdxBulletJNI.btDbvtBroadphase_prediction_get(swigCPtr, this);
  }

  public void setStageCurrent(int value) {
    gdxBulletJNI.btDbvtBroadphase_stageCurrent_set(swigCPtr, this, value);
  }

  public int getStageCurrent() {
    return gdxBulletJNI.btDbvtBroadphase_stageCurrent_get(swigCPtr, this);
  }

  public void setFupdates(int value) {
    gdxBulletJNI.btDbvtBroadphase_fupdates_set(swigCPtr, this, value);
  }

  public int getFupdates() {
    return gdxBulletJNI.btDbvtBroadphase_fupdates_get(swigCPtr, this);
  }

  public void setDupdates(int value) {
    gdxBulletJNI.btDbvtBroadphase_dupdates_set(swigCPtr, this, value);
  }

  public int getDupdates() {
    return gdxBulletJNI.btDbvtBroadphase_dupdates_get(swigCPtr, this);
  }

  public void setCupdates(int value) {
    gdxBulletJNI.btDbvtBroadphase_cupdates_set(swigCPtr, this, value);
  }

  public int getCupdates() {
    return gdxBulletJNI.btDbvtBroadphase_cupdates_get(swigCPtr, this);
  }

  public void setNewpairs(int value) {
    gdxBulletJNI.btDbvtBroadphase_newpairs_set(swigCPtr, this, value);
  }

  public int getNewpairs() {
    return gdxBulletJNI.btDbvtBroadphase_newpairs_get(swigCPtr, this);
  }

  public void setFixedleft(int value) {
    gdxBulletJNI.btDbvtBroadphase_fixedleft_set(swigCPtr, this, value);
  }

  public int getFixedleft() {
    return gdxBulletJNI.btDbvtBroadphase_fixedleft_get(swigCPtr, this);
  }

  public void setUpdates_call(long value) {
    gdxBulletJNI.btDbvtBroadphase_updates_call_set(swigCPtr, this, value);
  }

  public long getUpdates_call() {
    return gdxBulletJNI.btDbvtBroadphase_updates_call_get(swigCPtr, this);
  }

  public void setUpdates_done(long value) {
    gdxBulletJNI.btDbvtBroadphase_updates_done_set(swigCPtr, this, value);
  }

  public long getUpdates_done() {
    return gdxBulletJNI.btDbvtBroadphase_updates_done_get(swigCPtr, this);
  }

  public void setUpdates_ratio(float value) {
    gdxBulletJNI.btDbvtBroadphase_updates_ratio_set(swigCPtr, this, value);
  }

  public float getUpdates_ratio() {
    return gdxBulletJNI.btDbvtBroadphase_updates_ratio_get(swigCPtr, this);
  }

  public void setPid(int value) {
    gdxBulletJNI.btDbvtBroadphase_pid_set(swigCPtr, this, value);
  }

  public int getPid() {
    return gdxBulletJNI.btDbvtBroadphase_pid_get(swigCPtr, this);
  }

  public void setCid(int value) {
    gdxBulletJNI.btDbvtBroadphase_cid_set(swigCPtr, this, value);
  }

  public int getCid() {
    return gdxBulletJNI.btDbvtBroadphase_cid_get(swigCPtr, this);
  }

  public void setGid(int value) {
    gdxBulletJNI.btDbvtBroadphase_gid_set(swigCPtr, this, value);
  }

  public int getGid() {
    return gdxBulletJNI.btDbvtBroadphase_gid_get(swigCPtr, this);
  }

  public void setReleasepaircache(boolean value) {
    gdxBulletJNI.btDbvtBroadphase_releasepaircache_set(swigCPtr, this, value);
  }

  public boolean getReleasepaircache() {
    return gdxBulletJNI.btDbvtBroadphase_releasepaircache_get(swigCPtr, this);
  }

  public void setDeferedcollide(boolean value) {
    gdxBulletJNI.btDbvtBroadphase_deferedcollide_set(swigCPtr, this, value);
  }

  public boolean getDeferedcollide() {
    return gdxBulletJNI.btDbvtBroadphase_deferedcollide_get(swigCPtr, this);
  }

  public void setNeedcleanup(boolean value) {
    gdxBulletJNI.btDbvtBroadphase_needcleanup_set(swigCPtr, this, value);
  }

  public boolean getNeedcleanup() {
    return gdxBulletJNI.btDbvtBroadphase_needcleanup_get(swigCPtr, this);
  }

  public btDbvtBroadphase(btOverlappingPairCache paircache) {
    this(gdxBulletJNI.new_btDbvtBroadphase__SWIG_0(btOverlappingPairCache.getCPtr(paircache), paircache), true);
  }

  public btDbvtBroadphase() {
    this(gdxBulletJNI.new_btDbvtBroadphase__SWIG_1(), true);
  }

  public void collide(btDispatcher dispatcher) {
    gdxBulletJNI.btDbvtBroadphase_collide(swigCPtr, this, btDispatcher.getCPtr(dispatcher), dispatcher);
  }

  public void optimize() {
    gdxBulletJNI.btDbvtBroadphase_optimize(swigCPtr, this);
  }

  public void rayTest(Vector3 rayFrom, Vector3 rayTo, btBroadphaseRayCallback rayCallback, Vector3 aabbMin, Vector3 aabbMax) {
    gdxBulletJNI.btDbvtBroadphase_rayTest__SWIG_0(swigCPtr, this, rayFrom, rayTo, btBroadphaseRayCallback.getCPtr(rayCallback), rayCallback, aabbMin, aabbMax);
  }

  public void rayTest(Vector3 rayFrom, Vector3 rayTo, btBroadphaseRayCallback rayCallback, Vector3 aabbMin) {
    gdxBulletJNI.btDbvtBroadphase_rayTest__SWIG_1(swigCPtr, this, rayFrom, rayTo, btBroadphaseRayCallback.getCPtr(rayCallback), rayCallback, aabbMin);
  }

  public void rayTest(Vector3 rayFrom, Vector3 rayTo, btBroadphaseRayCallback rayCallback) {
    gdxBulletJNI.btDbvtBroadphase_rayTest__SWIG_2(swigCPtr, this, rayFrom, rayTo, btBroadphaseRayCallback.getCPtr(rayCallback), rayCallback);
  }

  public btOverlappingPairCache getOverlappingPairCache() {
    long cPtr = gdxBulletJNI.btDbvtBroadphase_getOverlappingPairCache__SWIG_0(swigCPtr, this);
    return (cPtr == 0) ? null : new btOverlappingPairCache(cPtr, false);
  }

  public void performDeferredRemoval(btDispatcher dispatcher) {
    gdxBulletJNI.btDbvtBroadphase_performDeferredRemoval(swigCPtr, this, btDispatcher.getCPtr(dispatcher), dispatcher);
  }

  public void setVelocityPrediction(float prediction) {
    gdxBulletJNI.btDbvtBroadphase_setVelocityPrediction(swigCPtr, this, prediction);
  }

  public float getVelocityPrediction() {
    return gdxBulletJNI.btDbvtBroadphase_getVelocityPrediction(swigCPtr, this);
  }

  public void setAabbForceUpdate(btBroadphaseProxy absproxy, Vector3 aabbMin, Vector3 aabbMax, btDispatcher arg3) {
    gdxBulletJNI.btDbvtBroadphase_setAabbForceUpdate(swigCPtr, this, btBroadphaseProxy.getCPtr(absproxy), absproxy, aabbMin, aabbMax, btDispatcher.getCPtr(arg3), arg3);
  }

  public static void benchmark(btBroadphaseInterface arg0) {
    gdxBulletJNI.btDbvtBroadphase_benchmark(btBroadphaseInterface.getCPtr(arg0), arg0);
  }

  public final static int DYNAMIC_SET = 0;
  public final static int FIXED_SET = 1;
  public final static int STAGECOUNT = 2;

}
