/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.10
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package com.badlogic.gdx.physics.bullet;

import com.badlogic.gdx.math.Vector3;
import com.badlogic.gdx.math.Quaternion;
import com.badlogic.gdx.math.Matrix3;
import com.badlogic.gdx.math.Matrix4;

public class btSolverBody extends BulletBase {
	private long swigCPtr;
	
	protected btSolverBody(final String className, long cPtr, boolean cMemoryOwn) {
		super(className, cPtr, cMemoryOwn);
		swigCPtr = cPtr;
	}
	
	protected btSolverBody(long cPtr, boolean cMemoryOwn) {
		this("btSolverBody", cPtr, cMemoryOwn);
		construct();
	}
	
	public static long getCPtr(btSolverBody obj) {
		return (obj == null) ? 0 : obj.swigCPtr;
	}

	@Override
	protected void finalize() throws Throwable {
		if (!destroyed)
			destroy();
		super.finalize();
	}

  @Override protected synchronized void delete() {
		if (swigCPtr != 0) {
			if (swigCMemOwn) {
				swigCMemOwn = false;
				gdxBulletJNI.delete_btSolverBody(swigCPtr);
			}
			swigCPtr = 0;
		}
		super.delete();
	}

  public void setWorldTransform(btTransform value) {
    gdxBulletJNI.btSolverBody_worldTransform_set(swigCPtr, this, btTransform.getCPtr(value), value);
  }

  public btTransform getWorldTransform() {
    long cPtr = gdxBulletJNI.btSolverBody_worldTransform_get(swigCPtr, this);
    return (cPtr == 0) ? null : new btTransform(cPtr, false);
  }

  public void setDeltaLinearVelocity(btVector3 value) {
    gdxBulletJNI.btSolverBody_deltaLinearVelocity_set(swigCPtr, this, btVector3.getCPtr(value), value);
  }

  public btVector3 getDeltaLinearVelocity() {
    long cPtr = gdxBulletJNI.btSolverBody_deltaLinearVelocity_get(swigCPtr, this);
    return (cPtr == 0) ? null : new btVector3(cPtr, false);
  }

  public void setDeltaAngularVelocity(btVector3 value) {
    gdxBulletJNI.btSolverBody_deltaAngularVelocity_set(swigCPtr, this, btVector3.getCPtr(value), value);
  }

  public btVector3 getDeltaAngularVelocity() {
    long cPtr = gdxBulletJNI.btSolverBody_deltaAngularVelocity_get(swigCPtr, this);
    return (cPtr == 0) ? null : new btVector3(cPtr, false);
  }

  public void setAngularFactor(btVector3 value) {
    gdxBulletJNI.btSolverBody_angularFactor_set(swigCPtr, this, btVector3.getCPtr(value), value);
  }

  public btVector3 getAngularFactor() {
    long cPtr = gdxBulletJNI.btSolverBody_angularFactor_get(swigCPtr, this);
    return (cPtr == 0) ? null : new btVector3(cPtr, false);
  }

  public void setLinearFactor(btVector3 value) {
    gdxBulletJNI.btSolverBody_linearFactor_set(swigCPtr, this, btVector3.getCPtr(value), value);
  }

  public btVector3 getLinearFactor() {
    long cPtr = gdxBulletJNI.btSolverBody_linearFactor_get(swigCPtr, this);
    return (cPtr == 0) ? null : new btVector3(cPtr, false);
  }

  public void setInvMass(btVector3 value) {
    gdxBulletJNI.btSolverBody_invMass_set(swigCPtr, this, btVector3.getCPtr(value), value);
  }

  public btVector3 getInvMass() {
    long cPtr = gdxBulletJNI.btSolverBody_invMass_get(swigCPtr, this);
    return (cPtr == 0) ? null : new btVector3(cPtr, false);
  }

  public void setPushVelocity(btVector3 value) {
    gdxBulletJNI.btSolverBody_pushVelocity_set(swigCPtr, this, btVector3.getCPtr(value), value);
  }

  public btVector3 getPushVelocity() {
    long cPtr = gdxBulletJNI.btSolverBody_pushVelocity_get(swigCPtr, this);
    return (cPtr == 0) ? null : new btVector3(cPtr, false);
  }

  public void setTurnVelocity(btVector3 value) {
    gdxBulletJNI.btSolverBody_turnVelocity_set(swigCPtr, this, btVector3.getCPtr(value), value);
  }

  public btVector3 getTurnVelocity() {
    long cPtr = gdxBulletJNI.btSolverBody_turnVelocity_get(swigCPtr, this);
    return (cPtr == 0) ? null : new btVector3(cPtr, false);
  }

  public void setLinearVelocity(btVector3 value) {
    gdxBulletJNI.btSolverBody_linearVelocity_set(swigCPtr, this, btVector3.getCPtr(value), value);
  }

  public btVector3 getLinearVelocity() {
    long cPtr = gdxBulletJNI.btSolverBody_linearVelocity_get(swigCPtr, this);
    return (cPtr == 0) ? null : new btVector3(cPtr, false);
  }

  public void setAngularVelocity(btVector3 value) {
    gdxBulletJNI.btSolverBody_angularVelocity_set(swigCPtr, this, btVector3.getCPtr(value), value);
  }

  public btVector3 getAngularVelocity() {
    long cPtr = gdxBulletJNI.btSolverBody_angularVelocity_get(swigCPtr, this);
    return (cPtr == 0) ? null : new btVector3(cPtr, false);
  }

  public void setOriginalBody(btRigidBody value) {
    gdxBulletJNI.btSolverBody_originalBody_set(swigCPtr, this, btRigidBody.getCPtr(value), value);
  }

  public btRigidBody getOriginalBody() {
    long cPtr = gdxBulletJNI.btSolverBody_originalBody_get(swigCPtr, this);
    return (cPtr == 0) ? null : new btRigidBody(cPtr, false);
  }

  public void setWorldTransform(Matrix4 worldTransform) {
    gdxBulletJNI.btSolverBody_setWorldTransform(swigCPtr, this, worldTransform);
  }

  public void getVelocityInLocalPointObsolete(Vector3 rel_pos, Vector3 velocity) {
    gdxBulletJNI.btSolverBody_getVelocityInLocalPointObsolete(swigCPtr, this, rel_pos, velocity);
  }

  public void getAngularVelocity(Vector3 angVel) {
    gdxBulletJNI.btSolverBody_getAngularVelocity(swigCPtr, this, angVel);
  }

  public void applyImpulse(Vector3 linearComponent, Vector3 angularComponent, float impulseMagnitude) {
    gdxBulletJNI.btSolverBody_applyImpulse(swigCPtr, this, linearComponent, angularComponent, impulseMagnitude);
  }

  public void internalApplyPushImpulse(Vector3 linearComponent, Vector3 angularComponent, float impulseMagnitude) {
    gdxBulletJNI.btSolverBody_internalApplyPushImpulse(swigCPtr, this, linearComponent, angularComponent, impulseMagnitude);
  }

  public Vector3 internalGetDeltaLinearVelocity() {
	return gdxBulletJNI.btSolverBody_internalGetDeltaLinearVelocity(swigCPtr, this);
}

  public Vector3 internalGetDeltaAngularVelocity() {
	return gdxBulletJNI.btSolverBody_internalGetDeltaAngularVelocity(swigCPtr, this);
}

  public Vector3 internalGetAngularFactor() {
	return gdxBulletJNI.btSolverBody_internalGetAngularFactor(swigCPtr, this);
}

  public Vector3 internalGetInvMass() {
	return gdxBulletJNI.btSolverBody_internalGetInvMass(swigCPtr, this);
}

  public void internalSetInvMass(Vector3 invMass) {
    gdxBulletJNI.btSolverBody_internalSetInvMass(swigCPtr, this, invMass);
  }

  public Vector3 internalGetPushVelocity() {
	return gdxBulletJNI.btSolverBody_internalGetPushVelocity(swigCPtr, this);
}

  public Vector3 internalGetTurnVelocity() {
	return gdxBulletJNI.btSolverBody_internalGetTurnVelocity(swigCPtr, this);
}

  public void internalGetVelocityInLocalPointObsolete(Vector3 rel_pos, Vector3 velocity) {
    gdxBulletJNI.btSolverBody_internalGetVelocityInLocalPointObsolete(swigCPtr, this, rel_pos, velocity);
  }

  public void internalGetAngularVelocity(Vector3 angVel) {
    gdxBulletJNI.btSolverBody_internalGetAngularVelocity(swigCPtr, this, angVel);
  }

  public void internalApplyImpulse(Vector3 linearComponent, Vector3 angularComponent, float impulseMagnitude) {
    gdxBulletJNI.btSolverBody_internalApplyImpulse(swigCPtr, this, linearComponent, angularComponent, impulseMagnitude);
  }

  public void writebackVelocity() {
    gdxBulletJNI.btSolverBody_writebackVelocity(swigCPtr, this);
  }

  public void writebackVelocityAndTransform(float timeStep, float splitImpulseTurnErp) {
    gdxBulletJNI.btSolverBody_writebackVelocityAndTransform(swigCPtr, this, timeStep, splitImpulseTurnErp);
  }

  public btSolverBody() {
    this(gdxBulletJNI.new_btSolverBody(), true);
  }

}
