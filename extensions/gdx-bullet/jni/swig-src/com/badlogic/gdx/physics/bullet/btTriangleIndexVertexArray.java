/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.10
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package com.badlogic.gdx.physics.bullet;

import com.badlogic.gdx.math.Vector3;
import com.badlogic.gdx.math.Quaternion;
import com.badlogic.gdx.math.Matrix3;
import com.badlogic.gdx.math.Matrix4;
import com.badlogic.gdx.graphics.Mesh;
import com.badlogic.gdx.graphics.g3d.Model;

public class btTriangleIndexVertexArray extends btStridingMeshInterface {
  private long swigCPtr;

  protected btTriangleIndexVertexArray(long cPtr, boolean cMemoryOwn) {
    super(gdxBulletJNI.btTriangleIndexVertexArray_SWIGUpcast(cPtr), cMemoryOwn);
    swigCPtr = cPtr;
  }

  public static long getCPtr(btTriangleIndexVertexArray obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected void finalize() {
    delete();
  }

  public synchronized void delete()  {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        gdxBulletJNI.delete_btTriangleIndexVertexArray(swigCPtr);
      }
      swigCPtr = 0;
    }
    super.delete();
	dispose();
  }


	com.badlogic.gdx.utils.Array<btIndexedMesh> meshes = null;
	
	/** Construct a new btTriangleIndexVertexArray based one or more supplied {@link com.badlogic.gdx.graphics.Mesh} instances.
	 * The specified meshes must be indexed and triangulated and must outlive this btTriangleIndexVertexArray.
     * The buffers for the vertices and indices are shared amongst both. */
	public btTriangleIndexVertexArray(final com.badlogic.gdx.graphics.Mesh... meshes) {
		this();
		addMesh(meshes);
	}
	
	/** Construct a new btTriangleIndexVertexArray based on one or more {@link Model} instances.
	 * Only the triangulated submeshes are added, which must be indexed. The model must outlive this btTriangleIndexVertexArray.
     * The buffers for the vertices and indices are shared amongst both. */
	public btTriangleIndexVertexArray(final Model... models) {
		this();
		addModel(models);
	}

	/** Add one or more {@link com.badlogic.gdx.graphics.Mesh} instances to this btTriangleIndexVertexArray. 
	 * The specified meshes must be indexed and triangulated and must outlive this btTriangleIndexVertexArray.
     * The buffers for the vertices and indices are shared amongst both. */
	public void addMesh(final com.badlogic.gdx.graphics.Mesh... meshes) {
		for (int i = 0; i < meshes.length; i++)
			addIndexedMesh(new btIndexedMesh(meshes[i]), PHY_ScalarType.PHY_SHORT, true);
	}
	
	/** Add one or more {@link Model} instances to this btTriangleIndexVertexArray.
	 * Only the triangulated submeshes are added, which must be indexed. The model must outlive this btTriangleIndexVertexArray.
     * The buffers for the vertices and indices are shared amongst both. */
	public void addModel(final Model... models) {
		for (int i = 0; i < models.length; i++) {
			for (int j = 0; j < models[i].meshParts.size; j++) {
				com.badlogic.gdx.graphics.g3d.model.MeshPart mp = models[i].meshParts.get(j);
				if (mp.primitiveType == com.badlogic.gdx.graphics.GL10.GL_TRIANGLES)
					addIndexedMesh(new btIndexedMesh(mp.mesh, mp.indexOffset, mp.numVertices), PHY_ScalarType.PHY_SHORT, true);
			}
		}
	}
	
	/** @param managed If true this btTriangleIndexVertexArray will maintain a reference to the {@link btIndexedMesh}
	 * and will delete it when this btTriangleIndexVertexArray is deleted. */
	public void addIndexedMesh(final btIndexedMesh mesh, int indexType, boolean managed) {
		addIndexedMesh(mesh, indexType);
		if (managed) {
			if (meshes == null)
				meshes = new com.badlogic.gdx.utils.Array<btIndexedMesh>();
			meshes.add(mesh);
		}
	}

	/** @param managed If true this btTriangleIndexVertexArray will maintain a reference to the {@link btIndexedMesh}
	 * and will delete it when this btTriangleIndexVertexArray is deleted. */
	public void addIndexedMesh(final btIndexedMesh mesh, boolean managed) {
		addIndexedMesh(mesh);
		if (managed) {
			if (meshes == null)
				meshes = new com.badlogic.gdx.utils.Array<btIndexedMesh>();
			meshes.add(mesh);
		}
	}
	
	protected void dispose() {
		if (meshes != null) {
			for (int i = 0; i < meshes.size; i++)
				meshes.get(i).delete();
			meshes.clear();
			meshes = null;
		}
	}

  public btTriangleIndexVertexArray() {
    this(gdxBulletJNI.new_btTriangleIndexVertexArray__SWIG_0(), true);
  }

  static private long SwigConstructbtTriangleIndexVertexArray(int numTriangles, java.nio.IntBuffer triangleIndexBase, int triangleIndexStride, int numVertices, java.nio.FloatBuffer vertexBase, int vertexStride) {
    assert triangleIndexBase.isDirect() : "Buffer must be allocated direct.";
    assert vertexBase.isDirect() : "Buffer must be allocated direct.";
    return gdxBulletJNI.new_btTriangleIndexVertexArray__SWIG_1(numTriangles, triangleIndexBase, triangleIndexStride, numVertices, vertexBase, vertexStride);
  }

  public btTriangleIndexVertexArray(int numTriangles, java.nio.IntBuffer triangleIndexBase, int triangleIndexStride, int numVertices, java.nio.FloatBuffer vertexBase, int vertexStride) {
    this(btTriangleIndexVertexArray.SwigConstructbtTriangleIndexVertexArray(numTriangles, triangleIndexBase, triangleIndexStride, numVertices, vertexBase, vertexStride), true);
  }

  public void addIndexedMesh(btIndexedMesh mesh, int indexType) {
    gdxBulletJNI.btTriangleIndexVertexArray_addIndexedMesh__SWIG_0(swigCPtr, this, btIndexedMesh.getCPtr(mesh), mesh, indexType);
  }

  public void addIndexedMesh(btIndexedMesh mesh) {
    gdxBulletJNI.btTriangleIndexVertexArray_addIndexedMesh__SWIG_1(swigCPtr, this, btIndexedMesh.getCPtr(mesh), mesh);
  }

  public void getLockedVertexIndexBase(SWIGTYPE_p_p_unsigned_char vertexbase, SWIGTYPE_p_int numverts, SWIGTYPE_p_PHY_ScalarType type, SWIGTYPE_p_int vertexStride, SWIGTYPE_p_p_unsigned_char indexbase, SWIGTYPE_p_int indexstride, SWIGTYPE_p_int numfaces, SWIGTYPE_p_PHY_ScalarType indicestype, int subpart) {
    gdxBulletJNI.btTriangleIndexVertexArray_getLockedVertexIndexBase__SWIG_0(swigCPtr, this, SWIGTYPE_p_p_unsigned_char.getCPtr(vertexbase), SWIGTYPE_p_int.getCPtr(numverts), SWIGTYPE_p_PHY_ScalarType.getCPtr(type), SWIGTYPE_p_int.getCPtr(vertexStride), SWIGTYPE_p_p_unsigned_char.getCPtr(indexbase), SWIGTYPE_p_int.getCPtr(indexstride), SWIGTYPE_p_int.getCPtr(numfaces), SWIGTYPE_p_PHY_ScalarType.getCPtr(indicestype), subpart);
  }

  public void getLockedVertexIndexBase(SWIGTYPE_p_p_unsigned_char vertexbase, SWIGTYPE_p_int numverts, SWIGTYPE_p_PHY_ScalarType type, SWIGTYPE_p_int vertexStride, SWIGTYPE_p_p_unsigned_char indexbase, SWIGTYPE_p_int indexstride, SWIGTYPE_p_int numfaces, SWIGTYPE_p_PHY_ScalarType indicestype) {
    gdxBulletJNI.btTriangleIndexVertexArray_getLockedVertexIndexBase__SWIG_1(swigCPtr, this, SWIGTYPE_p_p_unsigned_char.getCPtr(vertexbase), SWIGTYPE_p_int.getCPtr(numverts), SWIGTYPE_p_PHY_ScalarType.getCPtr(type), SWIGTYPE_p_int.getCPtr(vertexStride), SWIGTYPE_p_p_unsigned_char.getCPtr(indexbase), SWIGTYPE_p_int.getCPtr(indexstride), SWIGTYPE_p_int.getCPtr(numfaces), SWIGTYPE_p_PHY_ScalarType.getCPtr(indicestype));
  }

  public void getLockedReadOnlyVertexIndexBase(SWIGTYPE_p_p_unsigned_char vertexbase, SWIGTYPE_p_int numverts, SWIGTYPE_p_PHY_ScalarType type, SWIGTYPE_p_int vertexStride, SWIGTYPE_p_p_unsigned_char indexbase, SWIGTYPE_p_int indexstride, SWIGTYPE_p_int numfaces, SWIGTYPE_p_PHY_ScalarType indicestype, int subpart) {
    gdxBulletJNI.btTriangleIndexVertexArray_getLockedReadOnlyVertexIndexBase__SWIG_0(swigCPtr, this, SWIGTYPE_p_p_unsigned_char.getCPtr(vertexbase), SWIGTYPE_p_int.getCPtr(numverts), SWIGTYPE_p_PHY_ScalarType.getCPtr(type), SWIGTYPE_p_int.getCPtr(vertexStride), SWIGTYPE_p_p_unsigned_char.getCPtr(indexbase), SWIGTYPE_p_int.getCPtr(indexstride), SWIGTYPE_p_int.getCPtr(numfaces), SWIGTYPE_p_PHY_ScalarType.getCPtr(indicestype), subpart);
  }

  public void getLockedReadOnlyVertexIndexBase(SWIGTYPE_p_p_unsigned_char vertexbase, SWIGTYPE_p_int numverts, SWIGTYPE_p_PHY_ScalarType type, SWIGTYPE_p_int vertexStride, SWIGTYPE_p_p_unsigned_char indexbase, SWIGTYPE_p_int indexstride, SWIGTYPE_p_int numfaces, SWIGTYPE_p_PHY_ScalarType indicestype) {
    gdxBulletJNI.btTriangleIndexVertexArray_getLockedReadOnlyVertexIndexBase__SWIG_1(swigCPtr, this, SWIGTYPE_p_p_unsigned_char.getCPtr(vertexbase), SWIGTYPE_p_int.getCPtr(numverts), SWIGTYPE_p_PHY_ScalarType.getCPtr(type), SWIGTYPE_p_int.getCPtr(vertexStride), SWIGTYPE_p_p_unsigned_char.getCPtr(indexbase), SWIGTYPE_p_int.getCPtr(indexstride), SWIGTYPE_p_int.getCPtr(numfaces), SWIGTYPE_p_PHY_ScalarType.getCPtr(indicestype));
  }

  public SWIGTYPE_p_btAlignedObjectArrayT_btIndexedMesh_t getIndexedMeshArray() {
    return new SWIGTYPE_p_btAlignedObjectArrayT_btIndexedMesh_t(gdxBulletJNI.btTriangleIndexVertexArray_getIndexedMeshArray__SWIG_0(swigCPtr, this), false);
  }

}
