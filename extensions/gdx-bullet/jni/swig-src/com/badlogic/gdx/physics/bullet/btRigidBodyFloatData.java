/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.10
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package com.badlogic.gdx.physics.bullet;

import com.badlogic.gdx.math.Vector3;
import com.badlogic.gdx.math.Quaternion;
import com.badlogic.gdx.math.Matrix3;
import com.badlogic.gdx.math.Matrix4;

public class btRigidBodyFloatData extends BulletBase {
	private long swigCPtr;
	
	protected btRigidBodyFloatData(final String className, long cPtr, boolean cMemoryOwn) {
		super(className, cPtr, cMemoryOwn);
		swigCPtr = cPtr;
	}
	
	protected btRigidBodyFloatData(long cPtr, boolean cMemoryOwn) {
		this("btRigidBodyFloatData", cPtr, cMemoryOwn);
		construct();
	}
	
	@Override
	protected void reset(long cPtr, boolean cMemoryOwn) {
		if (!destroyed)
			destroy();
		super.reset(swigCPtr = cPtr, cMemoryOwn);
	}
	
	public static long getCPtr(btRigidBodyFloatData obj) {
		return (obj == null) ? 0 : obj.swigCPtr;
	}

	@Override
	protected void finalize() throws Throwable {
		if (!destroyed)
			destroy();
		super.finalize();
	}

  @Override protected synchronized void delete() {
		if (swigCPtr != 0) {
			if (swigCMemOwn) {
				swigCMemOwn = false;
				gdxBulletJNI.delete_btRigidBodyFloatData(swigCPtr);
			}
			swigCPtr = 0;
		}
		super.delete();
	}

  public void setCollisionObjectData(btCollisionObjectFloatData value) {
    gdxBulletJNI.btRigidBodyFloatData_collisionObjectData_set(swigCPtr, this, btCollisionObjectFloatData.getCPtr(value), value);
  }

  public btCollisionObjectFloatData getCollisionObjectData() {
    long cPtr = gdxBulletJNI.btRigidBodyFloatData_collisionObjectData_get(swigCPtr, this);
    return (cPtr == 0) ? null : new btCollisionObjectFloatData(cPtr, false);
  }

  public void setInvInertiaTensorWorld(SWIGTYPE_p_btMatrix3x3FloatData value) {
    gdxBulletJNI.btRigidBodyFloatData_invInertiaTensorWorld_set(swigCPtr, this, SWIGTYPE_p_btMatrix3x3FloatData.getCPtr(value));
  }

  public SWIGTYPE_p_btMatrix3x3FloatData getInvInertiaTensorWorld() {
    return new SWIGTYPE_p_btMatrix3x3FloatData(gdxBulletJNI.btRigidBodyFloatData_invInertiaTensorWorld_get(swigCPtr, this), true);
  }

  public void setLinearVelocity(btVector3FloatData value) {
    gdxBulletJNI.btRigidBodyFloatData_linearVelocity_set(swigCPtr, this, btVector3FloatData.getCPtr(value), value);
  }

  public btVector3FloatData getLinearVelocity() {
    long cPtr = gdxBulletJNI.btRigidBodyFloatData_linearVelocity_get(swigCPtr, this);
    return (cPtr == 0) ? null : new btVector3FloatData(cPtr, false);
  }

  public void setAngularVelocity(btVector3FloatData value) {
    gdxBulletJNI.btRigidBodyFloatData_angularVelocity_set(swigCPtr, this, btVector3FloatData.getCPtr(value), value);
  }

  public btVector3FloatData getAngularVelocity() {
    long cPtr = gdxBulletJNI.btRigidBodyFloatData_angularVelocity_get(swigCPtr, this);
    return (cPtr == 0) ? null : new btVector3FloatData(cPtr, false);
  }

  public void setAngularFactor(btVector3FloatData value) {
    gdxBulletJNI.btRigidBodyFloatData_angularFactor_set(swigCPtr, this, btVector3FloatData.getCPtr(value), value);
  }

  public btVector3FloatData getAngularFactor() {
    long cPtr = gdxBulletJNI.btRigidBodyFloatData_angularFactor_get(swigCPtr, this);
    return (cPtr == 0) ? null : new btVector3FloatData(cPtr, false);
  }

  public void setLinearFactor(btVector3FloatData value) {
    gdxBulletJNI.btRigidBodyFloatData_linearFactor_set(swigCPtr, this, btVector3FloatData.getCPtr(value), value);
  }

  public btVector3FloatData getLinearFactor() {
    long cPtr = gdxBulletJNI.btRigidBodyFloatData_linearFactor_get(swigCPtr, this);
    return (cPtr == 0) ? null : new btVector3FloatData(cPtr, false);
  }

  public void setGravity(btVector3FloatData value) {
    gdxBulletJNI.btRigidBodyFloatData_gravity_set(swigCPtr, this, btVector3FloatData.getCPtr(value), value);
  }

  public btVector3FloatData getGravity() {
    long cPtr = gdxBulletJNI.btRigidBodyFloatData_gravity_get(swigCPtr, this);
    return (cPtr == 0) ? null : new btVector3FloatData(cPtr, false);
  }

  public void setGravity_acceleration(btVector3FloatData value) {
    gdxBulletJNI.btRigidBodyFloatData_gravity_acceleration_set(swigCPtr, this, btVector3FloatData.getCPtr(value), value);
  }

  public btVector3FloatData getGravity_acceleration() {
    long cPtr = gdxBulletJNI.btRigidBodyFloatData_gravity_acceleration_get(swigCPtr, this);
    return (cPtr == 0) ? null : new btVector3FloatData(cPtr, false);
  }

  public void setInvInertiaLocal(btVector3FloatData value) {
    gdxBulletJNI.btRigidBodyFloatData_invInertiaLocal_set(swigCPtr, this, btVector3FloatData.getCPtr(value), value);
  }

  public btVector3FloatData getInvInertiaLocal() {
    long cPtr = gdxBulletJNI.btRigidBodyFloatData_invInertiaLocal_get(swigCPtr, this);
    return (cPtr == 0) ? null : new btVector3FloatData(cPtr, false);
  }

  public void setTotalForce(btVector3FloatData value) {
    gdxBulletJNI.btRigidBodyFloatData_totalForce_set(swigCPtr, this, btVector3FloatData.getCPtr(value), value);
  }

  public btVector3FloatData getTotalForce() {
    long cPtr = gdxBulletJNI.btRigidBodyFloatData_totalForce_get(swigCPtr, this);
    return (cPtr == 0) ? null : new btVector3FloatData(cPtr, false);
  }

  public void setTotalTorque(btVector3FloatData value) {
    gdxBulletJNI.btRigidBodyFloatData_totalTorque_set(swigCPtr, this, btVector3FloatData.getCPtr(value), value);
  }

  public btVector3FloatData getTotalTorque() {
    long cPtr = gdxBulletJNI.btRigidBodyFloatData_totalTorque_get(swigCPtr, this);
    return (cPtr == 0) ? null : new btVector3FloatData(cPtr, false);
  }

  public void setInverseMass(float value) {
    gdxBulletJNI.btRigidBodyFloatData_inverseMass_set(swigCPtr, this, value);
  }

  public float getInverseMass() {
    return gdxBulletJNI.btRigidBodyFloatData_inverseMass_get(swigCPtr, this);
  }

  public void setLinearDamping(float value) {
    gdxBulletJNI.btRigidBodyFloatData_linearDamping_set(swigCPtr, this, value);
  }

  public float getLinearDamping() {
    return gdxBulletJNI.btRigidBodyFloatData_linearDamping_get(swigCPtr, this);
  }

  public void setAngularDamping(float value) {
    gdxBulletJNI.btRigidBodyFloatData_angularDamping_set(swigCPtr, this, value);
  }

  public float getAngularDamping() {
    return gdxBulletJNI.btRigidBodyFloatData_angularDamping_get(swigCPtr, this);
  }

  public void setAdditionalDampingFactor(float value) {
    gdxBulletJNI.btRigidBodyFloatData_additionalDampingFactor_set(swigCPtr, this, value);
  }

  public float getAdditionalDampingFactor() {
    return gdxBulletJNI.btRigidBodyFloatData_additionalDampingFactor_get(swigCPtr, this);
  }

  public void setAdditionalLinearDampingThresholdSqr(float value) {
    gdxBulletJNI.btRigidBodyFloatData_additionalLinearDampingThresholdSqr_set(swigCPtr, this, value);
  }

  public float getAdditionalLinearDampingThresholdSqr() {
    return gdxBulletJNI.btRigidBodyFloatData_additionalLinearDampingThresholdSqr_get(swigCPtr, this);
  }

  public void setAdditionalAngularDampingThresholdSqr(float value) {
    gdxBulletJNI.btRigidBodyFloatData_additionalAngularDampingThresholdSqr_set(swigCPtr, this, value);
  }

  public float getAdditionalAngularDampingThresholdSqr() {
    return gdxBulletJNI.btRigidBodyFloatData_additionalAngularDampingThresholdSqr_get(swigCPtr, this);
  }

  public void setAdditionalAngularDampingFactor(float value) {
    gdxBulletJNI.btRigidBodyFloatData_additionalAngularDampingFactor_set(swigCPtr, this, value);
  }

  public float getAdditionalAngularDampingFactor() {
    return gdxBulletJNI.btRigidBodyFloatData_additionalAngularDampingFactor_get(swigCPtr, this);
  }

  public void setLinearSleepingThreshold(float value) {
    gdxBulletJNI.btRigidBodyFloatData_linearSleepingThreshold_set(swigCPtr, this, value);
  }

  public float getLinearSleepingThreshold() {
    return gdxBulletJNI.btRigidBodyFloatData_linearSleepingThreshold_get(swigCPtr, this);
  }

  public void setAngularSleepingThreshold(float value) {
    gdxBulletJNI.btRigidBodyFloatData_angularSleepingThreshold_set(swigCPtr, this, value);
  }

  public float getAngularSleepingThreshold() {
    return gdxBulletJNI.btRigidBodyFloatData_angularSleepingThreshold_get(swigCPtr, this);
  }

  public void setAdditionalDamping(int value) {
    gdxBulletJNI.btRigidBodyFloatData_additionalDamping_set(swigCPtr, this, value);
  }

  public int getAdditionalDamping() {
    return gdxBulletJNI.btRigidBodyFloatData_additionalDamping_get(swigCPtr, this);
  }

  public btRigidBodyFloatData() {
    this(gdxBulletJNI.new_btRigidBodyFloatData(), true);
  }

}
