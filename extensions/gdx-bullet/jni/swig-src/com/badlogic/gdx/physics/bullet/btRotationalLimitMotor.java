/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.10
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package com.badlogic.gdx.physics.bullet;

import com.badlogic.gdx.math.Vector3;
import com.badlogic.gdx.math.Quaternion;
import com.badlogic.gdx.math.Matrix3;
import com.badlogic.gdx.math.Matrix4;

public class btRotationalLimitMotor {
  private long swigCPtr;
  protected boolean swigCMemOwn;

  protected btRotationalLimitMotor(long cPtr, boolean cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }

  public static long getCPtr(btRotationalLimitMotor obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        gdxBulletJNI.delete_btRotationalLimitMotor(swigCPtr);
      }
      swigCPtr = 0;
    }
  }

  public void setM_loLimit(float value) {
    gdxBulletJNI.btRotationalLimitMotor_m_loLimit_set(swigCPtr, this, value);
  }

  public float getM_loLimit() {
    return gdxBulletJNI.btRotationalLimitMotor_m_loLimit_get(swigCPtr, this);
  }

  public void setM_hiLimit(float value) {
    gdxBulletJNI.btRotationalLimitMotor_m_hiLimit_set(swigCPtr, this, value);
  }

  public float getM_hiLimit() {
    return gdxBulletJNI.btRotationalLimitMotor_m_hiLimit_get(swigCPtr, this);
  }

  public void setM_targetVelocity(float value) {
    gdxBulletJNI.btRotationalLimitMotor_m_targetVelocity_set(swigCPtr, this, value);
  }

  public float getM_targetVelocity() {
    return gdxBulletJNI.btRotationalLimitMotor_m_targetVelocity_get(swigCPtr, this);
  }

  public void setM_maxMotorForce(float value) {
    gdxBulletJNI.btRotationalLimitMotor_m_maxMotorForce_set(swigCPtr, this, value);
  }

  public float getM_maxMotorForce() {
    return gdxBulletJNI.btRotationalLimitMotor_m_maxMotorForce_get(swigCPtr, this);
  }

  public void setM_maxLimitForce(float value) {
    gdxBulletJNI.btRotationalLimitMotor_m_maxLimitForce_set(swigCPtr, this, value);
  }

  public float getM_maxLimitForce() {
    return gdxBulletJNI.btRotationalLimitMotor_m_maxLimitForce_get(swigCPtr, this);
  }

  public void setM_damping(float value) {
    gdxBulletJNI.btRotationalLimitMotor_m_damping_set(swigCPtr, this, value);
  }

  public float getM_damping() {
    return gdxBulletJNI.btRotationalLimitMotor_m_damping_get(swigCPtr, this);
  }

  public void setM_limitSoftness(float value) {
    gdxBulletJNI.btRotationalLimitMotor_m_limitSoftness_set(swigCPtr, this, value);
  }

  public float getM_limitSoftness() {
    return gdxBulletJNI.btRotationalLimitMotor_m_limitSoftness_get(swigCPtr, this);
  }

  public void setM_normalCFM(float value) {
    gdxBulletJNI.btRotationalLimitMotor_m_normalCFM_set(swigCPtr, this, value);
  }

  public float getM_normalCFM() {
    return gdxBulletJNI.btRotationalLimitMotor_m_normalCFM_get(swigCPtr, this);
  }

  public void setM_stopERP(float value) {
    gdxBulletJNI.btRotationalLimitMotor_m_stopERP_set(swigCPtr, this, value);
  }

  public float getM_stopERP() {
    return gdxBulletJNI.btRotationalLimitMotor_m_stopERP_get(swigCPtr, this);
  }

  public void setM_stopCFM(float value) {
    gdxBulletJNI.btRotationalLimitMotor_m_stopCFM_set(swigCPtr, this, value);
  }

  public float getM_stopCFM() {
    return gdxBulletJNI.btRotationalLimitMotor_m_stopCFM_get(swigCPtr, this);
  }

  public void setM_bounce(float value) {
    gdxBulletJNI.btRotationalLimitMotor_m_bounce_set(swigCPtr, this, value);
  }

  public float getM_bounce() {
    return gdxBulletJNI.btRotationalLimitMotor_m_bounce_get(swigCPtr, this);
  }

  public void setM_enableMotor(boolean value) {
    gdxBulletJNI.btRotationalLimitMotor_m_enableMotor_set(swigCPtr, this, value);
  }

  public boolean getM_enableMotor() {
    return gdxBulletJNI.btRotationalLimitMotor_m_enableMotor_get(swigCPtr, this);
  }

  public void setM_currentLimitError(float value) {
    gdxBulletJNI.btRotationalLimitMotor_m_currentLimitError_set(swigCPtr, this, value);
  }

  public float getM_currentLimitError() {
    return gdxBulletJNI.btRotationalLimitMotor_m_currentLimitError_get(swigCPtr, this);
  }

  public void setM_currentPosition(float value) {
    gdxBulletJNI.btRotationalLimitMotor_m_currentPosition_set(swigCPtr, this, value);
  }

  public float getM_currentPosition() {
    return gdxBulletJNI.btRotationalLimitMotor_m_currentPosition_get(swigCPtr, this);
  }

  public void setM_currentLimit(int value) {
    gdxBulletJNI.btRotationalLimitMotor_m_currentLimit_set(swigCPtr, this, value);
  }

  public int getM_currentLimit() {
    return gdxBulletJNI.btRotationalLimitMotor_m_currentLimit_get(swigCPtr, this);
  }

  public void setM_accumulatedImpulse(float value) {
    gdxBulletJNI.btRotationalLimitMotor_m_accumulatedImpulse_set(swigCPtr, this, value);
  }

  public float getM_accumulatedImpulse() {
    return gdxBulletJNI.btRotationalLimitMotor_m_accumulatedImpulse_get(swigCPtr, this);
  }

  public btRotationalLimitMotor() {
    this(gdxBulletJNI.new_btRotationalLimitMotor__SWIG_0(), true);
  }

  public btRotationalLimitMotor(btRotationalLimitMotor limot) {
    this(gdxBulletJNI.new_btRotationalLimitMotor__SWIG_1(btRotationalLimitMotor.getCPtr(limot), limot), true);
  }

  public boolean isLimited() {
    return gdxBulletJNI.btRotationalLimitMotor_isLimited(swigCPtr, this);
  }

  public boolean needApplyTorques() {
    return gdxBulletJNI.btRotationalLimitMotor_needApplyTorques(swigCPtr, this);
  }

  public int testLimitValue(float test_value) {
    return gdxBulletJNI.btRotationalLimitMotor_testLimitValue(swigCPtr, this, test_value);
  }

  public float solveAngularLimits(float timeStep, Vector3 axis, float jacDiagABInv, btRigidBody body0, btRigidBody body1) {
    return gdxBulletJNI.btRotationalLimitMotor_solveAngularLimits(swigCPtr, this, timeStep, axis, jacDiagABInv, btRigidBody.getCPtr(body0), body0, btRigidBody.getCPtr(body1), body1);
  }

}
