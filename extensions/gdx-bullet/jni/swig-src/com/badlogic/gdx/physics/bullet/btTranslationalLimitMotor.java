/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.10
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package com.badlogic.gdx.physics.bullet;

import com.badlogic.gdx.math.Vector3;
import com.badlogic.gdx.math.Quaternion;
import com.badlogic.gdx.math.Matrix3;
import com.badlogic.gdx.math.Matrix4;

public class btTranslationalLimitMotor {
  private long swigCPtr;
  protected boolean swigCMemOwn;

  protected btTranslationalLimitMotor(long cPtr, boolean cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }

  public static long getCPtr(btTranslationalLimitMotor obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        gdxBulletJNI.delete_btTranslationalLimitMotor(swigCPtr);
      }
      swigCPtr = 0;
    }
  }

  public void setM_lowerLimit(btVector3 value) {
    gdxBulletJNI.btTranslationalLimitMotor_m_lowerLimit_set(swigCPtr, this, btVector3.getCPtr(value), value);
  }

  public btVector3 getM_lowerLimit() {
    long cPtr = gdxBulletJNI.btTranslationalLimitMotor_m_lowerLimit_get(swigCPtr, this);
    return (cPtr == 0) ? null : new btVector3(cPtr, false);
  }

  public void setM_upperLimit(btVector3 value) {
    gdxBulletJNI.btTranslationalLimitMotor_m_upperLimit_set(swigCPtr, this, btVector3.getCPtr(value), value);
  }

  public btVector3 getM_upperLimit() {
    long cPtr = gdxBulletJNI.btTranslationalLimitMotor_m_upperLimit_get(swigCPtr, this);
    return (cPtr == 0) ? null : new btVector3(cPtr, false);
  }

  public void setM_accumulatedImpulse(btVector3 value) {
    gdxBulletJNI.btTranslationalLimitMotor_m_accumulatedImpulse_set(swigCPtr, this, btVector3.getCPtr(value), value);
  }

  public btVector3 getM_accumulatedImpulse() {
    long cPtr = gdxBulletJNI.btTranslationalLimitMotor_m_accumulatedImpulse_get(swigCPtr, this);
    return (cPtr == 0) ? null : new btVector3(cPtr, false);
  }

  public void setM_limitSoftness(float value) {
    gdxBulletJNI.btTranslationalLimitMotor_m_limitSoftness_set(swigCPtr, this, value);
  }

  public float getM_limitSoftness() {
    return gdxBulletJNI.btTranslationalLimitMotor_m_limitSoftness_get(swigCPtr, this);
  }

  public void setM_damping(float value) {
    gdxBulletJNI.btTranslationalLimitMotor_m_damping_set(swigCPtr, this, value);
  }

  public float getM_damping() {
    return gdxBulletJNI.btTranslationalLimitMotor_m_damping_get(swigCPtr, this);
  }

  public void setM_restitution(float value) {
    gdxBulletJNI.btTranslationalLimitMotor_m_restitution_set(swigCPtr, this, value);
  }

  public float getM_restitution() {
    return gdxBulletJNI.btTranslationalLimitMotor_m_restitution_get(swigCPtr, this);
  }

  public void setM_normalCFM(btVector3 value) {
    gdxBulletJNI.btTranslationalLimitMotor_m_normalCFM_set(swigCPtr, this, btVector3.getCPtr(value), value);
  }

  public btVector3 getM_normalCFM() {
    long cPtr = gdxBulletJNI.btTranslationalLimitMotor_m_normalCFM_get(swigCPtr, this);
    return (cPtr == 0) ? null : new btVector3(cPtr, false);
  }

  public void setM_stopERP(btVector3 value) {
    gdxBulletJNI.btTranslationalLimitMotor_m_stopERP_set(swigCPtr, this, btVector3.getCPtr(value), value);
  }

  public btVector3 getM_stopERP() {
    long cPtr = gdxBulletJNI.btTranslationalLimitMotor_m_stopERP_get(swigCPtr, this);
    return (cPtr == 0) ? null : new btVector3(cPtr, false);
  }

  public void setM_stopCFM(btVector3 value) {
    gdxBulletJNI.btTranslationalLimitMotor_m_stopCFM_set(swigCPtr, this, btVector3.getCPtr(value), value);
  }

  public btVector3 getM_stopCFM() {
    long cPtr = gdxBulletJNI.btTranslationalLimitMotor_m_stopCFM_get(swigCPtr, this);
    return (cPtr == 0) ? null : new btVector3(cPtr, false);
  }

  public void setM_enableMotor(boolean[] value) {
    gdxBulletJNI.btTranslationalLimitMotor_m_enableMotor_set(swigCPtr, this, value);
  }

  public boolean[] getM_enableMotor() {
    return gdxBulletJNI.btTranslationalLimitMotor_m_enableMotor_get(swigCPtr, this);
}

  public void setM_targetVelocity(btVector3 value) {
    gdxBulletJNI.btTranslationalLimitMotor_m_targetVelocity_set(swigCPtr, this, btVector3.getCPtr(value), value);
  }

  public btVector3 getM_targetVelocity() {
    long cPtr = gdxBulletJNI.btTranslationalLimitMotor_m_targetVelocity_get(swigCPtr, this);
    return (cPtr == 0) ? null : new btVector3(cPtr, false);
  }

  public void setM_maxMotorForce(btVector3 value) {
    gdxBulletJNI.btTranslationalLimitMotor_m_maxMotorForce_set(swigCPtr, this, btVector3.getCPtr(value), value);
  }

  public btVector3 getM_maxMotorForce() {
    long cPtr = gdxBulletJNI.btTranslationalLimitMotor_m_maxMotorForce_get(swigCPtr, this);
    return (cPtr == 0) ? null : new btVector3(cPtr, false);
  }

  public void setM_currentLimitError(btVector3 value) {
    gdxBulletJNI.btTranslationalLimitMotor_m_currentLimitError_set(swigCPtr, this, btVector3.getCPtr(value), value);
  }

  public btVector3 getM_currentLimitError() {
    long cPtr = gdxBulletJNI.btTranslationalLimitMotor_m_currentLimitError_get(swigCPtr, this);
    return (cPtr == 0) ? null : new btVector3(cPtr, false);
  }

  public void setM_currentLinearDiff(btVector3 value) {
    gdxBulletJNI.btTranslationalLimitMotor_m_currentLinearDiff_set(swigCPtr, this, btVector3.getCPtr(value), value);
  }

  public btVector3 getM_currentLinearDiff() {
    long cPtr = gdxBulletJNI.btTranslationalLimitMotor_m_currentLinearDiff_get(swigCPtr, this);
    return (cPtr == 0) ? null : new btVector3(cPtr, false);
  }

  public void setM_currentLimit(int[] value) {
    gdxBulletJNI.btTranslationalLimitMotor_m_currentLimit_set(swigCPtr, this, value);
  }

  public int[] getM_currentLimit() {
    return gdxBulletJNI.btTranslationalLimitMotor_m_currentLimit_get(swigCPtr, this);
}

  public btTranslationalLimitMotor() {
    this(gdxBulletJNI.new_btTranslationalLimitMotor__SWIG_0(), true);
  }

  public btTranslationalLimitMotor(btTranslationalLimitMotor other) {
    this(gdxBulletJNI.new_btTranslationalLimitMotor__SWIG_1(btTranslationalLimitMotor.getCPtr(other), other), true);
  }

  public boolean isLimited(int limitIndex) {
    return gdxBulletJNI.btTranslationalLimitMotor_isLimited(swigCPtr, this, limitIndex);
  }

  public boolean needApplyForce(int limitIndex) {
    return gdxBulletJNI.btTranslationalLimitMotor_needApplyForce(swigCPtr, this, limitIndex);
  }

  public int testLimitValue(int limitIndex, float test_value) {
    return gdxBulletJNI.btTranslationalLimitMotor_testLimitValue(swigCPtr, this, limitIndex, test_value);
  }

  public float solveLinearAxis(float timeStep, float jacDiagABInv, btRigidBody body1, Vector3 pointInA, btRigidBody body2, Vector3 pointInB, int limit_index, Vector3 axis_normal_on_a, Vector3 anchorPos) {
    return gdxBulletJNI.btTranslationalLimitMotor_solveLinearAxis(swigCPtr, this, timeStep, jacDiagABInv, btRigidBody.getCPtr(body1), body1, pointInA, btRigidBody.getCPtr(body2), body2, pointInB, limit_index, axis_normal_on_a, anchorPos);
  }

}
