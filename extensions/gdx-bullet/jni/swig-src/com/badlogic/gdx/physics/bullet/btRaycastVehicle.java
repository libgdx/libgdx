/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.10
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package com.badlogic.gdx.physics.bullet;

import com.badlogic.gdx.math.Vector3;
import com.badlogic.gdx.math.Quaternion;
import com.badlogic.gdx.math.Matrix3;
import com.badlogic.gdx.math.Matrix4;

public class btRaycastVehicle extends btActionInterface {
  private long swigCPtr;

  protected btRaycastVehicle(long cPtr, boolean cMemoryOwn) {
    super(gdxBulletJNI.btRaycastVehicle_SWIGUpcast(cPtr), cMemoryOwn);
    swigCPtr = cPtr;
  }

  public static long getCPtr(btRaycastVehicle obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        gdxBulletJNI.delete_btRaycastVehicle(swigCPtr);
      }
      swigCPtr = 0;
    }
    super.delete();
  }

  public btRaycastVehicle(btVehicleTuning tuning, btRigidBody chassis, btVehicleRaycaster raycaster) {
    this(gdxBulletJNI.new_btRaycastVehicle(btVehicleTuning.getCPtr(tuning), tuning, btRigidBody.getCPtr(chassis), chassis, btVehicleRaycaster.getCPtr(raycaster), raycaster), true);
  }

  public Matrix4 getChassisWorldTransform() {
	return gdxBulletJNI.btRaycastVehicle_getChassisWorldTransform(swigCPtr, this);
}

  public float rayCast(btWheelInfo wheel) {
    return gdxBulletJNI.btRaycastVehicle_rayCast(swigCPtr, this, btWheelInfo.getCPtr(wheel), wheel);
  }

  public void updateVehicle(float step) {
    gdxBulletJNI.btRaycastVehicle_updateVehicle(swigCPtr, this, step);
  }

  public void resetSuspension() {
    gdxBulletJNI.btRaycastVehicle_resetSuspension(swigCPtr, this);
  }

  public float getSteeringValue(int wheel) {
    return gdxBulletJNI.btRaycastVehicle_getSteeringValue(swigCPtr, this, wheel);
  }

  public void setSteeringValue(float steering, int wheel) {
    gdxBulletJNI.btRaycastVehicle_setSteeringValue(swigCPtr, this, steering, wheel);
  }

  public void applyEngineForce(float force, int wheel) {
    gdxBulletJNI.btRaycastVehicle_applyEngineForce(swigCPtr, this, force, wheel);
  }

  public Matrix4 getWheelTransformWS(int wheelIndex) {
	return gdxBulletJNI.btRaycastVehicle_getWheelTransformWS(swigCPtr, this, wheelIndex);
}

  public void updateWheelTransform(int wheelIndex, boolean interpolatedTransform) {
    gdxBulletJNI.btRaycastVehicle_updateWheelTransform__SWIG_0(swigCPtr, this, wheelIndex, interpolatedTransform);
  }

  public void updateWheelTransform(int wheelIndex) {
    gdxBulletJNI.btRaycastVehicle_updateWheelTransform__SWIG_1(swigCPtr, this, wheelIndex);
  }

  public btWheelInfo addWheel(Vector3 connectionPointCS0, Vector3 wheelDirectionCS0, Vector3 wheelAxleCS, float suspensionRestLength, float wheelRadius, btVehicleTuning tuning, boolean isFrontWheel) {
    return new btWheelInfo(gdxBulletJNI.btRaycastVehicle_addWheel(swigCPtr, this, connectionPointCS0, wheelDirectionCS0, wheelAxleCS, suspensionRestLength, wheelRadius, btVehicleTuning.getCPtr(tuning), tuning, isFrontWheel), false);
  }

  public int getNumWheels() {
    return gdxBulletJNI.btRaycastVehicle_getNumWheels(swigCPtr, this);
  }

  public void setM_wheelInfo(SWIGTYPE_p_btAlignedObjectArrayT_btWheelInfo_t value) {
    gdxBulletJNI.btRaycastVehicle_m_wheelInfo_set(swigCPtr, this, SWIGTYPE_p_btAlignedObjectArrayT_btWheelInfo_t.getCPtr(value));
  }

  public SWIGTYPE_p_btAlignedObjectArrayT_btWheelInfo_t getM_wheelInfo() {
    long cPtr = gdxBulletJNI.btRaycastVehicle_m_wheelInfo_get(swigCPtr, this);
    return (cPtr == 0) ? null : new SWIGTYPE_p_btAlignedObjectArrayT_btWheelInfo_t(cPtr, false);
  }

  public btWheelInfo getWheelInfo(int index) {
    return new btWheelInfo(gdxBulletJNI.btRaycastVehicle_getWheelInfo__SWIG_0(swigCPtr, this, index), false);
  }

  public void updateWheelTransformsWS(btWheelInfo wheel, boolean interpolatedTransform) {
    gdxBulletJNI.btRaycastVehicle_updateWheelTransformsWS__SWIG_0(swigCPtr, this, btWheelInfo.getCPtr(wheel), wheel, interpolatedTransform);
  }

  public void updateWheelTransformsWS(btWheelInfo wheel) {
    gdxBulletJNI.btRaycastVehicle_updateWheelTransformsWS__SWIG_1(swigCPtr, this, btWheelInfo.getCPtr(wheel), wheel);
  }

  public void setBrake(float brake, int wheelIndex) {
    gdxBulletJNI.btRaycastVehicle_setBrake(swigCPtr, this, brake, wheelIndex);
  }

  public void setPitchControl(float pitch) {
    gdxBulletJNI.btRaycastVehicle_setPitchControl(swigCPtr, this, pitch);
  }

  public void updateSuspension(float deltaTime) {
    gdxBulletJNI.btRaycastVehicle_updateSuspension(swigCPtr, this, deltaTime);
  }

  public void updateFriction(float timeStep) {
    gdxBulletJNI.btRaycastVehicle_updateFriction(swigCPtr, this, timeStep);
  }

  public btRigidBody getRigidBody() {
    long cPtr = gdxBulletJNI.btRaycastVehicle_getRigidBody__SWIG_0(swigCPtr, this);
    return (cPtr == 0) ? null : new btRigidBody(cPtr, false);
  }

  public int getRightAxis() {
    return gdxBulletJNI.btRaycastVehicle_getRightAxis(swigCPtr, this);
  }

  public int getUpAxis() {
    return gdxBulletJNI.btRaycastVehicle_getUpAxis(swigCPtr, this);
  }

  public int getForwardAxis() {
    return gdxBulletJNI.btRaycastVehicle_getForwardAxis(swigCPtr, this);
  }

  public Vector3 getForwardVector() {
	return gdxBulletJNI.btRaycastVehicle_getForwardVector(swigCPtr, this);
}

  public float getCurrentSpeedKmHour() {
    return gdxBulletJNI.btRaycastVehicle_getCurrentSpeedKmHour(swigCPtr, this);
  }

  public void setCoordinateSystem(int rightIndex, int upIndex, int forwardIndex) {
    gdxBulletJNI.btRaycastVehicle_setCoordinateSystem(swigCPtr, this, rightIndex, upIndex, forwardIndex);
  }

  public int getUserConstraintType() {
    return gdxBulletJNI.btRaycastVehicle_getUserConstraintType(swigCPtr, this);
  }

  public void setUserConstraintType(int userConstraintType) {
    gdxBulletJNI.btRaycastVehicle_setUserConstraintType(swigCPtr, this, userConstraintType);
  }

  public void setUserConstraintId(int uid) {
    gdxBulletJNI.btRaycastVehicle_setUserConstraintId(swigCPtr, this, uid);
  }

  public int getUserConstraintId() {
    return gdxBulletJNI.btRaycastVehicle_getUserConstraintId(swigCPtr, this);
  }

}
