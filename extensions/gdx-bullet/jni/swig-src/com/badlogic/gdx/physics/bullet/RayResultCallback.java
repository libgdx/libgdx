/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.10
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package com.badlogic.gdx.physics.bullet;

import com.badlogic.gdx.math.Vector3;
import com.badlogic.gdx.math.Quaternion;
import com.badlogic.gdx.math.Matrix3;
import com.badlogic.gdx.math.Matrix4;

public class RayResultCallback extends BulletBase {
	private long swigCPtr;
	
	protected RayResultCallback(final String className, long cPtr, boolean cMemoryOwn) {
		super(className, cPtr, cMemoryOwn);
		swigCPtr = cPtr;
	}
	
	protected RayResultCallback(long cPtr, boolean cMemoryOwn) {
		this("RayResultCallback", cPtr, cMemoryOwn);
		construct();
	}
	
	@Override
	protected void reset(long cPtr, boolean cMemoryOwn) {
		if (!destroyed)
			destroy();
		super.reset(swigCPtr = cPtr, cMemoryOwn);
	}
	
	public static long getCPtr(RayResultCallback obj) {
		return (obj == null) ? 0 : obj.swigCPtr;
	}

	@Override
	protected void finalize() throws Throwable {
		if (!destroyed)
			destroy();
		super.finalize();
	}

  @Override protected synchronized void delete() {
		if (swigCPtr != 0) {
			if (swigCMemOwn) {
				swigCMemOwn = false;
				gdxBulletJNI.delete_RayResultCallback(swigCPtr);
			}
			swigCPtr = 0;
		}
		super.delete();
	}

  protected void swigDirectorDisconnect() {
    swigCMemOwn = false;
    delete();
  }

  public void swigReleaseOwnership() {
    swigCMemOwn = false;
    gdxBulletJNI.RayResultCallback_change_ownership(this, swigCPtr, false);
  }

  public void swigTakeOwnership() {
    swigCMemOwn = true;
    gdxBulletJNI.RayResultCallback_change_ownership(this, swigCPtr, true);
  }

  public void setClosestHitFraction(float value) {
    gdxBulletJNI.RayResultCallback_closestHitFraction_set(swigCPtr, this, value);
  }

  public float getClosestHitFraction() {
    return gdxBulletJNI.RayResultCallback_closestHitFraction_get(swigCPtr, this);
  }

  public void setCollisionObject(btCollisionObject value) {
    gdxBulletJNI.RayResultCallback_collisionObject_set(swigCPtr, this, btCollisionObject.getCPtr(value), value);
  }

  public btCollisionObject getCollisionObject() {
	return btCollisionObject.getInstance(gdxBulletJNI.RayResultCallback_collisionObject_get(swigCPtr, this), false);
}

  public void setCollisionFilterGroup(short value) {
    gdxBulletJNI.RayResultCallback_collisionFilterGroup_set(swigCPtr, this, value);
  }

  public short getCollisionFilterGroup() {
    return gdxBulletJNI.RayResultCallback_collisionFilterGroup_get(swigCPtr, this);
  }

  public void setCollisionFilterMask(short value) {
    gdxBulletJNI.RayResultCallback_collisionFilterMask_set(swigCPtr, this, value);
  }

  public short getCollisionFilterMask() {
    return gdxBulletJNI.RayResultCallback_collisionFilterMask_get(swigCPtr, this);
  }

  public void setFlags(long value) {
    gdxBulletJNI.RayResultCallback_flags_set(swigCPtr, this, value);
  }

  public long getFlags() {
    return gdxBulletJNI.RayResultCallback_flags_get(swigCPtr, this);
  }

  public boolean hasHit() {
    return gdxBulletJNI.RayResultCallback_hasHit(swigCPtr, this);
  }

  public RayResultCallback() {
    this(gdxBulletJNI.new_RayResultCallback(), true);
    gdxBulletJNI.RayResultCallback_director_connect(this, swigCPtr, swigCMemOwn, true);
  }

  public boolean needsCollision(btBroadphaseProxy proxy0) {
    return (getClass() == RayResultCallback.class) ? gdxBulletJNI.RayResultCallback_needsCollision(swigCPtr, this, btBroadphaseProxy.getCPtr(proxy0), proxy0) : gdxBulletJNI.RayResultCallback_needsCollisionSwigExplicitRayResultCallback(swigCPtr, this, btBroadphaseProxy.getCPtr(proxy0), proxy0);
  }

  public float addSingleResult(LocalRayResult rayResult, boolean normalInWorldSpace) {
    return gdxBulletJNI.RayResultCallback_addSingleResult(swigCPtr, this, LocalRayResult.getCPtr(rayResult), rayResult, normalInWorldSpace);
  }

}
