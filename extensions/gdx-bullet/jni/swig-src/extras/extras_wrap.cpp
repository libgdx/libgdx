/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.12
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */


#ifndef SWIGJAVA
#define SWIGJAVA
#endif

#define SWIG_DIRECTORS


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif


/* Fix for jlong on some versions of gcc on Windows */
#if defined(__GNUC__) && !defined(__INTEL_COMPILER)
  typedef long long __int64;
#endif

/* Fix for jlong on 64-bit x86 Solaris */
#if defined(__x86_64)
# ifdef _LP64
#   undef _LP64
# endif
#endif

#include <jni.h>
#include <stdlib.h>
#include <string.h>


/* Support for throwing Java exceptions */
typedef enum {
  SWIG_JavaOutOfMemoryError = 1, 
  SWIG_JavaIOException, 
  SWIG_JavaRuntimeException, 
  SWIG_JavaIndexOutOfBoundsException,
  SWIG_JavaArithmeticException,
  SWIG_JavaIllegalArgumentException,
  SWIG_JavaNullPointerException,
  SWIG_JavaDirectorPureVirtual,
  SWIG_JavaUnknownError
} SWIG_JavaExceptionCodes;

typedef struct {
  SWIG_JavaExceptionCodes code;
  const char *java_exception;
} SWIG_JavaExceptions_t;


static void SWIGUNUSED SWIG_JavaThrowException(JNIEnv *jenv, SWIG_JavaExceptionCodes code, const char *msg) {
  jclass excep;
  static const SWIG_JavaExceptions_t java_exceptions[] = {
    { SWIG_JavaOutOfMemoryError, "java/lang/OutOfMemoryError" },
    { SWIG_JavaIOException, "java/io/IOException" },
    { SWIG_JavaRuntimeException, "java/lang/RuntimeException" },
    { SWIG_JavaIndexOutOfBoundsException, "java/lang/IndexOutOfBoundsException" },
    { SWIG_JavaArithmeticException, "java/lang/ArithmeticException" },
    { SWIG_JavaIllegalArgumentException, "java/lang/IllegalArgumentException" },
    { SWIG_JavaNullPointerException, "java/lang/NullPointerException" },
    { SWIG_JavaDirectorPureVirtual, "java/lang/RuntimeException" },
    { SWIG_JavaUnknownError,  "java/lang/UnknownError" },
    { (SWIG_JavaExceptionCodes)0,  "java/lang/UnknownError" }
  };
  const SWIG_JavaExceptions_t *except_ptr = java_exceptions;

  while (except_ptr->code != code && except_ptr->code)
    except_ptr++;

  jenv->ExceptionClear();
  excep = jenv->FindClass(except_ptr->java_exception);
  if (excep)
    jenv->ThrowNew(excep, msg);
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, msg); return nullreturn; } else

/* -----------------------------------------------------------------------------
 * director_common.swg
 *
 * This file contains support for director classes which is common between
 * languages.
 * ----------------------------------------------------------------------------- */

/*
  Use -DSWIG_DIRECTOR_STATIC if you prefer to avoid the use of the
  'Swig' namespace. This could be useful for multi-modules projects.
*/
#ifdef SWIG_DIRECTOR_STATIC
/* Force anonymous (static) namespace */
#define Swig
#endif
/* -----------------------------------------------------------------------------
 * director.swg
 *
 * This file contains support for director classes so that Java proxy
 * methods can be called from C++.
 * ----------------------------------------------------------------------------- */

#if defined(DEBUG_DIRECTOR_OWNED) || defined(DEBUG_DIRECTOR_EXCEPTION)
#include <iostream>
#endif

#include <exception>

namespace Swig {

  /* Java object wrapper */
  class JObjectWrapper {
  public:
    JObjectWrapper() : jthis_(NULL), weak_global_(true) {
    }

    ~JObjectWrapper() {
      jthis_ = NULL;
      weak_global_ = true;
    }

    bool set(JNIEnv *jenv, jobject jobj, bool mem_own, bool weak_global) {
      if (!jthis_) {
        weak_global_ = !mem_own; // hold as weak global if explicitly requested or not owned
        if (jobj)
          jthis_ = weak_global_ ? jenv->NewWeakGlobalRef(jobj) : jenv->NewGlobalRef(jobj);
#if defined(DEBUG_DIRECTOR_OWNED)
        std::cout << "JObjectWrapper::set(" << jobj << ", " << (weak_global ? "weak_global" : "global_ref") << ") -> " << jthis_ << std::endl;
#endif
        return true;
      } else {
#if defined(DEBUG_DIRECTOR_OWNED)
        std::cout << "JObjectWrapper::set(" << jobj << ", " << (weak_global ? "weak_global" : "global_ref") << ") -> already set" << std::endl;
#endif
        return false;
      }
    }

    jobject get(JNIEnv *jenv) const {
#if defined(DEBUG_DIRECTOR_OWNED)
      std::cout << "JObjectWrapper::get(";
      if (jthis_)
        std::cout << jthis_;
      else
        std::cout << "null";
      std::cout << ") -> return new local ref" << std::endl;
#endif
      return (jthis_ ? jenv->NewLocalRef(jthis_) : jthis_);
    }

    void release(JNIEnv *jenv) {
#if defined(DEBUG_DIRECTOR_OWNED)
      std::cout << "JObjectWrapper::release(" << jthis_ << "): " << (weak_global_ ? "weak global ref" : "global ref") << std::endl;
#endif
      if (jthis_) {
        if (weak_global_) {
          if (jenv->IsSameObject(jthis_, NULL) == JNI_FALSE)
            jenv->DeleteWeakGlobalRef((jweak)jthis_);
        } else
          jenv->DeleteGlobalRef(jthis_);
      }

      jthis_ = NULL;
      weak_global_ = true;
    }

    /* Only call peek if you know what you are doing wrt to weak/global references */
    jobject peek() {
      return jthis_;
    }

    /* Java proxy releases ownership of C++ object, C++ object is now
       responsible for destruction (creates NewGlobalRef to pin Java proxy) */
    void java_change_ownership(JNIEnv *jenv, jobject jself, bool take_or_release) {
      if (take_or_release) {  /* Java takes ownership of C++ object's lifetime. */
        if (!weak_global_) {
          jenv->DeleteGlobalRef(jthis_);
          jthis_ = jenv->NewWeakGlobalRef(jself);
          weak_global_ = true;
        }
      } else {
	/* Java releases ownership of C++ object's lifetime */
        if (weak_global_) {
          jenv->DeleteWeakGlobalRef((jweak)jthis_);
          jthis_ = jenv->NewGlobalRef(jself);
          weak_global_ = false;
        }
      }
    }

  private:
    /* pointer to Java object */
    jobject jthis_;
    /* Local or global reference flag */
    bool weak_global_;
  };

  /* Local JNI reference deleter */
  class LocalRefGuard {
    JNIEnv *jenv_;
    jobject jobj_;

    // non-copyable
    LocalRefGuard(const LocalRefGuard &);
    LocalRefGuard &operator=(const LocalRefGuard &);
  public:
    LocalRefGuard(JNIEnv *jenv, jobject jobj): jenv_(jenv), jobj_(jobj) {}
    ~LocalRefGuard() {
      if (jobj_)
        jenv_->DeleteLocalRef(jobj_);
    }
  };

  /* director base class */
  class Director {
    /* pointer to Java virtual machine */
    JavaVM *swig_jvm_;

  protected:
#if defined (_MSC_VER) && (_MSC_VER<1300)
    class JNIEnvWrapper;
    friend class JNIEnvWrapper;
#endif
    /* Utility class for managing the JNI environment */
    class JNIEnvWrapper {
      const Director *director_;
      JNIEnv *jenv_;
      int env_status;
    public:
      JNIEnvWrapper(const Director *director) : director_(director), jenv_(0), env_status(0) {
#if defined(__ANDROID__)
        JNIEnv **jenv = &jenv_;
#else
        void **jenv = (void **)&jenv_;
#endif
        env_status = director_->swig_jvm_->GetEnv((void **)&jenv_, JNI_VERSION_1_2);
#if defined(SWIG_JAVA_ATTACH_CURRENT_THREAD_AS_DAEMON)
        // Attach a daemon thread to the JVM. Useful when the JVM should not wait for
        // the thread to exit upon shutdown. Only for jdk-1.4 and later.
        director_->swig_jvm_->AttachCurrentThreadAsDaemon(jenv, NULL);
#else
        director_->swig_jvm_->AttachCurrentThread(jenv, NULL);
#endif
      }
      ~JNIEnvWrapper() {
#if !defined(SWIG_JAVA_NO_DETACH_CURRENT_THREAD)
        // Some JVMs, eg jdk-1.4.2 and lower on Solaris have a bug and crash with the DetachCurrentThread call.
        // However, without this call, the JVM hangs on exit when the thread was not created by the JVM and creates a memory leak.
        if (env_status == JNI_EDETACHED)
          director_->swig_jvm_->DetachCurrentThread();
#endif
      }
      JNIEnv *getJNIEnv() const {
        return jenv_;
      }
    };

    /* Java object wrapper */
    JObjectWrapper swig_self_;

    /* Disconnect director from Java object */
    void swig_disconnect_director_self(const char *disconn_method) {
      JNIEnvWrapper jnienv(this) ;
      JNIEnv *jenv = jnienv.getJNIEnv() ;
      jobject jobj = swig_self_.get(jenv);
      LocalRefGuard ref_deleter(jenv, jobj);
#if defined(DEBUG_DIRECTOR_OWNED)
      std::cout << "Swig::Director::disconnect_director_self(" << jobj << ")" << std::endl;
#endif
      if (jobj && jenv->IsSameObject(jobj, NULL) == JNI_FALSE) {
        jmethodID disconn_meth = jenv->GetMethodID(jenv->GetObjectClass(jobj), disconn_method, "()V");
        if (disconn_meth) {
#if defined(DEBUG_DIRECTOR_OWNED)
          std::cout << "Swig::Director::disconnect_director_self upcall to " << disconn_method << std::endl;
#endif
          jenv->CallVoidMethod(jobj, disconn_meth);
        }
      }
    }

  public:
    Director(JNIEnv *jenv) : swig_jvm_((JavaVM *) NULL), swig_self_() {
      /* Acquire the Java VM pointer */
      jenv->GetJavaVM(&swig_jvm_);
    }

    virtual ~Director() {
      JNIEnvWrapper jnienv(this) ;
      JNIEnv *jenv = jnienv.getJNIEnv() ;
      swig_self_.release(jenv);
    }

    bool swig_set_self(JNIEnv *jenv, jobject jself, bool mem_own, bool weak_global) {
      return swig_self_.set(jenv, jself, mem_own, weak_global);
    }

    jobject swig_get_self(JNIEnv *jenv) const {
      return swig_self_.get(jenv);
    }

    // Change C++ object's ownership, relative to Java
    void swig_java_change_ownership(JNIEnv *jenv, jobject jself, bool take_or_release) {
      swig_self_.java_change_ownership(jenv, jself, take_or_release);
    }
  };

  // Zero initialized bool array
  template<size_t N> class BoolArray {
    bool array_[N];
  public:
    BoolArray() {
      memset(array_, 0, sizeof(array_));
    }
    bool& operator[](size_t n) {
      return array_[n];
    }
    bool operator[](size_t n) const {
      return array_[n];
    }
  };

  // Utility classes and functions for exception handling.

  // Simple holder for a Java string during exception handling, providing access to a c-style string
  class JavaString {
  public:
    JavaString(JNIEnv *jenv, jstring jstr) : jenv_(jenv), jstr_(jstr), cstr_(0) {
      if (jenv_ && jstr_)
	cstr_ = (const char *) jenv_->GetStringUTFChars(jstr_, NULL);
    }

    ~JavaString() {
      if (jenv_ && jstr_ && cstr_)
	jenv_->ReleaseStringUTFChars(jstr_, cstr_);
    }

    const char *c_str(const char *null_string = "null JavaString") const {
      return cstr_ ? cstr_ : null_string;
    }

  private:
    // non-copyable
    JavaString(const JavaString &);
    JavaString &operator=(const JavaString &);

    JNIEnv *jenv_;
    jstring jstr_;
    const char *cstr_;
  };

  // Helper class to extract the exception message from a Java throwable
  class JavaExceptionMessage {
  public:
    JavaExceptionMessage(JNIEnv *jenv, jthrowable throwable) : message_(jenv, exceptionMessageFromThrowable(jenv, throwable)) {
    }

    const char *message() const {
      return message_.c_str("Could not get exception message in JavaExceptionMessage");
    }

  private:
    // non-copyable
    JavaExceptionMessage(const JavaExceptionMessage &);
    JavaExceptionMessage &operator=(const JavaExceptionMessage &);

    // Get exception message by calling Java method Throwable.getMessage()
    static jstring exceptionMessageFromThrowable(JNIEnv *jenv, jthrowable throwable) {
      jstring jmsg = NULL;
      if (jenv && throwable) {
	jenv->ExceptionClear(); // Cannot invoke methods with any pending exceptions
	jclass throwclz = jenv->GetObjectClass(throwable);
	if (throwclz) {
	  // All Throwable classes have a getMessage() method, so call it to extract the exception message
	  jmethodID getMessageMethodID = jenv->GetMethodID(throwclz, "getMessage", "()Ljava/lang/String;");
	  if (getMessageMethodID)
	    jmsg = (jstring)jenv->CallObjectMethod(throwable, getMessageMethodID);
	}
	if (jmsg == NULL && jenv->ExceptionCheck())
	  jenv->ExceptionClear();
      }
      return jmsg;
    }

    JavaString message_;
  };

  // C++ Exception class for handling Java exceptions thrown during a director method Java upcall
  class DirectorException : public std::exception {
  public:

    // Construct exception from a Java throwable
    DirectorException(JNIEnv *jenv, jthrowable throwable) : classname_(0), msg_(0) {

      // Call Java method Object.getClass().getName() to obtain the throwable's class name (delimited by '/')
      if (throwable) {
	jclass throwclz = jenv->GetObjectClass(throwable);
	if (throwclz) {
	  jclass clzclz = jenv->GetObjectClass(throwclz);
	  if (clzclz) {
	    jmethodID getNameMethodID = jenv->GetMethodID(clzclz, "getName", "()Ljava/lang/String;");
	    if (getNameMethodID) {
	      jstring jstr_classname = (jstring)(jenv->CallObjectMethod(throwclz, getNameMethodID));
              // Copy strings, since there is no guarantee that jenv will be active when handled
              if (jstr_classname) {
                JavaString jsclassname(jenv, jstr_classname);
                const char *classname = jsclassname.c_str(0);
                if (classname)
                  classname_ = copypath(classname);
              }
	    }
	  }
	}
      }

      JavaExceptionMessage exceptionmsg(jenv, throwable);
      msg_ = copystr(exceptionmsg.message());
    }

    // More general constructor for handling as a java.lang.RuntimeException
    DirectorException(const char *msg) : classname_(0), msg_(copystr(msg ? msg : "Unspecified DirectorException message")) {
    }

    ~DirectorException() throw() {
      delete[] classname_;
      delete[] msg_;
    }

    const char *what() const throw() {
      return msg_;
    }

    // Reconstruct and raise/throw the Java Exception that caused the DirectorException
    // Note that any error in the JNI exception handling results in a Java RuntimeException
    void raiseJavaException(JNIEnv *jenv) const {
      if (jenv) {
	jenv->ExceptionClear();

	jmethodID ctorMethodID = 0;
	jclass throwableclass = 0;
        if (classname_) {
          throwableclass = jenv->FindClass(classname_);
          if (throwableclass)
            ctorMethodID = jenv->GetMethodID(throwableclass, "<init>", "(Ljava/lang/String;)V");
	}

	if (ctorMethodID) {
	  jenv->ThrowNew(throwableclass, what());
	} else {
	  SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, what());
	}
      }
    }

  private:
    static char *copypath(const char *srcmsg) {
      char *target = copystr(srcmsg);
      for (char *c=target; *c; ++c) {
        if ('.' == *c)
          *c = '/';
      }
      return target;
    }

    static char *copystr(const char *srcmsg) {
      char *target = 0;
      if (srcmsg) {
	size_t msglen = strlen(srcmsg) + 1;
	target = new char[msglen];
	strncpy(target, srcmsg, msglen);
      }
      return target;
    }

    const char *classname_;
    const char *msg_;
  };

  // Helper method to determine if a Java throwable matches a particular Java class type
  SWIGINTERN inline bool ExceptionMatches(JNIEnv *jenv, jthrowable throwable, const char *classname) {
    bool matches = false;

    if (throwable && jenv && classname) {
      // Exceptions need to be cleared for correct behavior.
      // The caller of ExceptionMatches should restore pending exceptions if desired -
      // the caller already has the throwable.
      jenv->ExceptionClear();

      jclass clz = jenv->FindClass(classname);
      if (clz) {
	jclass classclz = jenv->GetObjectClass(clz);
	jmethodID isInstanceMethodID = jenv->GetMethodID(classclz, "isInstance", "(Ljava/lang/Object;)Z");
	if (isInstanceMethodID) {
	  matches = jenv->CallBooleanMethod(clz, isInstanceMethodID, throwable) != 0;
	}
      }

#if defined(DEBUG_DIRECTOR_EXCEPTION)
      if (jenv->ExceptionCheck()) {
        // Typically occurs when an invalid classname argument is passed resulting in a ClassNotFoundException
        JavaExceptionMessage exc(jenv, jenv->ExceptionOccurred());
        std::cout << "Error: ExceptionMatches: class '" << classname << "' : " << exc.message() << std::endl;
      }
#endif
    }
    return matches;
  }
}

namespace Swig {
  namespace {
    jclass jclass_ExtrasJNI = NULL;
    jmethodID director_method_ids[3];
  }
}

#if defined(SWIG_NOINCLUDE) || defined(SWIG_NOARRAYS)


static int SWIG_JavaArrayInBool (JNIEnv *jenv, jboolean **jarr, bool **carr, jbooleanArray input);
static void SWIG_JavaArrayArgoutBool (JNIEnv *jenv, jboolean *jarr, bool *carr, jbooleanArray input);
static jbooleanArray SWIG_JavaArrayOutBool (JNIEnv *jenv, bool *result, jsize sz);


static int SWIG_JavaArrayInSchar (JNIEnv *jenv, jbyte **jarr, signed char **carr, jbyteArray input);
static void SWIG_JavaArrayArgoutSchar (JNIEnv *jenv, jbyte *jarr, signed char *carr, jbyteArray input);
static jbyteArray SWIG_JavaArrayOutSchar (JNIEnv *jenv, signed char *result, jsize sz);


static int SWIG_JavaArrayInUchar (JNIEnv *jenv, jshort **jarr, unsigned char **carr, jshortArray input);
static void SWIG_JavaArrayArgoutUchar (JNIEnv *jenv, jshort *jarr, unsigned char *carr, jshortArray input);
static jshortArray SWIG_JavaArrayOutUchar (JNIEnv *jenv, unsigned char *result, jsize sz);


static int SWIG_JavaArrayInShort (JNIEnv *jenv, jshort **jarr, short **carr, jshortArray input);
static void SWIG_JavaArrayArgoutShort (JNIEnv *jenv, jshort *jarr, short *carr, jshortArray input);
static jshortArray SWIG_JavaArrayOutShort (JNIEnv *jenv, short *result, jsize sz);


static int SWIG_JavaArrayInUshort (JNIEnv *jenv, jint **jarr, unsigned short **carr, jintArray input);
static void SWIG_JavaArrayArgoutUshort (JNIEnv *jenv, jint *jarr, unsigned short *carr, jintArray input);
static jintArray SWIG_JavaArrayOutUshort (JNIEnv *jenv, unsigned short *result, jsize sz);


static int SWIG_JavaArrayInInt (JNIEnv *jenv, jint **jarr, int **carr, jintArray input);
static void SWIG_JavaArrayArgoutInt (JNIEnv *jenv, jint *jarr, int *carr, jintArray input);
static jintArray SWIG_JavaArrayOutInt (JNIEnv *jenv, int *result, jsize sz);


static int SWIG_JavaArrayInUint (JNIEnv *jenv, jlong **jarr, unsigned int **carr, jlongArray input);
static void SWIG_JavaArrayArgoutUint (JNIEnv *jenv, jlong *jarr, unsigned int *carr, jlongArray input);
static jlongArray SWIG_JavaArrayOutUint (JNIEnv *jenv, unsigned int *result, jsize sz);


static int SWIG_JavaArrayInLong (JNIEnv *jenv, jint **jarr, long **carr, jintArray input);
static void SWIG_JavaArrayArgoutLong (JNIEnv *jenv, jint *jarr, long *carr, jintArray input);
static jintArray SWIG_JavaArrayOutLong (JNIEnv *jenv, long *result, jsize sz);


static int SWIG_JavaArrayInUlong (JNIEnv *jenv, jlong **jarr, unsigned long **carr, jlongArray input);
static void SWIG_JavaArrayArgoutUlong (JNIEnv *jenv, jlong *jarr, unsigned long *carr, jlongArray input);
static jlongArray SWIG_JavaArrayOutUlong (JNIEnv *jenv, unsigned long *result, jsize sz);


static int SWIG_JavaArrayInLonglong (JNIEnv *jenv, jlong **jarr, jlong **carr, jlongArray input);
static void SWIG_JavaArrayArgoutLonglong (JNIEnv *jenv, jlong *jarr, jlong *carr, jlongArray input);
static jlongArray SWIG_JavaArrayOutLonglong (JNIEnv *jenv, jlong *result, jsize sz);


static int SWIG_JavaArrayInFloat (JNIEnv *jenv, jfloat **jarr, float **carr, jfloatArray input);
static void SWIG_JavaArrayArgoutFloat (JNIEnv *jenv, jfloat *jarr, float *carr, jfloatArray input);
static jfloatArray SWIG_JavaArrayOutFloat (JNIEnv *jenv, float *result, jsize sz);


static int SWIG_JavaArrayInDouble (JNIEnv *jenv, jdouble **jarr, double **carr, jdoubleArray input);
static void SWIG_JavaArrayArgoutDouble (JNIEnv *jenv, jdouble *jarr, double *carr, jdoubleArray input);
static jdoubleArray SWIG_JavaArrayOutDouble (JNIEnv *jenv, double *result, jsize sz);


#else


/* bool[] support */
static int SWIG_JavaArrayInBool (JNIEnv *jenv, jboolean **jarr, bool **carr, jbooleanArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetBooleanArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new bool[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = ((*jarr)[i] != 0);
  return 1;
}

static void SWIG_JavaArrayArgoutBool (JNIEnv *jenv, jboolean *jarr, bool *carr, jbooleanArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jboolean)carr[i];
  jenv->ReleaseBooleanArrayElements(input, jarr, 0);
}

static jbooleanArray SWIG_JavaArrayOutBool (JNIEnv *jenv, bool *result, jsize sz) {
  jboolean *arr;
  int i;
  jbooleanArray jresult = jenv->NewBooleanArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetBooleanArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jboolean)result[i];
  jenv->ReleaseBooleanArrayElements(jresult, arr, 0);
  return jresult;
}


/* signed char[] support */
static int SWIG_JavaArrayInSchar (JNIEnv *jenv, jbyte **jarr, signed char **carr, jbyteArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetByteArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new signed char[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (signed char)(*jarr)[i];
  return 1;
}

static void SWIG_JavaArrayArgoutSchar (JNIEnv *jenv, jbyte *jarr, signed char *carr, jbyteArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jbyte)carr[i];
  jenv->ReleaseByteArrayElements(input, jarr, 0);
}

static jbyteArray SWIG_JavaArrayOutSchar (JNIEnv *jenv, signed char *result, jsize sz) {
  jbyte *arr;
  int i;
  jbyteArray jresult = jenv->NewByteArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetByteArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jbyte)result[i];
  jenv->ReleaseByteArrayElements(jresult, arr, 0);
  return jresult;
}


/* unsigned char[] support */
static int SWIG_JavaArrayInUchar (JNIEnv *jenv, jshort **jarr, unsigned char **carr, jshortArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetShortArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new unsigned char[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (unsigned char)(*jarr)[i];
  return 1;
}

static void SWIG_JavaArrayArgoutUchar (JNIEnv *jenv, jshort *jarr, unsigned char *carr, jshortArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jshort)carr[i];
  jenv->ReleaseShortArrayElements(input, jarr, 0);
}

static jshortArray SWIG_JavaArrayOutUchar (JNIEnv *jenv, unsigned char *result, jsize sz) {
  jshort *arr;
  int i;
  jshortArray jresult = jenv->NewShortArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetShortArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jshort)result[i];
  jenv->ReleaseShortArrayElements(jresult, arr, 0);
  return jresult;
}


/* short[] support */
static int SWIG_JavaArrayInShort (JNIEnv *jenv, jshort **jarr, short **carr, jshortArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetShortArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new short[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (short)(*jarr)[i];
  return 1;
}

static void SWIG_JavaArrayArgoutShort (JNIEnv *jenv, jshort *jarr, short *carr, jshortArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jshort)carr[i];
  jenv->ReleaseShortArrayElements(input, jarr, 0);
}

static jshortArray SWIG_JavaArrayOutShort (JNIEnv *jenv, short *result, jsize sz) {
  jshort *arr;
  int i;
  jshortArray jresult = jenv->NewShortArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetShortArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jshort)result[i];
  jenv->ReleaseShortArrayElements(jresult, arr, 0);
  return jresult;
}


/* unsigned short[] support */
static int SWIG_JavaArrayInUshort (JNIEnv *jenv, jint **jarr, unsigned short **carr, jintArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetIntArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new unsigned short[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (unsigned short)(*jarr)[i];
  return 1;
}

static void SWIG_JavaArrayArgoutUshort (JNIEnv *jenv, jint *jarr, unsigned short *carr, jintArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jint)carr[i];
  jenv->ReleaseIntArrayElements(input, jarr, 0);
}

static jintArray SWIG_JavaArrayOutUshort (JNIEnv *jenv, unsigned short *result, jsize sz) {
  jint *arr;
  int i;
  jintArray jresult = jenv->NewIntArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetIntArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jint)result[i];
  jenv->ReleaseIntArrayElements(jresult, arr, 0);
  return jresult;
}


/* int[] support */
static int SWIG_JavaArrayInInt (JNIEnv *jenv, jint **jarr, int **carr, jintArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetIntArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new int[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (int)(*jarr)[i];
  return 1;
}

static void SWIG_JavaArrayArgoutInt (JNIEnv *jenv, jint *jarr, int *carr, jintArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jint)carr[i];
  jenv->ReleaseIntArrayElements(input, jarr, 0);
}

static jintArray SWIG_JavaArrayOutInt (JNIEnv *jenv, int *result, jsize sz) {
  jint *arr;
  int i;
  jintArray jresult = jenv->NewIntArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetIntArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jint)result[i];
  jenv->ReleaseIntArrayElements(jresult, arr, 0);
  return jresult;
}


/* unsigned int[] support */
static int SWIG_JavaArrayInUint (JNIEnv *jenv, jlong **jarr, unsigned int **carr, jlongArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetLongArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new unsigned int[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (unsigned int)(*jarr)[i];
  return 1;
}

static void SWIG_JavaArrayArgoutUint (JNIEnv *jenv, jlong *jarr, unsigned int *carr, jlongArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jlong)carr[i];
  jenv->ReleaseLongArrayElements(input, jarr, 0);
}

static jlongArray SWIG_JavaArrayOutUint (JNIEnv *jenv, unsigned int *result, jsize sz) {
  jlong *arr;
  int i;
  jlongArray jresult = jenv->NewLongArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetLongArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jlong)result[i];
  jenv->ReleaseLongArrayElements(jresult, arr, 0);
  return jresult;
}


/* long[] support */
static int SWIG_JavaArrayInLong (JNIEnv *jenv, jint **jarr, long **carr, jintArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetIntArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new long[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (long)(*jarr)[i];
  return 1;
}

static void SWIG_JavaArrayArgoutLong (JNIEnv *jenv, jint *jarr, long *carr, jintArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jint)carr[i];
  jenv->ReleaseIntArrayElements(input, jarr, 0);
}

static jintArray SWIG_JavaArrayOutLong (JNIEnv *jenv, long *result, jsize sz) {
  jint *arr;
  int i;
  jintArray jresult = jenv->NewIntArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetIntArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jint)result[i];
  jenv->ReleaseIntArrayElements(jresult, arr, 0);
  return jresult;
}


/* unsigned long[] support */
static int SWIG_JavaArrayInUlong (JNIEnv *jenv, jlong **jarr, unsigned long **carr, jlongArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetLongArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new unsigned long[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (unsigned long)(*jarr)[i];
  return 1;
}

static void SWIG_JavaArrayArgoutUlong (JNIEnv *jenv, jlong *jarr, unsigned long *carr, jlongArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jlong)carr[i];
  jenv->ReleaseLongArrayElements(input, jarr, 0);
}

static jlongArray SWIG_JavaArrayOutUlong (JNIEnv *jenv, unsigned long *result, jsize sz) {
  jlong *arr;
  int i;
  jlongArray jresult = jenv->NewLongArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetLongArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jlong)result[i];
  jenv->ReleaseLongArrayElements(jresult, arr, 0);
  return jresult;
}


/* jlong[] support */
static int SWIG_JavaArrayInLonglong (JNIEnv *jenv, jlong **jarr, jlong **carr, jlongArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetLongArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new jlong[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (jlong)(*jarr)[i];
  return 1;
}

static void SWIG_JavaArrayArgoutLonglong (JNIEnv *jenv, jlong *jarr, jlong *carr, jlongArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jlong)carr[i];
  jenv->ReleaseLongArrayElements(input, jarr, 0);
}

static jlongArray SWIG_JavaArrayOutLonglong (JNIEnv *jenv, jlong *result, jsize sz) {
  jlong *arr;
  int i;
  jlongArray jresult = jenv->NewLongArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetLongArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jlong)result[i];
  jenv->ReleaseLongArrayElements(jresult, arr, 0);
  return jresult;
}


/* float[] support */
static int SWIG_JavaArrayInFloat (JNIEnv *jenv, jfloat **jarr, float **carr, jfloatArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetFloatArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new float[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (float)(*jarr)[i];
  return 1;
}

static void SWIG_JavaArrayArgoutFloat (JNIEnv *jenv, jfloat *jarr, float *carr, jfloatArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jfloat)carr[i];
  jenv->ReleaseFloatArrayElements(input, jarr, 0);
}

static jfloatArray SWIG_JavaArrayOutFloat (JNIEnv *jenv, float *result, jsize sz) {
  jfloat *arr;
  int i;
  jfloatArray jresult = jenv->NewFloatArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetFloatArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jfloat)result[i];
  jenv->ReleaseFloatArrayElements(jresult, arr, 0);
  return jresult;
}


/* double[] support */
static int SWIG_JavaArrayInDouble (JNIEnv *jenv, jdouble **jarr, double **carr, jdoubleArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetDoubleArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new double[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (double)(*jarr)[i];
  return 1;
}

static void SWIG_JavaArrayArgoutDouble (JNIEnv *jenv, jdouble *jarr, double *carr, jdoubleArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jdouble)carr[i];
  jenv->ReleaseDoubleArrayElements(input, jarr, 0);
}

static jdoubleArray SWIG_JavaArrayOutDouble (JNIEnv *jenv, double *result, jsize sz) {
  jdouble *arr;
  int i;
  jdoubleArray jresult = jenv->NewDoubleArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetDoubleArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jdouble)result[i];
  jenv->ReleaseDoubleArrayElements(jresult, arr, 0);
  return jresult;
}


#endif


#include <gdx/common/jniHelpers.h>


#include <stdint.h>


#include <gdx/linearmath/mathtypes.h>
#include <LinearMath/btVector3.h>
#include <LinearMath/btQuaternion.h>
#include <LinearMath/btMatrix3x3.h>
#include <LinearMath/btTransform.h>


#include <BulletWorldImporter/btWorldImporter.h>



	/* Gets a global ref to the temp class.  Do not release this. */
	SWIGINTERN inline jclass gdx_getTempClassVector3(JNIEnv * jenv) {
	  static jclass cls = NULL;
	  if (cls == NULL) {
		cls = (jclass) jenv->NewGlobalRef(jenv->FindClass("com/badlogic/gdx/physics/bullet/linearmath/LinearMath"));
	  }
	  return cls;
	}
	
	SWIGINTERN inline jobject gdx_takePoolObjectVector3(JNIEnv * jenv, const char * poolName) {
	  jclass tempClass = gdx_getTempClassVector3(jenv);
	  
	  static jfieldID poolField = NULL;
	  if (poolField == NULL) {
		poolField = jenv->GetStaticFieldID(tempClass, poolName, "Lcom/badlogic/gdx/utils/Pool;");
	  }
	  
	  jobject poolObject = jenv->GetStaticObjectField(tempClass, poolField);
	  jclass poolClass = jenv->GetObjectClass(poolObject);
	  
	  static jmethodID obtainMethod = NULL;
	  if (obtainMethod == NULL) {
		obtainMethod = (jmethodID) jenv->GetMethodID(poolClass, "obtain", "()Ljava/lang/Object;");
	  }
	  
	  jobject ret = jenv->CallObjectMethod(poolObject, obtainMethod);
	
	  jenv->DeleteLocalRef(poolObject);
	  jenv->DeleteLocalRef(poolClass);
	
	  return ret;
	}
	
	SWIGINTERN inline void gdx_releasePoolObjectVector3(JNIEnv * jenv, const char * poolName, jobject obj) {
	  jclass tempClass = gdx_getTempClassVector3(jenv);
	  
	  static jfieldID poolField = NULL;
	  if (poolField == NULL) {
		poolField = jenv->GetStaticFieldID(tempClass, poolName, "Lcom/badlogic/gdx/utils/Pool;");
	  }
	  
	  jobject poolObject = jenv->GetStaticObjectField(tempClass, poolField);
	  jclass poolClass = jenv->GetObjectClass(poolObject);
	  
	  static jmethodID freeMethod = NULL;
	  if (freeMethod == NULL) {
		freeMethod = (jmethodID) jenv->GetMethodID(poolClass, "free", "(Ljava/lang/Object;)V");
	  }
	  
	  jenv->CallVoidMethod(poolObject, freeMethod, obj);
	  
	  jenv->DeleteLocalRef(poolObject);
	  jenv->DeleteLocalRef(poolClass);
	  jenv->DeleteLocalRef(obj);
	}
	
	/*
	 * A simple RAII wrapper to release jobjects we obtain from pools in 
	 * directorin typemaps.  SWIG doesn't have hooks to release them after
	 * they're used. 
	 */
	class gdxPoolAutoReleaseVector3 {
	private:
	  JNIEnv * jenv;
	  const char * poolName;
	  jobject obj;
	public:
	  gdxPoolAutoReleaseVector3(JNIEnv * jenv, const char * poolName, jobject obj) : 
		jenv(jenv), poolName(poolName), obj(obj) { };
	  virtual ~gdxPoolAutoReleaseVector3() {
		gdx_releasePoolObjectVector3(this->jenv, this->poolName, this->obj);
	  };
	};


	
// Workaround for some strange swig behaviour


	/* Gets a global ref to the temp class's Return Vector3.  Do not release this. */ 
	SWIGINTERN inline jobject gdx_getReturnVector3(JNIEnv * jenv) {
	  static jobject ret = NULL;
	  if (ret == NULL) {
	    jclass tempClass = gdx_getTempClassVector3(jenv);
	    jfieldID field = jenv->GetStaticFieldID(tempClass, "staticVector3", "Lcom/badlogic/gdx/math/Vector3;");
	    ret = jenv->NewGlobalRef(jenv->GetStaticObjectField(tempClass, field));
	  }
	  return ret;
	}
	
	/* Sets the data in the Bullet type from the Gdx type. */
	SWIGINTERN inline void gdx_setbtVector3FromVector3(JNIEnv * jenv, btVector3 & target, jobject source) {
		Vector3_to_btVector3(jenv, target, source);
	}

	SWIGINTERN inline void gdx_setbtVector3FromVector3(JNIEnv * jenv, btVector3 * target, jobject source) {
		gdx_setbtVector3FromVector3(jenv, *target, source);
	}

	/* Sets the data in the Gdx type from the Bullet type. */
	SWIGINTERN inline void gdx_setVector3FrombtVector3(JNIEnv * jenv, jobject target, const btVector3 & source) {
		btVector3_to_Vector3(jenv, target, source);
	}

	SWIGINTERN inline void gdx_setVector3FrombtVector3(JNIEnv * jenv, jobject target, const btVector3 * source) {
		gdx_setVector3FrombtVector3(jenv, target, *source);
	}

	/*
	 * RAII wrapper to commit changes made to a local btVector3 back to Vector3
	 */
	class gdxAutoCommitVector3 {
	private:
	  JNIEnv * jenv;
	  jobject jVector3;
	  btVector3 & cbtVector3;
	public:
	  gdxAutoCommitVector3(JNIEnv * jenv, jobject jVector3, btVector3 & cbtVector3) : 
	    jenv(jenv), jVector3(jVector3), cbtVector3(cbtVector3) { };
	  gdxAutoCommitVector3(JNIEnv * jenv, jobject jVector3, btVector3 * cbtVector3) : 
	    jenv(jenv), jVector3(jVector3), cbtVector3(*cbtVector3) { };
	  virtual ~gdxAutoCommitVector3() {
	    gdx_setVector3FrombtVector3(this->jenv, this->jVector3, this->cbtVector3);
	  };
	};

	class gdxAutoCommitbtVector3AndReleaseVector3 {
	private:
	  JNIEnv * jenv;
	  jobject jVector3;
	  btVector3 & cbtVector3;
	  const char * poolName;
	public:
	  gdxAutoCommitbtVector3AndReleaseVector3(JNIEnv * jenv, jobject jVector3, btVector3 & cbtVector3, const char *poolName) : 
	    jenv(jenv), jVector3(jVector3), cbtVector3(cbtVector3), poolName(poolName) { };
	  gdxAutoCommitbtVector3AndReleaseVector3(JNIEnv * jenv, jobject jVector3, btVector3 * cbtVector3, const char *poolName) : 
	    jenv(jenv), jVector3(jVector3), cbtVector3(*cbtVector3), poolName(poolName) { };
	  virtual ~gdxAutoCommitbtVector3AndReleaseVector3() {
	    gdx_setbtVector3FromVector3(this->jenv, this->cbtVector3, this->jVector3);
	    gdx_releasePoolObjectVector3(this->jenv, this->poolName, this->jVector3);
	  };
	};



	/* Gets a global ref to the temp class.  Do not release this. */
	SWIGINTERN inline jclass gdx_getTempClassMatrix4(JNIEnv * jenv) {
	  static jclass cls = NULL;
	  if (cls == NULL) {
		cls = (jclass) jenv->NewGlobalRef(jenv->FindClass("com/badlogic/gdx/physics/bullet/linearmath/LinearMath"));
	  }
	  return cls;
	}
	
	SWIGINTERN inline jobject gdx_takePoolObjectMatrix4(JNIEnv * jenv, const char * poolName) {
	  jclass tempClass = gdx_getTempClassMatrix4(jenv);
	  
	  static jfieldID poolField = NULL;
	  if (poolField == NULL) {
		poolField = jenv->GetStaticFieldID(tempClass, poolName, "Lcom/badlogic/gdx/utils/Pool;");
	  }
	  
	  jobject poolObject = jenv->GetStaticObjectField(tempClass, poolField);
	  jclass poolClass = jenv->GetObjectClass(poolObject);
	  
	  static jmethodID obtainMethod = NULL;
	  if (obtainMethod == NULL) {
		obtainMethod = (jmethodID) jenv->GetMethodID(poolClass, "obtain", "()Ljava/lang/Object;");
	  }
	  
	  jobject ret = jenv->CallObjectMethod(poolObject, obtainMethod);
	
	  jenv->DeleteLocalRef(poolObject);
	  jenv->DeleteLocalRef(poolClass);
	
	  return ret;
	}
	
	SWIGINTERN inline void gdx_releasePoolObjectMatrix4(JNIEnv * jenv, const char * poolName, jobject obj) {
	  jclass tempClass = gdx_getTempClassMatrix4(jenv);
	  
	  static jfieldID poolField = NULL;
	  if (poolField == NULL) {
		poolField = jenv->GetStaticFieldID(tempClass, poolName, "Lcom/badlogic/gdx/utils/Pool;");
	  }
	  
	  jobject poolObject = jenv->GetStaticObjectField(tempClass, poolField);
	  jclass poolClass = jenv->GetObjectClass(poolObject);
	  
	  static jmethodID freeMethod = NULL;
	  if (freeMethod == NULL) {
		freeMethod = (jmethodID) jenv->GetMethodID(poolClass, "free", "(Ljava/lang/Object;)V");
	  }
	  
	  jenv->CallVoidMethod(poolObject, freeMethod, obj);
	  
	  jenv->DeleteLocalRef(poolObject);
	  jenv->DeleteLocalRef(poolClass);
	  jenv->DeleteLocalRef(obj);
	}
	
	/*
	 * A simple RAII wrapper to release jobjects we obtain from pools in 
	 * directorin typemaps.  SWIG doesn't have hooks to release them after
	 * they're used. 
	 */
	class gdxPoolAutoReleaseMatrix4 {
	private:
	  JNIEnv * jenv;
	  const char * poolName;
	  jobject obj;
	public:
	  gdxPoolAutoReleaseMatrix4(JNIEnv * jenv, const char * poolName, jobject obj) : 
		jenv(jenv), poolName(poolName), obj(obj) { };
	  virtual ~gdxPoolAutoReleaseMatrix4() {
		gdx_releasePoolObjectMatrix4(this->jenv, this->poolName, this->obj);
	  };
	};


	
// Workaround for some strange swig behaviour


	/* Gets a global ref to the temp class's Return Matrix4.  Do not release this. */ 
	SWIGINTERN inline jobject gdx_getReturnMatrix4(JNIEnv * jenv) {
	  static jobject ret = NULL;
	  if (ret == NULL) {
	    jclass tempClass = gdx_getTempClassMatrix4(jenv);
	    jfieldID field = jenv->GetStaticFieldID(tempClass, "staticMatrix4", "Lcom/badlogic/gdx/math/Matrix4;");
	    ret = jenv->NewGlobalRef(jenv->GetStaticObjectField(tempClass, field));
	  }
	  return ret;
	}
	
	/* Sets the data in the Bullet type from the Gdx type. */
	SWIGINTERN inline void gdx_setbtTransformFromMatrix4(JNIEnv * jenv, btTransform & target, jobject source) {
		Matrix4_to_btTransform(jenv, target, source);
	}

	SWIGINTERN inline void gdx_setbtTransformFromMatrix4(JNIEnv * jenv, btTransform * target, jobject source) {
		gdx_setbtTransformFromMatrix4(jenv, *target, source);
	}

	/* Sets the data in the Gdx type from the Bullet type. */
	SWIGINTERN inline void gdx_setMatrix4FrombtTransform(JNIEnv * jenv, jobject target, const btTransform & source) {
		btTransform_to_Matrix4(jenv, target, source);
	}

	SWIGINTERN inline void gdx_setMatrix4FrombtTransform(JNIEnv * jenv, jobject target, const btTransform * source) {
		gdx_setMatrix4FrombtTransform(jenv, target, *source);
	}

	/*
	 * RAII wrapper to commit changes made to a local btTransform back to Matrix4
	 */
	class gdxAutoCommitMatrix4 {
	private:
	  JNIEnv * jenv;
	  jobject jMatrix4;
	  btTransform & cbtTransform;
	public:
	  gdxAutoCommitMatrix4(JNIEnv * jenv, jobject jMatrix4, btTransform & cbtTransform) : 
	    jenv(jenv), jMatrix4(jMatrix4), cbtTransform(cbtTransform) { };
	  gdxAutoCommitMatrix4(JNIEnv * jenv, jobject jMatrix4, btTransform * cbtTransform) : 
	    jenv(jenv), jMatrix4(jMatrix4), cbtTransform(*cbtTransform) { };
	  virtual ~gdxAutoCommitMatrix4() {
	    gdx_setMatrix4FrombtTransform(this->jenv, this->jMatrix4, this->cbtTransform);
	  };
	};

	class gdxAutoCommitbtTransformAndReleaseMatrix4 {
	private:
	  JNIEnv * jenv;
	  jobject jMatrix4;
	  btTransform & cbtTransform;
	  const char * poolName;
	public:
	  gdxAutoCommitbtTransformAndReleaseMatrix4(JNIEnv * jenv, jobject jMatrix4, btTransform & cbtTransform, const char *poolName) : 
	    jenv(jenv), jMatrix4(jMatrix4), cbtTransform(cbtTransform), poolName(poolName) { };
	  gdxAutoCommitbtTransformAndReleaseMatrix4(JNIEnv * jenv, jobject jMatrix4, btTransform * cbtTransform, const char *poolName) : 
	    jenv(jenv), jMatrix4(jMatrix4), cbtTransform(*cbtTransform), poolName(poolName) { };
	  virtual ~gdxAutoCommitbtTransformAndReleaseMatrix4() {
	    gdx_setbtTransformFromMatrix4(this->jenv, this->cbtTransform, this->jMatrix4);
	    gdx_releasePoolObjectMatrix4(this->jenv, this->poolName, this->jMatrix4);
	  };
	};

SWIGINTERN char const *btWorldImporter_getNameForPointer(btWorldImporter *self,unsigned long cPtr){
		return self->getNameForPointer((void*)cPtr);
	}

#include <BulletWorldImporter/btBulletWorldImporter.h>

SWIGINTERN bool btBulletWorldImporter_loadFileFromMemory__SWIG_1(btBulletWorldImporter *self,unsigned char *memoryBuffer,int len){
		return self->loadFileFromMemory((char *)memoryBuffer, len);
	}

#include <BulletFileLoader/bFile.h>


#include <BulletFileLoader/bCommon.h>


#include <BulletFileLoader/btBulletFile.h>


#include <BulletFileLoader/bDNA.h>


#include <BulletFileLoader/bDefines.h>


#include <BulletFileLoader/bChunk.h>


#include <BulletFileLoader/autogenerated/bullet.h>


using namespace bParse;


#include <InverseDynamics/MultiBodyTreeCreator.hpp>


#include <InverseDynamics/CoilCreator.hpp>


#include <InverseDynamics/CloneTreeCreator.hpp>


#include <InverseDynamics/DillCreator.hpp>


#include <InverseDynamics/btMultiBodyTreeCreator.hpp>


#include <InverseDynamics/IDRandomUtil.hpp>


#include <InverseDynamics/MultiBodyNameMap.hpp>


#include <InverseDynamics/MultiBodyTreeDebugGraph.hpp>


#include <InverseDynamics/RandomTreeCreator.hpp>


#include <InverseDynamics/SimpleTreeCreator.hpp>


#include <InverseDynamics/User2InternalIndex.hpp>


#include <InverseDynamics/BulletInverseDynamicsUtilsCommon.h>


#include <InverseDynamics/invdyn_bullet_comparison.hpp>


using namespace btInverseDynamicsBullet3;
using namespace btInverseDynamics;



/* ---------------------------------------------------
 * C++ director class methods
 * --------------------------------------------------- */

#include "extras_wrap.h"

SwigDirector_btBulletWorldImporter::SwigDirector_btBulletWorldImporter(JNIEnv *jenv, btDynamicsWorld *world) : btBulletWorldImporter(world), Swig::Director(jenv) {
}

SwigDirector_btBulletWorldImporter::~SwigDirector_btBulletWorldImporter() {
  swig_disconnect_director_self("swigDirectorDisconnect");
}


void SwigDirector_btBulletWorldImporter::deleteAllData() {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[0]) {
    btWorldImporter::deleteAllData();
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jenv->CallStaticVoidMethod(Swig::jclass_ExtrasJNI, Swig::director_method_ids[0], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in btBulletWorldImporter::deleteAllData ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_btBulletWorldImporter::setDynamicsWorldInfo(btVector3 const &gravity, btContactSolverInfo const &solverInfo) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jobject jgravity = 0 ;
  jlong jsolverInfo = 0 ;
  
  if (!swig_override[1]) {
    btWorldImporter::setDynamicsWorldInfo(gravity,solverInfo);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jgravity = gdx_takePoolObjectVector3(jenv, "poolVector3");
    gdx_setVector3FrombtVector3(jenv, jgravity, gravity);
    gdxPoolAutoReleaseVector3 autoRelease_jgravity(jenv, "poolVector3", jgravity);
    *(btContactSolverInfo **)&jsolverInfo = (btContactSolverInfo *) &solverInfo; 
    jenv->CallStaticVoidMethod(Swig::jclass_ExtrasJNI, Swig::director_method_ids[1], swigjobj, jgravity, jsolverInfo);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in btBulletWorldImporter::setDynamicsWorldInfo ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

bool SwigDirector_btBulletWorldImporter::convertAllObjects(bParse::btBulletFile *file) {
  bool c_result = SwigValueInit< bool >() ;
  jboolean jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jfile = 0 ;
  
  if (!swig_override[2]) {
    return btBulletWorldImporter::convertAllObjects(file);
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *((bParse::btBulletFile **)&jfile) = (bParse::btBulletFile *) file; 
    jresult = (jboolean) jenv->CallStaticBooleanMethod(Swig::jclass_ExtrasJNI, Swig::director_method_ids[2], swigjobj, jfile);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    c_result = jresult ? true : false; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in btBulletWorldImporter::convertAllObjects ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

void SwigDirector_btBulletWorldImporter::swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global) {
  static struct {
    const char *mname;
    const char *mdesc;
    jmethodID base_methid;
  } methods[] = {
    {
      "deleteAllData", "()V", NULL 
    },
    {
      "setDynamicsWorldInfo", "(Lcom/badlogic/gdx/math/Vector3;Lcom/badlogic/gdx/physics/bullet/dynamics/btContactSolverInfo;)V", NULL 
    },
    {
      "convertAllObjects", "(Lcom/badlogic/gdx/physics/bullet/extras/btBulletFile;)Z", NULL 
    }
  };
  
  static jclass baseclass = 0 ;
  
  if (swig_set_self(jenv, jself, swig_mem_own, weak_global)) {
    if (!baseclass) {
      baseclass = jenv->FindClass("com/badlogic/gdx/physics/bullet/extras/btBulletWorldImporter");
      if (!baseclass) return;
      baseclass = (jclass) jenv->NewGlobalRef(baseclass);
    }
    bool derived = (jenv->IsSameObject(baseclass, jcls) ? false : true);
    for (int i = 0; i < 3; ++i) {
      if (!methods[i].base_methid) {
        methods[i].base_methid = jenv->GetMethodID(baseclass, methods[i].mname, methods[i].mdesc);
        if (!methods[i].base_methid) return;
      }
      swig_override[i] = false;
      if (derived) {
        jmethodID methid = jenv->GetMethodID(jcls, methods[i].mname, methods[i].mdesc);
        swig_override[i] = (methid != methods[i].base_methid);
        jenv->ExceptionClear();
      }
    }
  }
}



#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btStringArray_1operatorAssignment(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  btAlignedObjectArray< char * > *arg1 = (btAlignedObjectArray< char * > *) 0 ;
  btAlignedObjectArray< char * > *arg2 = 0 ;
  btAlignedObjectArray< char * > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(btAlignedObjectArray< char * > **)&jarg1; 
  arg2 = *(btAlignedObjectArray< char * > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "btAlignedObjectArray< char * > const & reference is null");
    return 0;
  } 
  result = (btAlignedObjectArray< char * > *) &(arg1)->operator =((btAlignedObjectArray< char * > const &)*arg2);
  *(btAlignedObjectArray< char * > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_new_1btStringArray_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  btAlignedObjectArray< char * > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (btAlignedObjectArray< char * > *)new btAlignedObjectArray< char * >();
  *(btAlignedObjectArray< char * > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_delete_1btStringArray(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  btAlignedObjectArray< char * > *arg1 = (btAlignedObjectArray< char * > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(btAlignedObjectArray< char * > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_new_1btStringArray_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  btAlignedObjectArray< char * > *arg1 = 0 ;
  btAlignedObjectArray< char * > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(btAlignedObjectArray< char * > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "btAlignedObjectArray< char * > const & reference is null");
    return 0;
  } 
  result = (btAlignedObjectArray< char * > *)new btAlignedObjectArray< char * >((btAlignedObjectArray< char * > const &)*arg1);
  *(btAlignedObjectArray< char * > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btStringArray_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  btAlignedObjectArray< char * > *arg1 = (btAlignedObjectArray< char * > *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(btAlignedObjectArray< char * > **)&jarg1; 
  result = (int)((btAlignedObjectArray< char * > const *)arg1)->size();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btStringArray_1atConst(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jstring jresult = 0 ;
  btAlignedObjectArray< char * > *arg1 = (btAlignedObjectArray< char * > *) 0 ;
  int arg2 ;
  char **result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(btAlignedObjectArray< char * > **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (char **) &((btAlignedObjectArray< char * > const *)arg1)->at(arg2);
  if (*result) jresult = jenv->NewStringUTF((const char *)*result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btStringArray_1at(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jstring jresult = 0 ;
  btAlignedObjectArray< char * > *arg1 = (btAlignedObjectArray< char * > *) 0 ;
  int arg2 ;
  char **result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(btAlignedObjectArray< char * > **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (char **) &(arg1)->at(arg2);
  if (*result) jresult = jenv->NewStringUTF((const char *)*result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btStringArray_1operatorSubscriptConst(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jstring jresult = 0 ;
  btAlignedObjectArray< char * > *arg1 = (btAlignedObjectArray< char * > *) 0 ;
  int arg2 ;
  char **result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(btAlignedObjectArray< char * > **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (char **) &((btAlignedObjectArray< char * > const *)arg1)->operator [](arg2);
  if (*result) jresult = jenv->NewStringUTF((const char *)*result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btStringArray_1operatorSubscript(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jstring jresult = 0 ;
  btAlignedObjectArray< char * > *arg1 = (btAlignedObjectArray< char * > *) 0 ;
  int arg2 ;
  char **result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(btAlignedObjectArray< char * > **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (char **) &(arg1)->operator [](arg2);
  if (*result) jresult = jenv->NewStringUTF((const char *)*result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btStringArray_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  btAlignedObjectArray< char * > *arg1 = (btAlignedObjectArray< char * > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(btAlignedObjectArray< char * > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btStringArray_1pop_1back(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  btAlignedObjectArray< char * > *arg1 = (btAlignedObjectArray< char * > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(btAlignedObjectArray< char * > **)&jarg1; 
  (arg1)->pop_back();
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btStringArray_1resizeNoInitialize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  btAlignedObjectArray< char * > *arg1 = (btAlignedObjectArray< char * > *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(btAlignedObjectArray< char * > **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->resizeNoInitialize(arg2);
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btStringArray_1resize_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jstring jarg3) {
  btAlignedObjectArray< char * > *arg1 = (btAlignedObjectArray< char * > *) 0 ;
  int arg2 ;
  char **arg3 = 0 ;
  char *temp3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(btAlignedObjectArray< char * > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = 0;
  if (jarg3) {
    temp3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!temp3) return ;
  }
  arg3 = &temp3;
  (arg1)->resize(arg2,(char *const &)*arg3);
  if (arg3 && *arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)*arg3);
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btStringArray_1resize_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  btAlignedObjectArray< char * > *arg1 = (btAlignedObjectArray< char * > *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(btAlignedObjectArray< char * > **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->resize(arg2);
}


SWIGEXPORT jstring JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btStringArray_1expandNonInitializing(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  btAlignedObjectArray< char * > *arg1 = (btAlignedObjectArray< char * > *) 0 ;
  char **result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(btAlignedObjectArray< char * > **)&jarg1; 
  result = (char **) &(arg1)->expandNonInitializing();
  if (*result) jresult = jenv->NewStringUTF((const char *)*result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btStringArray_1expand_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jstring jresult = 0 ;
  btAlignedObjectArray< char * > *arg1 = (btAlignedObjectArray< char * > *) 0 ;
  char **arg2 = 0 ;
  char *temp2 = 0 ;
  char **result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(btAlignedObjectArray< char * > **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    temp2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!temp2) return 0;
  }
  arg2 = &temp2;
  result = (char **) &(arg1)->expand((char *const &)*arg2);
  if (*result) jresult = jenv->NewStringUTF((const char *)*result);
  if (arg2 && *arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)*arg2);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btStringArray_1expand_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  btAlignedObjectArray< char * > *arg1 = (btAlignedObjectArray< char * > *) 0 ;
  char **result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(btAlignedObjectArray< char * > **)&jarg1; 
  result = (char **) &(arg1)->expand();
  if (*result) jresult = jenv->NewStringUTF((const char *)*result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btStringArray_1push_1back(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  btAlignedObjectArray< char * > *arg1 = (btAlignedObjectArray< char * > *) 0 ;
  char **arg2 = 0 ;
  char *temp2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(btAlignedObjectArray< char * > **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    temp2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!temp2) return ;
  }
  arg2 = &temp2;
  (arg1)->push_back((char *const &)*arg2);
  if (arg2 && *arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)*arg2);
}


SWIGEXPORT jint JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btStringArray_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  btAlignedObjectArray< char * > *arg1 = (btAlignedObjectArray< char * > *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(btAlignedObjectArray< char * > **)&jarg1; 
  result = (int)((btAlignedObjectArray< char * > const *)arg1)->capacity();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btStringArray_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  btAlignedObjectArray< char * > *arg1 = (btAlignedObjectArray< char * > *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(btAlignedObjectArray< char * > **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btStringArray_1less_1operatorFunctionCall(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  jboolean jresult = 0 ;
  btAlignedObjectArray< char * >::less *arg1 = (btAlignedObjectArray< char * >::less *) 0 ;
  char **arg2 = 0 ;
  char **arg3 = 0 ;
  char *temp2 = 0 ;
  char *temp3 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(btAlignedObjectArray< char * >::less **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    temp2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!temp2) return 0;
  }
  arg2 = &temp2;
  arg3 = 0;
  if (jarg3) {
    temp3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!temp3) return 0;
  }
  arg3 = &temp3;
  result = (bool)((btAlignedObjectArray< char * >::less const *)arg1)->operator ()((char *const &)*arg2,(char *const &)*arg3);
  jresult = (jboolean)result; 
  if (arg2 && *arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)*arg2);
  if (arg3 && *arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)*arg3);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_new_1btStringArray_1less(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  btAlignedObjectArray< char * >::less *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (btAlignedObjectArray< char * >::less *)new btAlignedObjectArray< char * >::less();
  *(btAlignedObjectArray< char * >::less **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_delete_1btStringArray_1less(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  btAlignedObjectArray< char * >::less *arg1 = (btAlignedObjectArray< char * >::less *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(btAlignedObjectArray< char * >::less **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btStringArray_1swap(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  btAlignedObjectArray< char * > *arg1 = (btAlignedObjectArray< char * > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(btAlignedObjectArray< char * > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->swap(arg2,arg3);
}


SWIGEXPORT jint JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btStringArray_1findBinarySearch(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  btAlignedObjectArray< char * > *arg1 = (btAlignedObjectArray< char * > *) 0 ;
  char **arg2 = 0 ;
  char *temp2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(btAlignedObjectArray< char * > **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    temp2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!temp2) return 0;
  }
  arg2 = &temp2;
  result = (int)((btAlignedObjectArray< char * > const *)arg1)->findBinarySearch((char *const &)*arg2);
  jresult = (jint)result; 
  if (arg2 && *arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)*arg2);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btStringArray_1findLinearSearch(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  btAlignedObjectArray< char * > *arg1 = (btAlignedObjectArray< char * > *) 0 ;
  char **arg2 = 0 ;
  char *temp2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(btAlignedObjectArray< char * > **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    temp2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!temp2) return 0;
  }
  arg2 = &temp2;
  result = (int)((btAlignedObjectArray< char * > const *)arg1)->findLinearSearch((char *const &)*arg2);
  jresult = (jint)result; 
  if (arg2 && *arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)*arg2);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btStringArray_1removeAtIndex(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  btAlignedObjectArray< char * > *arg1 = (btAlignedObjectArray< char * > *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(btAlignedObjectArray< char * > **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->removeAtIndex(arg2);
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btStringArray_1remove(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  btAlignedObjectArray< char * > *arg1 = (btAlignedObjectArray< char * > *) 0 ;
  char **arg2 = 0 ;
  char *temp2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(btAlignedObjectArray< char * > **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    temp2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!temp2) return ;
  }
  arg2 = &temp2;
  (arg1)->remove((char *const &)*arg2);
  if (arg2 && *arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)*arg2);
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btStringArray_1initializeFromBuffer(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jint jarg3, jint jarg4) {
  btAlignedObjectArray< char * > *arg1 = (btAlignedObjectArray< char * > *) 0 ;
  void *arg2 = (void *) 0 ;
  int arg3 ;
  int arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(btAlignedObjectArray< char * > **)&jarg1; 
  arg2 = (void *)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  (arg1)->initializeFromBuffer(arg2,arg3,arg4);
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btStringArray_1copyFromArray(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  btAlignedObjectArray< char * > *arg1 = (btAlignedObjectArray< char * > *) 0 ;
  btAlignedObjectArray< char * > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(btAlignedObjectArray< char * > **)&jarg1; 
  arg2 = *(btAlignedObjectArray< char * > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "btAlignedObjectArray< char * > const & reference is null");
    return ;
  } 
  (arg1)->copyFromArray((btAlignedObjectArray< char * > const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_new_1btWorldImporter(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  btDynamicsWorld *arg1 = (btDynamicsWorld *) 0 ;
  btWorldImporter *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(btDynamicsWorld **)&jarg1; 
  result = (btWorldImporter *)new btWorldImporter(arg1);
  *(btWorldImporter **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_delete_1btWorldImporter(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  btWorldImporter *arg1 = (btWorldImporter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(btWorldImporter **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btWorldImporter_1deleteAllData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  btWorldImporter *arg1 = (btWorldImporter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(btWorldImporter **)&jarg1; 
  (arg1)->deleteAllData();
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btWorldImporter_1setVerboseMode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  btWorldImporter *arg1 = (btWorldImporter *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(btWorldImporter **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setVerboseMode(arg2);
}


SWIGEXPORT jint JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btWorldImporter_1getVerboseMode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  btWorldImporter *arg1 = (btWorldImporter *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(btWorldImporter **)&jarg1; 
  result = (int)((btWorldImporter const *)arg1)->getVerboseMode();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btWorldImporter_1getNumCollisionShapes(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  btWorldImporter *arg1 = (btWorldImporter *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(btWorldImporter **)&jarg1; 
  result = (int)((btWorldImporter const *)arg1)->getNumCollisionShapes();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btWorldImporter_1getCollisionShapeByIndex(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  btWorldImporter *arg1 = (btWorldImporter *) 0 ;
  int arg2 ;
  btCollisionShape *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(btWorldImporter **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (btCollisionShape *)(arg1)->getCollisionShapeByIndex(arg2);
  *(btCollisionShape **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btWorldImporter_1getNumRigidBodies(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  btWorldImporter *arg1 = (btWorldImporter *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(btWorldImporter **)&jarg1; 
  result = (int)((btWorldImporter const *)arg1)->getNumRigidBodies();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btWorldImporter_1getRigidBodyByIndex(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  btWorldImporter *arg1 = (btWorldImporter *) 0 ;
  int arg2 ;
  btCollisionObject *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(btWorldImporter **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (btCollisionObject *)((btWorldImporter const *)arg1)->getRigidBodyByIndex(arg2);
  *(btCollisionObject **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btWorldImporter_1getNumConstraints(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  btWorldImporter *arg1 = (btWorldImporter *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(btWorldImporter **)&jarg1; 
  result = (int)((btWorldImporter const *)arg1)->getNumConstraints();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btWorldImporter_1getConstraintByIndex(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  btWorldImporter *arg1 = (btWorldImporter *) 0 ;
  int arg2 ;
  btTypedConstraint *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(btWorldImporter **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (btTypedConstraint *)((btWorldImporter const *)arg1)->getConstraintByIndex(arg2);
  *(btTypedConstraint **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btWorldImporter_1getNumBvhs(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  btWorldImporter *arg1 = (btWorldImporter *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(btWorldImporter **)&jarg1; 
  result = (int)((btWorldImporter const *)arg1)->getNumBvhs();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btWorldImporter_1getBvhByIndex(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  btWorldImporter *arg1 = (btWorldImporter *) 0 ;
  int arg2 ;
  btOptimizedBvh *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(btWorldImporter **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (btOptimizedBvh *)((btWorldImporter const *)arg1)->getBvhByIndex(arg2);
  *(btOptimizedBvh **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btWorldImporter_1getNumTriangleInfoMaps(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  btWorldImporter *arg1 = (btWorldImporter *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(btWorldImporter **)&jarg1; 
  result = (int)((btWorldImporter const *)arg1)->getNumTriangleInfoMaps();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btWorldImporter_1getTriangleInfoMapByIndex(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  btWorldImporter *arg1 = (btWorldImporter *) 0 ;
  int arg2 ;
  btTriangleInfoMap *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(btWorldImporter **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (btTriangleInfoMap *)((btWorldImporter const *)arg1)->getTriangleInfoMapByIndex(arg2);
  *(btTriangleInfoMap **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btWorldImporter_1getCollisionShapeByName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  btWorldImporter *arg1 = (btWorldImporter *) 0 ;
  char *arg2 = (char *) 0 ;
  btCollisionShape *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(btWorldImporter **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (btCollisionShape *)(arg1)->getCollisionShapeByName((char const *)arg2);
  *(btCollisionShape **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btWorldImporter_1getRigidBodyByName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  btWorldImporter *arg1 = (btWorldImporter *) 0 ;
  char *arg2 = (char *) 0 ;
  btRigidBody *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(btWorldImporter **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (btRigidBody *)(arg1)->getRigidBodyByName((char const *)arg2);
  *(btRigidBody **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btWorldImporter_1getConstraintByName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  btWorldImporter *arg1 = (btWorldImporter *) 0 ;
  char *arg2 = (char *) 0 ;
  btTypedConstraint *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(btWorldImporter **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (btTypedConstraint *)(arg1)->getConstraintByName((char const *)arg2);
  *(btTypedConstraint **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btWorldImporter_1getNameForPointerConst(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jstring jresult = 0 ;
  btWorldImporter *arg1 = (btWorldImporter *) 0 ;
  void *arg2 = (void *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(btWorldImporter **)&jarg1; 
  arg2 = (void *)jarg2; 
  result = (char *)((btWorldImporter const *)arg1)->getNameForPointer((void const *)arg2);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btWorldImporter_1setDynamicsWorldInfo(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobject jarg2, jlong jarg3, jobject jarg3_) {
  btWorldImporter *arg1 = (btWorldImporter *) 0 ;
  btVector3 *arg2 = 0 ;
  btContactSolverInfo *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(btWorldImporter **)&jarg1; 
  btVector3 local_arg2;
  gdx_setbtVector3FromVector3(jenv, local_arg2, jarg2);
  arg2 = &local_arg2;
  gdxAutoCommitVector3 auto_commit_arg2(jenv, jarg2, &local_arg2);
  arg3 = *(btContactSolverInfo **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "btContactSolverInfo const & reference is null");
    return ;
  } 
  (arg1)->setDynamicsWorldInfo((btVector3 const &)*arg2,(btContactSolverInfo const &)*arg3);
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btWorldImporter_1createRigidBody(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2, jfloat jarg3, jobject jarg4, jlong jarg5, jobject jarg5_, jstring jarg6) {
  jlong jresult = 0 ;
  btWorldImporter *arg1 = (btWorldImporter *) 0 ;
  bool arg2 ;
  btScalar arg3 ;
  btTransform *arg4 = 0 ;
  btCollisionShape *arg5 = (btCollisionShape *) 0 ;
  char *arg6 = (char *) 0 ;
  btRigidBody *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg5_;
  arg1 = *(btWorldImporter **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  arg3 = (btScalar)jarg3; 
  btTransform local_arg4;
  gdx_setbtTransformFromMatrix4(jenv, local_arg4, jarg4);
  arg4 = &local_arg4;
  gdxAutoCommitMatrix4 auto_commit_arg4(jenv, jarg4, &local_arg4);
  arg5 = *(btCollisionShape **)&jarg5; 
  arg6 = 0;
  if (jarg6) {
    arg6 = (char *)jenv->GetStringUTFChars(jarg6, 0);
    if (!arg6) return 0;
  }
  result = (btRigidBody *)(arg1)->createRigidBody(arg2,arg3,(btTransform const &)*arg4,arg5,(char const *)arg6);
  *(btRigidBody **)&jresult = result; 
  if (arg6) jenv->ReleaseStringUTFChars(jarg6, (const char *)arg6);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btWorldImporter_1createCollisionObject(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobject jarg2, jlong jarg3, jobject jarg3_, jstring jarg4) {
  jlong jresult = 0 ;
  btWorldImporter *arg1 = (btWorldImporter *) 0 ;
  btTransform *arg2 = 0 ;
  btCollisionShape *arg3 = (btCollisionShape *) 0 ;
  char *arg4 = (char *) 0 ;
  btCollisionObject *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(btWorldImporter **)&jarg1; 
  btTransform local_arg2;
  gdx_setbtTransformFromMatrix4(jenv, local_arg2, jarg2);
  arg2 = &local_arg2;
  gdxAutoCommitMatrix4 auto_commit_arg2(jenv, jarg2, &local_arg2);
  arg3 = *(btCollisionShape **)&jarg3; 
  arg4 = 0;
  if (jarg4) {
    arg4 = (char *)jenv->GetStringUTFChars(jarg4, 0);
    if (!arg4) return 0;
  }
  result = (btCollisionObject *)(arg1)->createCollisionObject((btTransform const &)*arg2,arg3,(char const *)arg4);
  *(btCollisionObject **)&jresult = result; 
  if (arg4) jenv->ReleaseStringUTFChars(jarg4, (const char *)arg4);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btWorldImporter_1createPlaneShape(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobject jarg2, jfloat jarg3) {
  jlong jresult = 0 ;
  btWorldImporter *arg1 = (btWorldImporter *) 0 ;
  btVector3 *arg2 = 0 ;
  btScalar arg3 ;
  btCollisionShape *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(btWorldImporter **)&jarg1; 
  btVector3 local_arg2;
  gdx_setbtVector3FromVector3(jenv, local_arg2, jarg2);
  arg2 = &local_arg2;
  gdxAutoCommitVector3 auto_commit_arg2(jenv, jarg2, &local_arg2);
  arg3 = (btScalar)jarg3; 
  result = (btCollisionShape *)(arg1)->createPlaneShape((btVector3 const &)*arg2,arg3);
  *(btCollisionShape **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btWorldImporter_1createBoxShape(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobject jarg2) {
  jlong jresult = 0 ;
  btWorldImporter *arg1 = (btWorldImporter *) 0 ;
  btVector3 *arg2 = 0 ;
  btCollisionShape *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(btWorldImporter **)&jarg1; 
  btVector3 local_arg2;
  gdx_setbtVector3FromVector3(jenv, local_arg2, jarg2);
  arg2 = &local_arg2;
  gdxAutoCommitVector3 auto_commit_arg2(jenv, jarg2, &local_arg2);
  result = (btCollisionShape *)(arg1)->createBoxShape((btVector3 const &)*arg2);
  *(btCollisionShape **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btWorldImporter_1createSphereShape(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  jlong jresult = 0 ;
  btWorldImporter *arg1 = (btWorldImporter *) 0 ;
  btScalar arg2 ;
  btCollisionShape *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(btWorldImporter **)&jarg1; 
  arg2 = (btScalar)jarg2; 
  result = (btCollisionShape *)(arg1)->createSphereShape(arg2);
  *(btCollisionShape **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btWorldImporter_1createCapsuleShapeX(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2, jfloat jarg3) {
  jlong jresult = 0 ;
  btWorldImporter *arg1 = (btWorldImporter *) 0 ;
  btScalar arg2 ;
  btScalar arg3 ;
  btCollisionShape *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(btWorldImporter **)&jarg1; 
  arg2 = (btScalar)jarg2; 
  arg3 = (btScalar)jarg3; 
  result = (btCollisionShape *)(arg1)->createCapsuleShapeX(arg2,arg3);
  *(btCollisionShape **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btWorldImporter_1createCapsuleShapeY(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2, jfloat jarg3) {
  jlong jresult = 0 ;
  btWorldImporter *arg1 = (btWorldImporter *) 0 ;
  btScalar arg2 ;
  btScalar arg3 ;
  btCollisionShape *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(btWorldImporter **)&jarg1; 
  arg2 = (btScalar)jarg2; 
  arg3 = (btScalar)jarg3; 
  result = (btCollisionShape *)(arg1)->createCapsuleShapeY(arg2,arg3);
  *(btCollisionShape **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btWorldImporter_1createCapsuleShapeZ(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2, jfloat jarg3) {
  jlong jresult = 0 ;
  btWorldImporter *arg1 = (btWorldImporter *) 0 ;
  btScalar arg2 ;
  btScalar arg3 ;
  btCollisionShape *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(btWorldImporter **)&jarg1; 
  arg2 = (btScalar)jarg2; 
  arg3 = (btScalar)jarg3; 
  result = (btCollisionShape *)(arg1)->createCapsuleShapeZ(arg2,arg3);
  *(btCollisionShape **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btWorldImporter_1createCylinderShapeX(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2, jfloat jarg3) {
  jlong jresult = 0 ;
  btWorldImporter *arg1 = (btWorldImporter *) 0 ;
  btScalar arg2 ;
  btScalar arg3 ;
  btCollisionShape *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(btWorldImporter **)&jarg1; 
  arg2 = (btScalar)jarg2; 
  arg3 = (btScalar)jarg3; 
  result = (btCollisionShape *)(arg1)->createCylinderShapeX(arg2,arg3);
  *(btCollisionShape **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btWorldImporter_1createCylinderShapeY(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2, jfloat jarg3) {
  jlong jresult = 0 ;
  btWorldImporter *arg1 = (btWorldImporter *) 0 ;
  btScalar arg2 ;
  btScalar arg3 ;
  btCollisionShape *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(btWorldImporter **)&jarg1; 
  arg2 = (btScalar)jarg2; 
  arg3 = (btScalar)jarg3; 
  result = (btCollisionShape *)(arg1)->createCylinderShapeY(arg2,arg3);
  *(btCollisionShape **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btWorldImporter_1createCylinderShapeZ(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2, jfloat jarg3) {
  jlong jresult = 0 ;
  btWorldImporter *arg1 = (btWorldImporter *) 0 ;
  btScalar arg2 ;
  btScalar arg3 ;
  btCollisionShape *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(btWorldImporter **)&jarg1; 
  arg2 = (btScalar)jarg2; 
  arg3 = (btScalar)jarg3; 
  result = (btCollisionShape *)(arg1)->createCylinderShapeZ(arg2,arg3);
  *(btCollisionShape **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btWorldImporter_1createConeShapeX(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2, jfloat jarg3) {
  jlong jresult = 0 ;
  btWorldImporter *arg1 = (btWorldImporter *) 0 ;
  btScalar arg2 ;
  btScalar arg3 ;
  btCollisionShape *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(btWorldImporter **)&jarg1; 
  arg2 = (btScalar)jarg2; 
  arg3 = (btScalar)jarg3; 
  result = (btCollisionShape *)(arg1)->createConeShapeX(arg2,arg3);
  *(btCollisionShape **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btWorldImporter_1createConeShapeY(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2, jfloat jarg3) {
  jlong jresult = 0 ;
  btWorldImporter *arg1 = (btWorldImporter *) 0 ;
  btScalar arg2 ;
  btScalar arg3 ;
  btCollisionShape *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(btWorldImporter **)&jarg1; 
  arg2 = (btScalar)jarg2; 
  arg3 = (btScalar)jarg3; 
  result = (btCollisionShape *)(arg1)->createConeShapeY(arg2,arg3);
  *(btCollisionShape **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btWorldImporter_1createConeShapeZ(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2, jfloat jarg3) {
  jlong jresult = 0 ;
  btWorldImporter *arg1 = (btWorldImporter *) 0 ;
  btScalar arg2 ;
  btScalar arg3 ;
  btCollisionShape *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(btWorldImporter **)&jarg1; 
  arg2 = (btScalar)jarg2; 
  arg3 = (btScalar)jarg3; 
  result = (btCollisionShape *)(arg1)->createConeShapeZ(arg2,arg3);
  *(btCollisionShape **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btWorldImporter_1createTriangleMeshContainer(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  btWorldImporter *arg1 = (btWorldImporter *) 0 ;
  btTriangleIndexVertexArray *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(btWorldImporter **)&jarg1; 
  result = (btTriangleIndexVertexArray *)(arg1)->createTriangleMeshContainer();
  *(btTriangleIndexVertexArray **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btWorldImporter_1createBvhTriangleMeshShape(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  btWorldImporter *arg1 = (btWorldImporter *) 0 ;
  btStridingMeshInterface *arg2 = (btStridingMeshInterface *) 0 ;
  btOptimizedBvh *arg3 = (btOptimizedBvh *) 0 ;
  btBvhTriangleMeshShape *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(btWorldImporter **)&jarg1; 
  arg2 = *(btStridingMeshInterface **)&jarg2; 
  arg3 = *(btOptimizedBvh **)&jarg3; 
  result = (btBvhTriangleMeshShape *)(arg1)->createBvhTriangleMeshShape(arg2,arg3);
  *(btBvhTriangleMeshShape **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btWorldImporter_1createConvexTriangleMeshShape(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  btWorldImporter *arg1 = (btWorldImporter *) 0 ;
  btStridingMeshInterface *arg2 = (btStridingMeshInterface *) 0 ;
  btCollisionShape *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(btWorldImporter **)&jarg1; 
  arg2 = *(btStridingMeshInterface **)&jarg2; 
  result = (btCollisionShape *)(arg1)->createConvexTriangleMeshShape(arg2);
  *(btCollisionShape **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btWorldImporter_1createGimpactShape(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  btWorldImporter *arg1 = (btWorldImporter *) 0 ;
  btStridingMeshInterface *arg2 = (btStridingMeshInterface *) 0 ;
  btGImpactMeshShape *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(btWorldImporter **)&jarg1; 
  arg2 = *(btStridingMeshInterface **)&jarg2; 
  result = (btGImpactMeshShape *)(arg1)->createGimpactShape(arg2);
  *(btGImpactMeshShape **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btWorldImporter_1createStridingMeshInterfaceData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  btWorldImporter *arg1 = (btWorldImporter *) 0 ;
  btStridingMeshInterfaceData *arg2 = (btStridingMeshInterfaceData *) 0 ;
  btStridingMeshInterfaceData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(btWorldImporter **)&jarg1; 
  arg2 = *(btStridingMeshInterfaceData **)&jarg2; 
  result = (btStridingMeshInterfaceData *)(arg1)->createStridingMeshInterfaceData(arg2);
  *(btStridingMeshInterfaceData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btWorldImporter_1createConvexHullShape(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  btWorldImporter *arg1 = (btWorldImporter *) 0 ;
  btConvexHullShape *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(btWorldImporter **)&jarg1; 
  result = (btConvexHullShape *)(arg1)->createConvexHullShape();
  *(btConvexHullShape **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btWorldImporter_1createCompoundShape(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  btWorldImporter *arg1 = (btWorldImporter *) 0 ;
  btCompoundShape *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(btWorldImporter **)&jarg1; 
  result = (btCompoundShape *)(arg1)->createCompoundShape();
  *(btCompoundShape **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btWorldImporter_1createScaledTrangleMeshShape(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jobject jarg3) {
  jlong jresult = 0 ;
  btWorldImporter *arg1 = (btWorldImporter *) 0 ;
  btBvhTriangleMeshShape *arg2 = (btBvhTriangleMeshShape *) 0 ;
  btVector3 *arg3 = 0 ;
  btScaledBvhTriangleMeshShape *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(btWorldImporter **)&jarg1; 
  arg2 = *(btBvhTriangleMeshShape **)&jarg2; 
  btVector3 local_arg3;
  gdx_setbtVector3FromVector3(jenv, local_arg3, jarg3);
  arg3 = &local_arg3;
  gdxAutoCommitVector3 auto_commit_arg3(jenv, jarg3, &local_arg3);
  result = (btScaledBvhTriangleMeshShape *)(arg1)->createScaledTrangleMeshShape(arg2,(btVector3 const &)*arg3);
  *(btScaledBvhTriangleMeshShape **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btWorldImporter_1createMultiSphereShape(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jobject jarg3, jint jarg4) {
  jlong jresult = 0 ;
  btWorldImporter *arg1 = (btWorldImporter *) 0 ;
  btVector3 *arg2 = (btVector3 *) 0 ;
  btScalar *arg3 = (btScalar *) 0 ;
  int arg4 ;
  btMultiSphereShape *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(btWorldImporter **)&jarg1; 
  arg2 = *(btVector3 **)&jarg2; 
  {
    arg3 = (btScalar*)jenv->GetDirectBufferAddress(jarg3);
    if (arg3 == NULL) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unable to get address of direct buffer. Buffer must be allocated direct.");
    }
  }
  arg4 = (int)jarg4; 
  result = (btMultiSphereShape *)(arg1)->createMultiSphereShape((btVector3 const *)arg2,(btScalar const *)arg3,arg4);
  *(btMultiSphereShape **)&jresult = result; 
  
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btWorldImporter_1createMeshInterface(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  btWorldImporter *arg1 = (btWorldImporter *) 0 ;
  btStridingMeshInterfaceData *arg2 = 0 ;
  btTriangleIndexVertexArray *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(btWorldImporter **)&jarg1; 
  arg2 = *(btStridingMeshInterfaceData **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "btStridingMeshInterfaceData & reference is null");
    return 0;
  } 
  result = (btTriangleIndexVertexArray *)(arg1)->createMeshInterface(*arg2);
  *(btTriangleIndexVertexArray **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btWorldImporter_1createOptimizedBvh(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  btWorldImporter *arg1 = (btWorldImporter *) 0 ;
  btOptimizedBvh *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(btWorldImporter **)&jarg1; 
  result = (btOptimizedBvh *)(arg1)->createOptimizedBvh();
  *(btOptimizedBvh **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btWorldImporter_1createTriangleInfoMap(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  btWorldImporter *arg1 = (btWorldImporter *) 0 ;
  btTriangleInfoMap *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(btWorldImporter **)&jarg1; 
  result = (btTriangleInfoMap *)(arg1)->createTriangleInfoMap();
  *(btTriangleInfoMap **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btWorldImporter_1createPoint2PointConstraint_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jobject jarg4, jobject jarg5) {
  jlong jresult = 0 ;
  btWorldImporter *arg1 = (btWorldImporter *) 0 ;
  btRigidBody *arg2 = 0 ;
  btRigidBody *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  btVector3 *arg5 = 0 ;
  btPoint2PointConstraint *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(btWorldImporter **)&jarg1; 
  arg2 = *(btRigidBody **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "btRigidBody & reference is null");
    return 0;
  } 
  arg3 = *(btRigidBody **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "btRigidBody & reference is null");
    return 0;
  } 
  btVector3 local_arg4;
  gdx_setbtVector3FromVector3(jenv, local_arg4, jarg4);
  arg4 = &local_arg4;
  gdxAutoCommitVector3 auto_commit_arg4(jenv, jarg4, &local_arg4);
  btVector3 local_arg5;
  gdx_setbtVector3FromVector3(jenv, local_arg5, jarg5);
  arg5 = &local_arg5;
  gdxAutoCommitVector3 auto_commit_arg5(jenv, jarg5, &local_arg5);
  result = (btPoint2PointConstraint *)(arg1)->createPoint2PointConstraint(*arg2,*arg3,(btVector3 const &)*arg4,(btVector3 const &)*arg5);
  *(btPoint2PointConstraint **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btWorldImporter_1createPoint2PointConstraint_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jobject jarg3) {
  jlong jresult = 0 ;
  btWorldImporter *arg1 = (btWorldImporter *) 0 ;
  btRigidBody *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btPoint2PointConstraint *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(btWorldImporter **)&jarg1; 
  arg2 = *(btRigidBody **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "btRigidBody & reference is null");
    return 0;
  } 
  btVector3 local_arg3;
  gdx_setbtVector3FromVector3(jenv, local_arg3, jarg3);
  arg3 = &local_arg3;
  gdxAutoCommitVector3 auto_commit_arg3(jenv, jarg3, &local_arg3);
  result = (btPoint2PointConstraint *)(arg1)->createPoint2PointConstraint(*arg2,(btVector3 const &)*arg3);
  *(btPoint2PointConstraint **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btWorldImporter_1createHingeConstraint_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jobject jarg4, jobject jarg5, jboolean jarg6) {
  jlong jresult = 0 ;
  btWorldImporter *arg1 = (btWorldImporter *) 0 ;
  btRigidBody *arg2 = 0 ;
  btRigidBody *arg3 = 0 ;
  btTransform *arg4 = 0 ;
  btTransform *arg5 = 0 ;
  bool arg6 ;
  btHingeConstraint *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(btWorldImporter **)&jarg1; 
  arg2 = *(btRigidBody **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "btRigidBody & reference is null");
    return 0;
  } 
  arg3 = *(btRigidBody **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "btRigidBody & reference is null");
    return 0;
  } 
  btTransform local_arg4;
  gdx_setbtTransformFromMatrix4(jenv, local_arg4, jarg4);
  arg4 = &local_arg4;
  gdxAutoCommitMatrix4 auto_commit_arg4(jenv, jarg4, &local_arg4);
  btTransform local_arg5;
  gdx_setbtTransformFromMatrix4(jenv, local_arg5, jarg5);
  arg5 = &local_arg5;
  gdxAutoCommitMatrix4 auto_commit_arg5(jenv, jarg5, &local_arg5);
  arg6 = jarg6 ? true : false; 
  result = (btHingeConstraint *)(arg1)->createHingeConstraint(*arg2,*arg3,(btTransform const &)*arg4,(btTransform const &)*arg5,arg6);
  *(btHingeConstraint **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btWorldImporter_1createHingeConstraint_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jobject jarg4, jobject jarg5) {
  jlong jresult = 0 ;
  btWorldImporter *arg1 = (btWorldImporter *) 0 ;
  btRigidBody *arg2 = 0 ;
  btRigidBody *arg3 = 0 ;
  btTransform *arg4 = 0 ;
  btTransform *arg5 = 0 ;
  btHingeConstraint *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(btWorldImporter **)&jarg1; 
  arg2 = *(btRigidBody **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "btRigidBody & reference is null");
    return 0;
  } 
  arg3 = *(btRigidBody **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "btRigidBody & reference is null");
    return 0;
  } 
  btTransform local_arg4;
  gdx_setbtTransformFromMatrix4(jenv, local_arg4, jarg4);
  arg4 = &local_arg4;
  gdxAutoCommitMatrix4 auto_commit_arg4(jenv, jarg4, &local_arg4);
  btTransform local_arg5;
  gdx_setbtTransformFromMatrix4(jenv, local_arg5, jarg5);
  arg5 = &local_arg5;
  gdxAutoCommitMatrix4 auto_commit_arg5(jenv, jarg5, &local_arg5);
  result = (btHingeConstraint *)(arg1)->createHingeConstraint(*arg2,*arg3,(btTransform const &)*arg4,(btTransform const &)*arg5);
  *(btHingeConstraint **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btWorldImporter_1createHingeConstraint_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jobject jarg3, jboolean jarg4) {
  jlong jresult = 0 ;
  btWorldImporter *arg1 = (btWorldImporter *) 0 ;
  btRigidBody *arg2 = 0 ;
  btTransform *arg3 = 0 ;
  bool arg4 ;
  btHingeConstraint *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(btWorldImporter **)&jarg1; 
  arg2 = *(btRigidBody **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "btRigidBody & reference is null");
    return 0;
  } 
  btTransform local_arg3;
  gdx_setbtTransformFromMatrix4(jenv, local_arg3, jarg3);
  arg3 = &local_arg3;
  gdxAutoCommitMatrix4 auto_commit_arg3(jenv, jarg3, &local_arg3);
  arg4 = jarg4 ? true : false; 
  result = (btHingeConstraint *)(arg1)->createHingeConstraint(*arg2,(btTransform const &)*arg3,arg4);
  *(btHingeConstraint **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btWorldImporter_1createHingeConstraint_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jobject jarg3) {
  jlong jresult = 0 ;
  btWorldImporter *arg1 = (btWorldImporter *) 0 ;
  btRigidBody *arg2 = 0 ;
  btTransform *arg3 = 0 ;
  btHingeConstraint *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(btWorldImporter **)&jarg1; 
  arg2 = *(btRigidBody **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "btRigidBody & reference is null");
    return 0;
  } 
  btTransform local_arg3;
  gdx_setbtTransformFromMatrix4(jenv, local_arg3, jarg3);
  arg3 = &local_arg3;
  gdxAutoCommitMatrix4 auto_commit_arg3(jenv, jarg3, &local_arg3);
  result = (btHingeConstraint *)(arg1)->createHingeConstraint(*arg2,(btTransform const &)*arg3);
  *(btHingeConstraint **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btWorldImporter_1createConeTwistConstraint_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jobject jarg4, jobject jarg5) {
  jlong jresult = 0 ;
  btWorldImporter *arg1 = (btWorldImporter *) 0 ;
  btRigidBody *arg2 = 0 ;
  btRigidBody *arg3 = 0 ;
  btTransform *arg4 = 0 ;
  btTransform *arg5 = 0 ;
  btConeTwistConstraint *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(btWorldImporter **)&jarg1; 
  arg2 = *(btRigidBody **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "btRigidBody & reference is null");
    return 0;
  } 
  arg3 = *(btRigidBody **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "btRigidBody & reference is null");
    return 0;
  } 
  btTransform local_arg4;
  gdx_setbtTransformFromMatrix4(jenv, local_arg4, jarg4);
  arg4 = &local_arg4;
  gdxAutoCommitMatrix4 auto_commit_arg4(jenv, jarg4, &local_arg4);
  btTransform local_arg5;
  gdx_setbtTransformFromMatrix4(jenv, local_arg5, jarg5);
  arg5 = &local_arg5;
  gdxAutoCommitMatrix4 auto_commit_arg5(jenv, jarg5, &local_arg5);
  result = (btConeTwistConstraint *)(arg1)->createConeTwistConstraint(*arg2,*arg3,(btTransform const &)*arg4,(btTransform const &)*arg5);
  *(btConeTwistConstraint **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btWorldImporter_1createConeTwistConstraint_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jobject jarg3) {
  jlong jresult = 0 ;
  btWorldImporter *arg1 = (btWorldImporter *) 0 ;
  btRigidBody *arg2 = 0 ;
  btTransform *arg3 = 0 ;
  btConeTwistConstraint *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(btWorldImporter **)&jarg1; 
  arg2 = *(btRigidBody **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "btRigidBody & reference is null");
    return 0;
  } 
  btTransform local_arg3;
  gdx_setbtTransformFromMatrix4(jenv, local_arg3, jarg3);
  arg3 = &local_arg3;
  gdxAutoCommitMatrix4 auto_commit_arg3(jenv, jarg3, &local_arg3);
  result = (btConeTwistConstraint *)(arg1)->createConeTwistConstraint(*arg2,(btTransform const &)*arg3);
  *(btConeTwistConstraint **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btWorldImporter_1createGeneric6DofConstraint_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jobject jarg4, jobject jarg5, jboolean jarg6) {
  jlong jresult = 0 ;
  btWorldImporter *arg1 = (btWorldImporter *) 0 ;
  btRigidBody *arg2 = 0 ;
  btRigidBody *arg3 = 0 ;
  btTransform *arg4 = 0 ;
  btTransform *arg5 = 0 ;
  bool arg6 ;
  btGeneric6DofConstraint *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(btWorldImporter **)&jarg1; 
  arg2 = *(btRigidBody **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "btRigidBody & reference is null");
    return 0;
  } 
  arg3 = *(btRigidBody **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "btRigidBody & reference is null");
    return 0;
  } 
  btTransform local_arg4;
  gdx_setbtTransformFromMatrix4(jenv, local_arg4, jarg4);
  arg4 = &local_arg4;
  gdxAutoCommitMatrix4 auto_commit_arg4(jenv, jarg4, &local_arg4);
  btTransform local_arg5;
  gdx_setbtTransformFromMatrix4(jenv, local_arg5, jarg5);
  arg5 = &local_arg5;
  gdxAutoCommitMatrix4 auto_commit_arg5(jenv, jarg5, &local_arg5);
  arg6 = jarg6 ? true : false; 
  result = (btGeneric6DofConstraint *)(arg1)->createGeneric6DofConstraint(*arg2,*arg3,(btTransform const &)*arg4,(btTransform const &)*arg5,arg6);
  *(btGeneric6DofConstraint **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btWorldImporter_1createGeneric6DofConstraint_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jobject jarg3, jboolean jarg4) {
  jlong jresult = 0 ;
  btWorldImporter *arg1 = (btWorldImporter *) 0 ;
  btRigidBody *arg2 = 0 ;
  btTransform *arg3 = 0 ;
  bool arg4 ;
  btGeneric6DofConstraint *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(btWorldImporter **)&jarg1; 
  arg2 = *(btRigidBody **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "btRigidBody & reference is null");
    return 0;
  } 
  btTransform local_arg3;
  gdx_setbtTransformFromMatrix4(jenv, local_arg3, jarg3);
  arg3 = &local_arg3;
  gdxAutoCommitMatrix4 auto_commit_arg3(jenv, jarg3, &local_arg3);
  arg4 = jarg4 ? true : false; 
  result = (btGeneric6DofConstraint *)(arg1)->createGeneric6DofConstraint(*arg2,(btTransform const &)*arg3,arg4);
  *(btGeneric6DofConstraint **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btWorldImporter_1createGeneric6DofSpringConstraint(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jobject jarg4, jobject jarg5, jboolean jarg6) {
  jlong jresult = 0 ;
  btWorldImporter *arg1 = (btWorldImporter *) 0 ;
  btRigidBody *arg2 = 0 ;
  btRigidBody *arg3 = 0 ;
  btTransform *arg4 = 0 ;
  btTransform *arg5 = 0 ;
  bool arg6 ;
  btGeneric6DofSpringConstraint *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(btWorldImporter **)&jarg1; 
  arg2 = *(btRigidBody **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "btRigidBody & reference is null");
    return 0;
  } 
  arg3 = *(btRigidBody **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "btRigidBody & reference is null");
    return 0;
  } 
  btTransform local_arg4;
  gdx_setbtTransformFromMatrix4(jenv, local_arg4, jarg4);
  arg4 = &local_arg4;
  gdxAutoCommitMatrix4 auto_commit_arg4(jenv, jarg4, &local_arg4);
  btTransform local_arg5;
  gdx_setbtTransformFromMatrix4(jenv, local_arg5, jarg5);
  arg5 = &local_arg5;
  gdxAutoCommitMatrix4 auto_commit_arg5(jenv, jarg5, &local_arg5);
  arg6 = jarg6 ? true : false; 
  result = (btGeneric6DofSpringConstraint *)(arg1)->createGeneric6DofSpringConstraint(*arg2,*arg3,(btTransform const &)*arg4,(btTransform const &)*arg5,arg6);
  *(btGeneric6DofSpringConstraint **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btWorldImporter_1createGeneric6DofSpring2Constraint(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jobject jarg4, jobject jarg5, jint jarg6) {
  jlong jresult = 0 ;
  btWorldImporter *arg1 = (btWorldImporter *) 0 ;
  btRigidBody *arg2 = 0 ;
  btRigidBody *arg3 = 0 ;
  btTransform *arg4 = 0 ;
  btTransform *arg5 = 0 ;
  int arg6 ;
  btGeneric6DofSpring2Constraint *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(btWorldImporter **)&jarg1; 
  arg2 = *(btRigidBody **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "btRigidBody & reference is null");
    return 0;
  } 
  arg3 = *(btRigidBody **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "btRigidBody & reference is null");
    return 0;
  } 
  btTransform local_arg4;
  gdx_setbtTransformFromMatrix4(jenv, local_arg4, jarg4);
  arg4 = &local_arg4;
  gdxAutoCommitMatrix4 auto_commit_arg4(jenv, jarg4, &local_arg4);
  btTransform local_arg5;
  gdx_setbtTransformFromMatrix4(jenv, local_arg5, jarg5);
  arg5 = &local_arg5;
  gdxAutoCommitMatrix4 auto_commit_arg5(jenv, jarg5, &local_arg5);
  arg6 = (int)jarg6; 
  result = (btGeneric6DofSpring2Constraint *)(arg1)->createGeneric6DofSpring2Constraint(*arg2,*arg3,(btTransform const &)*arg4,(btTransform const &)*arg5,arg6);
  *(btGeneric6DofSpring2Constraint **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btWorldImporter_1createSliderConstraint_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jobject jarg4, jobject jarg5, jboolean jarg6) {
  jlong jresult = 0 ;
  btWorldImporter *arg1 = (btWorldImporter *) 0 ;
  btRigidBody *arg2 = 0 ;
  btRigidBody *arg3 = 0 ;
  btTransform *arg4 = 0 ;
  btTransform *arg5 = 0 ;
  bool arg6 ;
  btSliderConstraint *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(btWorldImporter **)&jarg1; 
  arg2 = *(btRigidBody **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "btRigidBody & reference is null");
    return 0;
  } 
  arg3 = *(btRigidBody **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "btRigidBody & reference is null");
    return 0;
  } 
  btTransform local_arg4;
  gdx_setbtTransformFromMatrix4(jenv, local_arg4, jarg4);
  arg4 = &local_arg4;
  gdxAutoCommitMatrix4 auto_commit_arg4(jenv, jarg4, &local_arg4);
  btTransform local_arg5;
  gdx_setbtTransformFromMatrix4(jenv, local_arg5, jarg5);
  arg5 = &local_arg5;
  gdxAutoCommitMatrix4 auto_commit_arg5(jenv, jarg5, &local_arg5);
  arg6 = jarg6 ? true : false; 
  result = (btSliderConstraint *)(arg1)->createSliderConstraint(*arg2,*arg3,(btTransform const &)*arg4,(btTransform const &)*arg5,arg6);
  *(btSliderConstraint **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btWorldImporter_1createSliderConstraint_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jobject jarg3, jboolean jarg4) {
  jlong jresult = 0 ;
  btWorldImporter *arg1 = (btWorldImporter *) 0 ;
  btRigidBody *arg2 = 0 ;
  btTransform *arg3 = 0 ;
  bool arg4 ;
  btSliderConstraint *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(btWorldImporter **)&jarg1; 
  arg2 = *(btRigidBody **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "btRigidBody & reference is null");
    return 0;
  } 
  btTransform local_arg3;
  gdx_setbtTransformFromMatrix4(jenv, local_arg3, jarg3);
  arg3 = &local_arg3;
  gdxAutoCommitMatrix4 auto_commit_arg3(jenv, jarg3, &local_arg3);
  arg4 = jarg4 ? true : false; 
  result = (btSliderConstraint *)(arg1)->createSliderConstraint(*arg2,(btTransform const &)*arg3,arg4);
  *(btSliderConstraint **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btWorldImporter_1createGearConstraint(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jobject jarg4, jobject jarg5, jfloat jarg6) {
  jlong jresult = 0 ;
  btWorldImporter *arg1 = (btWorldImporter *) 0 ;
  btRigidBody *arg2 = 0 ;
  btRigidBody *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  btVector3 *arg5 = 0 ;
  btScalar arg6 ;
  btGearConstraint *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(btWorldImporter **)&jarg1; 
  arg2 = *(btRigidBody **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "btRigidBody & reference is null");
    return 0;
  } 
  arg3 = *(btRigidBody **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "btRigidBody & reference is null");
    return 0;
  } 
  btVector3 local_arg4;
  gdx_setbtVector3FromVector3(jenv, local_arg4, jarg4);
  arg4 = &local_arg4;
  gdxAutoCommitVector3 auto_commit_arg4(jenv, jarg4, &local_arg4);
  btVector3 local_arg5;
  gdx_setbtVector3FromVector3(jenv, local_arg5, jarg5);
  arg5 = &local_arg5;
  gdxAutoCommitVector3 auto_commit_arg5(jenv, jarg5, &local_arg5);
  arg6 = (btScalar)jarg6; 
  result = (btGearConstraint *)(arg1)->createGearConstraint(*arg2,*arg3,(btVector3 const &)*arg4,(btVector3 const &)*arg5,arg6);
  *(btGearConstraint **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btWorldImporter_1getNameForPointer(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jstring jresult = 0 ;
  btWorldImporter *arg1 = (btWorldImporter *) 0 ;
  unsigned long arg2 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(btWorldImporter **)&jarg1; 
  arg2 = (unsigned long)jarg2; 
  result = (char *)btWorldImporter_getNameForPointer(arg1,arg2);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_new_1btBulletWorldImporter_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  btDynamicsWorld *arg1 = (btDynamicsWorld *) 0 ;
  btBulletWorldImporter *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(btDynamicsWorld **)&jarg1; 
  result = (btBulletWorldImporter *)new SwigDirector_btBulletWorldImporter(jenv,arg1);
  *(btBulletWorldImporter **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_new_1btBulletWorldImporter_1_1SWIG_11(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  btBulletWorldImporter *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (btBulletWorldImporter *)new SwigDirector_btBulletWorldImporter(jenv);
  *(btBulletWorldImporter **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_delete_1btBulletWorldImporter(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  btBulletWorldImporter *arg1 = (btBulletWorldImporter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(btBulletWorldImporter **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jboolean JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btBulletWorldImporter_1loadFile_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  jboolean jresult = 0 ;
  btBulletWorldImporter *arg1 = (btBulletWorldImporter *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(btBulletWorldImporter **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  result = (bool)(arg1)->loadFile((char const *)arg2,(char const *)arg3);
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btBulletWorldImporter_1loadFile_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ;
  btBulletWorldImporter *arg1 = (btBulletWorldImporter *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(btBulletWorldImporter **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (bool)(arg1)->loadFile((char const *)arg2);
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btBulletWorldImporter_1loadFileFromMemory_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  btBulletWorldImporter *arg1 = (btBulletWorldImporter *) 0 ;
  bParse::btBulletFile *arg2 = (bParse::btBulletFile *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(btBulletWorldImporter **)&jarg1; 
  arg2 = *(bParse::btBulletFile **)&jarg2; 
  result = (bool)(arg1)->loadFileFromMemory(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btBulletWorldImporter_1convertAllObjects(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  btBulletWorldImporter *arg1 = (btBulletWorldImporter *) 0 ;
  bParse::btBulletFile *arg2 = (bParse::btBulletFile *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(btBulletWorldImporter **)&jarg1; 
  arg2 = *(bParse::btBulletFile **)&jarg2; 
  result = (bool)(arg1)->convertAllObjects(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btBulletWorldImporter_1convertAllObjectsSwigExplicitbtBulletWorldImporter(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  btBulletWorldImporter *arg1 = (btBulletWorldImporter *) 0 ;
  bParse::btBulletFile *arg2 = (bParse::btBulletFile *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(btBulletWorldImporter **)&jarg1; 
  arg2 = *(bParse::btBulletFile **)&jarg2; 
  result = (bool)(arg1)->btBulletWorldImporter::convertAllObjects(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btBulletWorldImporter_1loadFileFromMemory_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobject jarg2, jint jarg3) {
  jboolean jresult = 0 ;
  btBulletWorldImporter *arg1 = (btBulletWorldImporter *) 0 ;
  unsigned char *arg2 = (unsigned char *) 0 ;
  int arg3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(btBulletWorldImporter **)&jarg1; 
  {
    arg2 = (unsigned char*)jenv->GetDirectBufferAddress(jarg2);
    if (arg2 == NULL) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unable to get address of direct buffer. Buffer must be allocated direct.");
    }
  }
  arg3 = (int)jarg3; 
  result = (bool)btBulletWorldImporter_loadFileFromMemory__SWIG_1(arg1,arg2,arg3);
  jresult = (jboolean)result; 
  
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btBulletWorldImporter_1director_1connect(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jswig_mem_own, jboolean jweak_global) {
  btBulletWorldImporter *obj = *((btBulletWorldImporter **)&objarg);
  (void)jcls;
  SwigDirector_btBulletWorldImporter *director = (SwigDirector_btBulletWorldImporter *)(obj);
  if (director) {
    director->swig_connect_director(jenv, jself, jenv->GetObjectClass(jself), (jswig_mem_own == JNI_TRUE), (jweak_global == JNI_TRUE));
  }
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btBulletWorldImporter_1change_1ownership(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jtake_or_release) {
  btBulletWorldImporter *obj = *((btBulletWorldImporter **)&objarg);
  SwigDirector_btBulletWorldImporter *director = (SwigDirector_btBulletWorldImporter *)(obj);
  (void)jcls;
  if (director) {
    director->swig_java_change_ownership(jenv, jself, jtake_or_release ? true : false);
  }
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_delete_1bFile(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  bParse::bFile *arg1 = (bParse::bFile *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(bParse::bFile **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_bFile_1getFileDNA(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  bParse::bFile *arg1 = (bParse::bFile *) 0 ;
  bDNA *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(bParse::bFile **)&jarg1; 
  result = (bDNA *)(arg1)->getFileDNA();
  *(bDNA **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_bFile_1addDataBlock(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  bParse::bFile *arg1 = (bParse::bFile *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(bParse::bFile **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  (arg1)->addDataBlock(arg2);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jint JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_bFile_1getFlags(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  bParse::bFile *arg1 = (bParse::bFile *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(bParse::bFile **)&jarg1; 
  result = (int)((bParse::bFile const *)arg1)->getFlags();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_bFile_1setFileDNAisMemoryDNA(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  bParse::bFile *arg1 = (bParse::bFile *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(bParse::bFile **)&jarg1; 
  (arg1)->setFileDNAisMemoryDNA();
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_bFile_1getLibPointers(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  bParse::bFile *arg1 = (bParse::bFile *) 0 ;
  bPtrMap *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(bParse::bFile **)&jarg1; 
  result = (bPtrMap *) &(arg1)->getLibPointers();
  *(bPtrMap **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_bFile_1findLibPointer(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  bParse::bFile *arg1 = (bParse::bFile *) 0 ;
  void *arg2 = (void *) 0 ;
  void *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(bParse::bFile **)&jarg1; 
  arg2 = (void *)jarg2; 
  result = (void *)(arg1)->findLibPointer(arg2);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_bFile_1ok(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  bParse::bFile *arg1 = (bParse::bFile *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(bParse::bFile **)&jarg1; 
  result = (bool)(arg1)->ok();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_bFile_1parse(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  bParse::bFile *arg1 = (bParse::bFile *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(bParse::bFile **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->parse(arg2);
}


SWIGEXPORT jint JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_bFile_1write_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jboolean jarg3) {
  jint jresult = 0 ;
  bParse::bFile *arg1 = (bParse::bFile *) 0 ;
  char *arg2 = (char *) 0 ;
  bool arg3 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(bParse::bFile **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = jarg3 ? true : false; 
  result = (int)(arg1)->write((char const *)arg2,arg3);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_bFile_1write_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  bParse::bFile *arg1 = (bParse::bFile *) 0 ;
  char *arg2 = (char *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(bParse::bFile **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (int)(arg1)->write((char const *)arg2);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_bFile_1writeChunks(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jboolean jarg3) {
  bParse::bFile *arg1 = (bParse::bFile *) 0 ;
  FILE *arg2 = (FILE *) 0 ;
  bool arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(bParse::bFile **)&jarg1; 
  arg2 = *(FILE **)&jarg2; 
  arg3 = jarg3 ? true : false; 
  (arg1)->writeChunks(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_bFile_1writeDNA(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  bParse::bFile *arg1 = (bParse::bFile *) 0 ;
  FILE *arg2 = (FILE *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(bParse::bFile **)&jarg1; 
  arg2 = *(FILE **)&jarg2; 
  (arg1)->writeDNA(arg2);
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_bFile_1updateOldPointers(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  bParse::bFile *arg1 = (bParse::bFile *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(bParse::bFile **)&jarg1; 
  (arg1)->updateOldPointers();
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_bFile_1resolvePointers(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  bParse::bFile *arg1 = (bParse::bFile *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(bParse::bFile **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->resolvePointers(arg2);
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_bFile_1dumpChunks(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  bParse::bFile *arg1 = (bParse::bFile *) 0 ;
  bDNA *arg2 = (bDNA *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(bParse::bFile **)&jarg1; 
  arg2 = *(bDNA **)&jarg2; 
  (arg1)->dumpChunks(arg2);
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_bFile_1setFileDNA(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jstring jarg3, jint jarg4) {
  bParse::bFile *arg1 = (bParse::bFile *) 0 ;
  int arg2 ;
  char *arg3 = (char *) 0 ;
  int arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(bParse::bFile **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return ;
  }
  arg4 = (int)jarg4; 
  (arg1)->setFileDNA(arg2,arg3,arg4);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
}


SWIGEXPORT jint JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_bFile_1getVersion(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  bParse::bFile *arg1 = (bParse::bFile *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(bParse::bFile **)&jarg1; 
  result = (int)((bParse::bFile const *)arg1)->getVersion();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_bFile_1preSwap(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  bParse::bFile *arg1 = (bParse::bFile *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(bParse::bFile **)&jarg1; 
  (arg1)->preSwap();
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_bFile_1writeFile(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  bParse::bFile *arg1 = (bParse::bFile *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(bParse::bFile **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  (arg1)->writeFile((char const *)arg2);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_bStructHandle_1unused_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  bParse::bStructHandle *arg1 = (bParse::bStructHandle *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(bParse::bStructHandle **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->unused = arg2;
}


SWIGEXPORT jint JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_bStructHandle_1unused_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  bParse::bStructHandle *arg1 = (bParse::bStructHandle *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(bParse::bStructHandle **)&jarg1; 
  result = (int) ((arg1)->unused);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_new_1bStructHandle(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  bParse::bStructHandle *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (bParse::bStructHandle *)new bParse::bStructHandle();
  *(bParse::bStructHandle **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_delete_1bStructHandle(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  bParse::bStructHandle *arg1 = (bParse::bStructHandle *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(bParse::bStructHandle **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btBulletFile_1multiBodies_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  bParse::btBulletFile *arg1 = (bParse::btBulletFile *) 0 ;
  btAlignedObjectArray< bParse::bStructHandle * > *arg2 = (btAlignedObjectArray< bParse::bStructHandle * > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(bParse::btBulletFile **)&jarg1; 
  arg2 = *(btAlignedObjectArray< bParse::bStructHandle * > **)&jarg2; 
  if (arg1) (arg1)->m_multiBodies = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btBulletFile_1multiBodies_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  bParse::btBulletFile *arg1 = (bParse::btBulletFile *) 0 ;
  btAlignedObjectArray< bParse::bStructHandle * > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(bParse::btBulletFile **)&jarg1; 
  result = (btAlignedObjectArray< bParse::bStructHandle * > *)& ((arg1)->m_multiBodies);
  *(btAlignedObjectArray< bParse::bStructHandle * > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btBulletFile_1softBodies_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  bParse::btBulletFile *arg1 = (bParse::btBulletFile *) 0 ;
  btAlignedObjectArray< bParse::bStructHandle * > *arg2 = (btAlignedObjectArray< bParse::bStructHandle * > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(bParse::btBulletFile **)&jarg1; 
  arg2 = *(btAlignedObjectArray< bParse::bStructHandle * > **)&jarg2; 
  if (arg1) (arg1)->m_softBodies = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btBulletFile_1softBodies_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  bParse::btBulletFile *arg1 = (bParse::btBulletFile *) 0 ;
  btAlignedObjectArray< bParse::bStructHandle * > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(bParse::btBulletFile **)&jarg1; 
  result = (btAlignedObjectArray< bParse::bStructHandle * > *)& ((arg1)->m_softBodies);
  *(btAlignedObjectArray< bParse::bStructHandle * > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btBulletFile_1rigidBodies_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  bParse::btBulletFile *arg1 = (bParse::btBulletFile *) 0 ;
  btAlignedObjectArray< bParse::bStructHandle * > *arg2 = (btAlignedObjectArray< bParse::bStructHandle * > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(bParse::btBulletFile **)&jarg1; 
  arg2 = *(btAlignedObjectArray< bParse::bStructHandle * > **)&jarg2; 
  if (arg1) (arg1)->m_rigidBodies = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btBulletFile_1rigidBodies_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  bParse::btBulletFile *arg1 = (bParse::btBulletFile *) 0 ;
  btAlignedObjectArray< bParse::bStructHandle * > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(bParse::btBulletFile **)&jarg1; 
  result = (btAlignedObjectArray< bParse::bStructHandle * > *)& ((arg1)->m_rigidBodies);
  *(btAlignedObjectArray< bParse::bStructHandle * > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btBulletFile_1collisionObjects_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  bParse::btBulletFile *arg1 = (bParse::btBulletFile *) 0 ;
  btAlignedObjectArray< bParse::bStructHandle * > *arg2 = (btAlignedObjectArray< bParse::bStructHandle * > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(bParse::btBulletFile **)&jarg1; 
  arg2 = *(btAlignedObjectArray< bParse::bStructHandle * > **)&jarg2; 
  if (arg1) (arg1)->m_collisionObjects = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btBulletFile_1collisionObjects_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  bParse::btBulletFile *arg1 = (bParse::btBulletFile *) 0 ;
  btAlignedObjectArray< bParse::bStructHandle * > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(bParse::btBulletFile **)&jarg1; 
  result = (btAlignedObjectArray< bParse::bStructHandle * > *)& ((arg1)->m_collisionObjects);
  *(btAlignedObjectArray< bParse::bStructHandle * > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btBulletFile_1collisionShapes_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  bParse::btBulletFile *arg1 = (bParse::btBulletFile *) 0 ;
  btAlignedObjectArray< bParse::bStructHandle * > *arg2 = (btAlignedObjectArray< bParse::bStructHandle * > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(bParse::btBulletFile **)&jarg1; 
  arg2 = *(btAlignedObjectArray< bParse::bStructHandle * > **)&jarg2; 
  if (arg1) (arg1)->m_collisionShapes = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btBulletFile_1collisionShapes_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  bParse::btBulletFile *arg1 = (bParse::btBulletFile *) 0 ;
  btAlignedObjectArray< bParse::bStructHandle * > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(bParse::btBulletFile **)&jarg1; 
  result = (btAlignedObjectArray< bParse::bStructHandle * > *)& ((arg1)->m_collisionShapes);
  *(btAlignedObjectArray< bParse::bStructHandle * > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btBulletFile_1constraints_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  bParse::btBulletFile *arg1 = (bParse::btBulletFile *) 0 ;
  btAlignedObjectArray< bParse::bStructHandle * > *arg2 = (btAlignedObjectArray< bParse::bStructHandle * > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(bParse::btBulletFile **)&jarg1; 
  arg2 = *(btAlignedObjectArray< bParse::bStructHandle * > **)&jarg2; 
  if (arg1) (arg1)->m_constraints = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btBulletFile_1constraints_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  bParse::btBulletFile *arg1 = (bParse::btBulletFile *) 0 ;
  btAlignedObjectArray< bParse::bStructHandle * > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(bParse::btBulletFile **)&jarg1; 
  result = (btAlignedObjectArray< bParse::bStructHandle * > *)& ((arg1)->m_constraints);
  *(btAlignedObjectArray< bParse::bStructHandle * > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btBulletFile_1bvhs_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  bParse::btBulletFile *arg1 = (bParse::btBulletFile *) 0 ;
  btAlignedObjectArray< bParse::bStructHandle * > *arg2 = (btAlignedObjectArray< bParse::bStructHandle * > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(bParse::btBulletFile **)&jarg1; 
  arg2 = *(btAlignedObjectArray< bParse::bStructHandle * > **)&jarg2; 
  if (arg1) (arg1)->m_bvhs = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btBulletFile_1bvhs_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  bParse::btBulletFile *arg1 = (bParse::btBulletFile *) 0 ;
  btAlignedObjectArray< bParse::bStructHandle * > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(bParse::btBulletFile **)&jarg1; 
  result = (btAlignedObjectArray< bParse::bStructHandle * > *)& ((arg1)->m_bvhs);
  *(btAlignedObjectArray< bParse::bStructHandle * > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btBulletFile_1triangleInfoMaps_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  bParse::btBulletFile *arg1 = (bParse::btBulletFile *) 0 ;
  btAlignedObjectArray< bParse::bStructHandle * > *arg2 = (btAlignedObjectArray< bParse::bStructHandle * > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(bParse::btBulletFile **)&jarg1; 
  arg2 = *(btAlignedObjectArray< bParse::bStructHandle * > **)&jarg2; 
  if (arg1) (arg1)->m_triangleInfoMaps = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btBulletFile_1triangleInfoMaps_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  bParse::btBulletFile *arg1 = (bParse::btBulletFile *) 0 ;
  btAlignedObjectArray< bParse::bStructHandle * > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(bParse::btBulletFile **)&jarg1; 
  result = (btAlignedObjectArray< bParse::bStructHandle * > *)& ((arg1)->m_triangleInfoMaps);
  *(btAlignedObjectArray< bParse::bStructHandle * > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btBulletFile_1dynamicsWorldInfo_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  bParse::btBulletFile *arg1 = (bParse::btBulletFile *) 0 ;
  btAlignedObjectArray< bParse::bStructHandle * > *arg2 = (btAlignedObjectArray< bParse::bStructHandle * > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(bParse::btBulletFile **)&jarg1; 
  arg2 = *(btAlignedObjectArray< bParse::bStructHandle * > **)&jarg2; 
  if (arg1) (arg1)->m_dynamicsWorldInfo = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btBulletFile_1dynamicsWorldInfo_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  bParse::btBulletFile *arg1 = (bParse::btBulletFile *) 0 ;
  btAlignedObjectArray< bParse::bStructHandle * > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(bParse::btBulletFile **)&jarg1; 
  result = (btAlignedObjectArray< bParse::bStructHandle * > *)& ((arg1)->m_dynamicsWorldInfo);
  *(btAlignedObjectArray< bParse::bStructHandle * > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btBulletFile_1dataBlocks_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  bParse::btBulletFile *arg1 = (bParse::btBulletFile *) 0 ;
  btAlignedObjectArray< char * > *arg2 = (btAlignedObjectArray< char * > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(bParse::btBulletFile **)&jarg1; 
  arg2 = *(btAlignedObjectArray< char * > **)&jarg2; 
  if (arg1) (arg1)->m_dataBlocks = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btBulletFile_1dataBlocks_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  bParse::btBulletFile *arg1 = (bParse::btBulletFile *) 0 ;
  btAlignedObjectArray< char * > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(bParse::btBulletFile **)&jarg1; 
  result = (btAlignedObjectArray< char * > *)& ((arg1)->m_dataBlocks);
  *(btAlignedObjectArray< char * > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_new_1btBulletFile_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  bParse::btBulletFile *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (bParse::btBulletFile *)new bParse::btBulletFile();
  *(bParse::btBulletFile **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_new_1btBulletFile_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  bParse::btBulletFile *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  result = (bParse::btBulletFile *)new bParse::btBulletFile((char const *)arg1);
  *(bParse::btBulletFile **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_new_1btBulletFile_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jstring jarg1, jint jarg2) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  int arg2 ;
  bParse::btBulletFile *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = (int)jarg2; 
  result = (bParse::btBulletFile *)new bParse::btBulletFile(arg1,arg2);
  *(bParse::btBulletFile **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_delete_1btBulletFile(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  bParse::btBulletFile *arg1 = (bParse::btBulletFile *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(bParse::btBulletFile **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btBulletFile_1write_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jboolean jarg3) {
  jint jresult = 0 ;
  bParse::btBulletFile *arg1 = (bParse::btBulletFile *) 0 ;
  char *arg2 = (char *) 0 ;
  bool arg3 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(bParse::btBulletFile **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = jarg3 ? true : false; 
  result = (int)(arg1)->write((char const *)arg2,arg3);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btBulletFile_1write_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  bParse::btBulletFile *arg1 = (bParse::btBulletFile *) 0 ;
  char *arg2 = (char *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(bParse::btBulletFile **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (int)(arg1)->write((char const *)arg2);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btBulletFile_1parseData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  bParse::btBulletFile *arg1 = (bParse::btBulletFile *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(bParse::btBulletFile **)&jarg1; 
  (arg1)->parseData();
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btBulletFile_1addStruct(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jint jarg4, jlong jarg5, jint jarg6) {
  bParse::btBulletFile *arg1 = (bParse::btBulletFile *) 0 ;
  char *arg2 = (char *) 0 ;
  void *arg3 = (void *) 0 ;
  int arg4 ;
  void *arg5 = (void *) 0 ;
  int arg6 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(bParse::btBulletFile **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  arg3 = (void *)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (void *)jarg5; 
  arg6 = (int)jarg6; 
  (arg1)->addStruct((char const *)arg2,arg3,arg4,arg5,arg6);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_bNameInfo_1name_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  bParse::bNameInfo *arg1 = (bParse::bNameInfo *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(bParse::bNameInfo **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    delete [] arg1->m_name;
    if (arg2) {
      arg1->m_name = (char *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->m_name, (const char *)arg2);
    } else {
      arg1->m_name = 0;
    }
  }
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_bNameInfo_1name_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  bParse::bNameInfo *arg1 = (bParse::bNameInfo *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(bParse::bNameInfo **)&jarg1; 
  result = (char *) ((arg1)->m_name);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_bNameInfo_1isPointer_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  bParse::bNameInfo *arg1 = (bParse::bNameInfo *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(bParse::bNameInfo **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->m_isPointer = arg2;
}


SWIGEXPORT jboolean JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_bNameInfo_1isPointer_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  bParse::bNameInfo *arg1 = (bParse::bNameInfo *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(bParse::bNameInfo **)&jarg1; 
  result = (bool) ((arg1)->m_isPointer);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_bNameInfo_1dim0_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  bParse::bNameInfo *arg1 = (bParse::bNameInfo *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(bParse::bNameInfo **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_dim0 = arg2;
}


SWIGEXPORT jint JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_bNameInfo_1dim0_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  bParse::bNameInfo *arg1 = (bParse::bNameInfo *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(bParse::bNameInfo **)&jarg1; 
  result = (int) ((arg1)->m_dim0);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_bNameInfo_1dim1_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  bParse::bNameInfo *arg1 = (bParse::bNameInfo *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(bParse::bNameInfo **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_dim1 = arg2;
}


SWIGEXPORT jint JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_bNameInfo_1dim1_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  bParse::bNameInfo *arg1 = (bParse::bNameInfo *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(bParse::bNameInfo **)&jarg1; 
  result = (int) ((arg1)->m_dim1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_new_1bNameInfo(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  bParse::bNameInfo *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (bParse::bNameInfo *)new bParse::bNameInfo();
  *(bParse::bNameInfo **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_delete_1bNameInfo(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  bParse::bNameInfo *arg1 = (bParse::bNameInfo *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(bParse::bNameInfo **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_new_1bDNA(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  bParse::bDNA *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (bParse::bDNA *)new bParse::bDNA();
  *(bParse::bDNA **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_delete_1bDNA(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  bParse::bDNA *arg1 = (bParse::bDNA *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(bParse::bDNA **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_bDNA_1init_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jint jarg3, jboolean jarg4) {
  bParse::bDNA *arg1 = (bParse::bDNA *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  bool arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(bParse::bDNA **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  arg3 = (int)jarg3; 
  arg4 = jarg4 ? true : false; 
  (arg1)->init(arg2,arg3,arg4);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_bDNA_1init_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jint jarg3) {
  bParse::bDNA *arg1 = (bParse::bDNA *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(bParse::bDNA **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  arg3 = (int)jarg3; 
  (arg1)->init(arg2,arg3);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jint JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_bDNA_1getArraySize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  bParse::bDNA *arg1 = (bParse::bDNA *) 0 ;
  char *arg2 = (char *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(bParse::bDNA **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (int)(arg1)->getArraySize(arg2);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_bDNA_1getArraySizeNew(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  jint jresult = 0 ;
  bParse::bDNA *arg1 = (bParse::bDNA *) 0 ;
  short arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(bParse::bDNA **)&jarg1; 
  arg2 = (short)jarg2; 
  result = (int)(arg1)->getArraySizeNew(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_bDNA_1getElementSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2, jshort jarg3) {
  jint jresult = 0 ;
  bParse::bDNA *arg1 = (bParse::bDNA *) 0 ;
  short arg2 ;
  short arg3 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(bParse::bDNA **)&jarg1; 
  arg2 = (short)jarg2; 
  arg3 = (short)jarg3; 
  result = (int)(arg1)->getElementSize(arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_bDNA_1getNumNames(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  bParse::bDNA *arg1 = (bParse::bDNA *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(bParse::bDNA **)&jarg1; 
  result = (int)((bParse::bDNA const *)arg1)->getNumNames();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_bDNA_1getName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jstring jresult = 0 ;
  bParse::bDNA *arg1 = (bParse::bDNA *) 0 ;
  int arg2 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(bParse::bDNA **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (char *)(arg1)->getName(arg2);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_bDNA_1getType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jstring jresult = 0 ;
  bParse::bDNA *arg1 = (bParse::bDNA *) 0 ;
  int arg2 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(bParse::bDNA **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (char *)(arg1)->getType(arg2);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jobject JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_bDNA_1getStruct(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jobject jresult = 0 ;
  bParse::bDNA *arg1 = (bParse::bDNA *) 0 ;
  int arg2 ;
  short *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(bParse::bDNA **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (short *)(arg1)->getStruct(arg2);
  *(short **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jshort JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_bDNA_1getLength(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jshort jresult = 0 ;
  bParse::bDNA *arg1 = (bParse::bDNA *) 0 ;
  int arg2 ;
  short result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(bParse::bDNA **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (short)(arg1)->getLength(arg2);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_bDNA_1getReverseType_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  jint jresult = 0 ;
  bParse::bDNA *arg1 = (bParse::bDNA *) 0 ;
  short arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(bParse::bDNA **)&jarg1; 
  arg2 = (short)jarg2; 
  result = (int)(arg1)->getReverseType(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_bDNA_1getReverseType_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  bParse::bDNA *arg1 = (bParse::bDNA *) 0 ;
  char *arg2 = (char *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(bParse::bDNA **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (int)(arg1)->getReverseType((char const *)arg2);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_bDNA_1getNumStructs(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  bParse::bDNA *arg1 = (bParse::bDNA *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(bParse::bDNA **)&jarg1; 
  result = (int)(arg1)->getNumStructs();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_bDNA_1lessThan(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  bParse::bDNA *arg1 = (bParse::bDNA *) 0 ;
  bParse::bDNA *arg2 = (bParse::bDNA *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(bParse::bDNA **)&jarg1; 
  arg2 = *(bParse::bDNA **)&jarg2; 
  result = (bool)(arg1)->lessThan(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_bDNA_1initCmpFlags(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  bParse::bDNA *arg1 = (bParse::bDNA *) 0 ;
  bParse::bDNA *arg2 = (bParse::bDNA *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(bParse::bDNA **)&jarg1; 
  arg2 = *(bParse::bDNA **)&jarg2; 
  (arg1)->initCmpFlags(arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_bDNA_1flagNotEqual(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  bParse::bDNA *arg1 = (bParse::bDNA *) 0 ;
  int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(bParse::bDNA **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->flagNotEqual(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_bDNA_1flagEqual(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  bParse::bDNA *arg1 = (bParse::bDNA *) 0 ;
  int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(bParse::bDNA **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->flagEqual(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_bDNA_1flagNone(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  bParse::bDNA *arg1 = (bParse::bDNA *) 0 ;
  int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(bParse::bDNA **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->flagNone(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_bDNA_1getPointerSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  bParse::bDNA *arg1 = (bParse::bDNA *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(bParse::bDNA **)&jarg1; 
  result = (int)(arg1)->getPointerSize();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_bDNA_1dumpTypeDefinitions(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  bParse::bDNA *arg1 = (bParse::bDNA *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(bParse::bDNA **)&jarg1; 
  (arg1)->dumpTypeDefinitions();
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_new_1bChunkPtr4(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  bParse::bChunkPtr4 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (bParse::bChunkPtr4 *)new bParse::bChunkPtr4();
  *(bParse::bChunkPtr4 **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_bChunkPtr4_1code_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  bParse::bChunkPtr4 *arg1 = (bParse::bChunkPtr4 *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(bParse::bChunkPtr4 **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->code = arg2;
}


SWIGEXPORT jint JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_bChunkPtr4_1code_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  bParse::bChunkPtr4 *arg1 = (bParse::bChunkPtr4 *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(bParse::bChunkPtr4 **)&jarg1; 
  result = (int) ((arg1)->code);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_bChunkPtr4_1len_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  bParse::bChunkPtr4 *arg1 = (bParse::bChunkPtr4 *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(bParse::bChunkPtr4 **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->len = arg2;
}


SWIGEXPORT jint JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_bChunkPtr4_1len_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  bParse::bChunkPtr4 *arg1 = (bParse::bChunkPtr4 *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(bParse::bChunkPtr4 **)&jarg1; 
  result = (int) ((arg1)->len);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_bChunkPtr4_1uniqueInt_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  bParse::bChunkPtr4 *arg1 = (bParse::bChunkPtr4 *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(bParse::bChunkPtr4 **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_uniqueInt = arg2;
}


SWIGEXPORT jint JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_bChunkPtr4_1uniqueInt_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  bParse::bChunkPtr4 *arg1 = (bParse::bChunkPtr4 *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(bParse::bChunkPtr4 **)&jarg1; 
  result = (int) ((arg1)->m_uniqueInt);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_bChunkPtr4_1dna_1nr_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  bParse::bChunkPtr4 *arg1 = (bParse::bChunkPtr4 *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(bParse::bChunkPtr4 **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->dna_nr = arg2;
}


SWIGEXPORT jint JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_bChunkPtr4_1dna_1nr_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  bParse::bChunkPtr4 *arg1 = (bParse::bChunkPtr4 *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(bParse::bChunkPtr4 **)&jarg1; 
  result = (int) ((arg1)->dna_nr);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_bChunkPtr4_1nr_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  bParse::bChunkPtr4 *arg1 = (bParse::bChunkPtr4 *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(bParse::bChunkPtr4 **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->nr = arg2;
}


SWIGEXPORT jint JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_bChunkPtr4_1nr_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  bParse::bChunkPtr4 *arg1 = (bParse::bChunkPtr4 *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(bParse::bChunkPtr4 **)&jarg1; 
  result = (int) ((arg1)->nr);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_delete_1bChunkPtr4(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  bParse::bChunkPtr4 *arg1 = (bParse::bChunkPtr4 *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(bParse::bChunkPtr4 **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_new_1bChunkPtr8(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  bParse::bChunkPtr8 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (bParse::bChunkPtr8 *)new bParse::bChunkPtr8();
  *(bParse::bChunkPtr8 **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_bChunkPtr8_1code_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  bParse::bChunkPtr8 *arg1 = (bParse::bChunkPtr8 *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(bParse::bChunkPtr8 **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->code = arg2;
}


SWIGEXPORT jint JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_bChunkPtr8_1code_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  bParse::bChunkPtr8 *arg1 = (bParse::bChunkPtr8 *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(bParse::bChunkPtr8 **)&jarg1; 
  result = (int) ((arg1)->code);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_bChunkPtr8_1len_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  bParse::bChunkPtr8 *arg1 = (bParse::bChunkPtr8 *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(bParse::bChunkPtr8 **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->len = arg2;
}


SWIGEXPORT jint JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_bChunkPtr8_1len_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  bParse::bChunkPtr8 *arg1 = (bParse::bChunkPtr8 *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(bParse::bChunkPtr8 **)&jarg1; 
  result = (int) ((arg1)->len);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_bChunkPtr8_1oldPrev_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  bParse::bChunkPtr8 *arg1 = (bParse::bChunkPtr8 *) 0 ;
  long long arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(bParse::bChunkPtr8 **)&jarg1; 
  arg2 = (long long)jarg2; 
  if (arg1) (arg1)->oldPrev = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_bChunkPtr8_1oldPrev_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  bParse::bChunkPtr8 *arg1 = (bParse::bChunkPtr8 *) 0 ;
  long long result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(bParse::bChunkPtr8 **)&jarg1; 
  result = (long long) ((arg1)->oldPrev);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_bChunkPtr8_1uniqueInts_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jintArray jarg2) {
  bParse::bChunkPtr8 *arg1 = (bParse::bChunkPtr8 *) 0 ;
  int *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(bParse::bChunkPtr8 **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != 2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  arg2 = (int *)jenv->GetPrimitiveArrayCritical(jarg2, 0); 
  {
    size_t ii;
    int *b = (int *) arg1->m_uniqueInts;
    for (ii = 0; ii < (size_t)2; ii++) b[ii] = *((int *) arg2 + ii);
  }
  jenv->ReleasePrimitiveArrayCritical(jarg2, (int *)arg2, 0); 
}


SWIGEXPORT jintArray JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_bChunkPtr8_1uniqueInts_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jintArray jresult = 0 ;
  bParse::bChunkPtr8 *arg1 = (bParse::bChunkPtr8 *) 0 ;
  int *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(bParse::bChunkPtr8 **)&jarg1; 
  result = (int *)(int *) ((arg1)->m_uniqueInts);
  /*jresult = SWIG_JavaArrayOut##Int(jenv, (int *)result, 2);*/ 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_bChunkPtr8_1dna_1nr_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  bParse::bChunkPtr8 *arg1 = (bParse::bChunkPtr8 *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(bParse::bChunkPtr8 **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->dna_nr = arg2;
}


SWIGEXPORT jint JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_bChunkPtr8_1dna_1nr_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  bParse::bChunkPtr8 *arg1 = (bParse::bChunkPtr8 *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(bParse::bChunkPtr8 **)&jarg1; 
  result = (int) ((arg1)->dna_nr);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_bChunkPtr8_1nr_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  bParse::bChunkPtr8 *arg1 = (bParse::bChunkPtr8 *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(bParse::bChunkPtr8 **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->nr = arg2;
}


SWIGEXPORT jint JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_bChunkPtr8_1nr_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  bParse::bChunkPtr8 *arg1 = (bParse::bChunkPtr8 *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(bParse::bChunkPtr8 **)&jarg1; 
  result = (int) ((arg1)->nr);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_delete_1bChunkPtr8(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  bParse::bChunkPtr8 *arg1 = (bParse::bChunkPtr8 *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(bParse::bChunkPtr8 **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_new_1bChunkInd(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  bParse::bChunkInd *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (bParse::bChunkInd *)new bParse::bChunkInd();
  *(bParse::bChunkInd **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_bChunkInd_1code_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  bParse::bChunkInd *arg1 = (bParse::bChunkInd *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(bParse::bChunkInd **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->code = arg2;
}


SWIGEXPORT jint JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_bChunkInd_1code_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  bParse::bChunkInd *arg1 = (bParse::bChunkInd *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(bParse::bChunkInd **)&jarg1; 
  result = (int) ((arg1)->code);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_bChunkInd_1len_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  bParse::bChunkInd *arg1 = (bParse::bChunkInd *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(bParse::bChunkInd **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->len = arg2;
}


SWIGEXPORT jint JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_bChunkInd_1len_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  bParse::bChunkInd *arg1 = (bParse::bChunkInd *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(bParse::bChunkInd **)&jarg1; 
  result = (int) ((arg1)->len);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_bChunkInd_1oldPtr_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  bParse::bChunkInd *arg1 = (bParse::bChunkInd *) 0 ;
  void *arg2 = (void *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(bParse::bChunkInd **)&jarg1; 
  arg2 = (void *)jarg2; 
  if (arg1) (arg1)->oldPtr = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_bChunkInd_1oldPtr_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  bParse::bChunkInd *arg1 = (bParse::bChunkInd *) 0 ;
  void *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(bParse::bChunkInd **)&jarg1; 
  result = (void *) ((arg1)->oldPtr);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_bChunkInd_1dna_1nr_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  bParse::bChunkInd *arg1 = (bParse::bChunkInd *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(bParse::bChunkInd **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->dna_nr = arg2;
}


SWIGEXPORT jint JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_bChunkInd_1dna_1nr_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  bParse::bChunkInd *arg1 = (bParse::bChunkInd *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(bParse::bChunkInd **)&jarg1; 
  result = (int) ((arg1)->dna_nr);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_bChunkInd_1nr_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  bParse::bChunkInd *arg1 = (bParse::bChunkInd *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(bParse::bChunkInd **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->nr = arg2;
}


SWIGEXPORT jint JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_bChunkInd_1nr_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  bParse::bChunkInd *arg1 = (bParse::bChunkInd *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(bParse::bChunkInd **)&jarg1; 
  result = (int) ((arg1)->nr);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_delete_1bChunkInd(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  bParse::bChunkInd *arg1 = (bParse::bChunkInd *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(bParse::bChunkInd **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_ChunkUtils_1getOffset(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jint jresult = 0 ;
  int arg1 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  result = (int)bParse::ChunkUtils::getOffset(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jshort JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_ChunkUtils_1swapShort(JNIEnv *jenv, jclass jcls, jshort jarg1) {
  jshort jresult = 0 ;
  short arg1 ;
  short result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (short)jarg1; 
  result = (short)bParse::ChunkUtils::swapShort(arg1);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_ChunkUtils_1swapInt(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jint jresult = 0 ;
  int arg1 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  result = (int)bParse::ChunkUtils::swapInt(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_ChunkUtils_1swapLong64(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  long long arg1 ;
  long long result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (long long)jarg1; 
  result = (long long)bParse::ChunkUtils::swapLong64(arg1);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_new_1ChunkUtils(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  bParse::ChunkUtils *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (bParse::ChunkUtils *)new bParse::ChunkUtils();
  *(bParse::ChunkUtils **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_delete_1ChunkUtils(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  bParse::ChunkUtils *arg1 = (bParse::ChunkUtils *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(bParse::ChunkUtils **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_CHUNK_1HEADER_1LEN_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(int)bParse::CHUNK_HEADER_LEN;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_VOID_1IS_18_1get(JNIEnv *jenv, jclass jcls) {
  jboolean jresult = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  result = (bool)(bool)bParse::VOID_IS_8;
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_bInvalidHandle_1unused_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Bullet::bInvalidHandle *arg1 = (Bullet::bInvalidHandle *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::bInvalidHandle **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->unused = arg2;
}


SWIGEXPORT jint JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_bInvalidHandle_1unused_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Bullet::bInvalidHandle *arg1 = (Bullet::bInvalidHandle *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::bInvalidHandle **)&jarg1; 
  result = (int) ((arg1)->unused);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_new_1bInvalidHandle(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Bullet::bInvalidHandle *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Bullet::bInvalidHandle *)new Bullet::bInvalidHandle();
  *(Bullet::bInvalidHandle **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_delete_1bInvalidHandle(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Bullet::bInvalidHandle *arg1 = (Bullet::bInvalidHandle *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Bullet::bInvalidHandle **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_PointerArray_1size_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Bullet::PointerArray *arg1 = (Bullet::PointerArray *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::PointerArray **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_size = arg2;
}


SWIGEXPORT jint JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_PointerArray_1size_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Bullet::PointerArray *arg1 = (Bullet::PointerArray *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::PointerArray **)&jarg1; 
  result = (int) ((arg1)->m_size);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_PointerArray_1capacity_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Bullet::PointerArray *arg1 = (Bullet::PointerArray *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::PointerArray **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_capacity = arg2;
}


SWIGEXPORT jint JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_PointerArray_1capacity_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Bullet::PointerArray *arg1 = (Bullet::PointerArray *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::PointerArray **)&jarg1; 
  result = (int) ((arg1)->m_capacity);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_PointerArray_1data_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  Bullet::PointerArray *arg1 = (Bullet::PointerArray *) 0 ;
  void *arg2 = (void *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::PointerArray **)&jarg1; 
  arg2 = (void *)jarg2; 
  if (arg1) (arg1)->m_data = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_PointerArray_1data_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Bullet::PointerArray *arg1 = (Bullet::PointerArray *) 0 ;
  void *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::PointerArray **)&jarg1; 
  result = (void *) ((arg1)->m_data);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_new_1PointerArray(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Bullet::PointerArray *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Bullet::PointerArray *)new Bullet::PointerArray();
  *(Bullet::PointerArray **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_delete_1PointerArray(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Bullet::PointerArray *arg1 = (Bullet::PointerArray *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Bullet::PointerArray **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btPhysicsSystem_1collisionShapes_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Bullet::btPhysicsSystem *arg1 = (Bullet::btPhysicsSystem *) 0 ;
  Bullet::PointerArray *arg2 = (Bullet::PointerArray *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Bullet::btPhysicsSystem **)&jarg1; 
  arg2 = *(Bullet::PointerArray **)&jarg2; 
  if (arg1) (arg1)->m_collisionShapes = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btPhysicsSystem_1collisionShapes_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Bullet::btPhysicsSystem *arg1 = (Bullet::btPhysicsSystem *) 0 ;
  Bullet::PointerArray *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btPhysicsSystem **)&jarg1; 
  result = (Bullet::PointerArray *)& ((arg1)->m_collisionShapes);
  *(Bullet::PointerArray **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btPhysicsSystem_1collisionObjects_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Bullet::btPhysicsSystem *arg1 = (Bullet::btPhysicsSystem *) 0 ;
  Bullet::PointerArray *arg2 = (Bullet::PointerArray *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Bullet::btPhysicsSystem **)&jarg1; 
  arg2 = *(Bullet::PointerArray **)&jarg2; 
  if (arg1) (arg1)->m_collisionObjects = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btPhysicsSystem_1collisionObjects_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Bullet::btPhysicsSystem *arg1 = (Bullet::btPhysicsSystem *) 0 ;
  Bullet::PointerArray *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btPhysicsSystem **)&jarg1; 
  result = (Bullet::PointerArray *)& ((arg1)->m_collisionObjects);
  *(Bullet::PointerArray **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btPhysicsSystem_1constraints_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Bullet::btPhysicsSystem *arg1 = (Bullet::btPhysicsSystem *) 0 ;
  Bullet::PointerArray *arg2 = (Bullet::PointerArray *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Bullet::btPhysicsSystem **)&jarg1; 
  arg2 = *(Bullet::PointerArray **)&jarg2; 
  if (arg1) (arg1)->m_constraints = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btPhysicsSystem_1constraints_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Bullet::btPhysicsSystem *arg1 = (Bullet::btPhysicsSystem *) 0 ;
  Bullet::PointerArray *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btPhysicsSystem **)&jarg1; 
  result = (Bullet::PointerArray *)& ((arg1)->m_constraints);
  *(Bullet::PointerArray **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_new_1btPhysicsSystem(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Bullet::btPhysicsSystem *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Bullet::btPhysicsSystem *)new Bullet::btPhysicsSystem();
  *(Bullet::btPhysicsSystem **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_delete_1btPhysicsSystem(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Bullet::btPhysicsSystem *arg1 = (Bullet::btPhysicsSystem *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Bullet::btPhysicsSystem **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_ListBase_1first_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  Bullet::ListBase *arg1 = (Bullet::ListBase *) 0 ;
  void *arg2 = (void *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::ListBase **)&jarg1; 
  arg2 = (void *)jarg2; 
  if (arg1) (arg1)->first = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_ListBase_1first_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Bullet::ListBase *arg1 = (Bullet::ListBase *) 0 ;
  void *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::ListBase **)&jarg1; 
  result = (void *) ((arg1)->first);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_ListBase_1last_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  Bullet::ListBase *arg1 = (Bullet::ListBase *) 0 ;
  void *arg2 = (void *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::ListBase **)&jarg1; 
  arg2 = (void *)jarg2; 
  if (arg1) (arg1)->last = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_ListBase_1last_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Bullet::ListBase *arg1 = (Bullet::ListBase *) 0 ;
  void *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::ListBase **)&jarg1; 
  result = (void *) ((arg1)->last);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_new_1ListBase(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Bullet::ListBase *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Bullet::ListBase *)new Bullet::ListBase();
  *(Bullet::ListBase **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_delete_1ListBase(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Bullet::ListBase *arg1 = (Bullet::ListBase *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Bullet::ListBase **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btVector3FloatData_1floats_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloatArray jarg2) {
  Bullet::btVector3FloatData *arg1 = (Bullet::btVector3FloatData *) 0 ;
  float *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btVector3FloatData **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != 4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  arg2 = (float *)jenv->GetPrimitiveArrayCritical(jarg2, 0); 
  {
    size_t ii;
    float *b = (float *) arg1->m_floats;
    for (ii = 0; ii < (size_t)4; ii++) b[ii] = *((float *) arg2 + ii);
  }
  jenv->ReleasePrimitiveArrayCritical(jarg2, (float *)arg2, 0); 
}


SWIGEXPORT jfloatArray JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btVector3FloatData_1floats_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloatArray jresult = 0 ;
  Bullet::btVector3FloatData *arg1 = (Bullet::btVector3FloatData *) 0 ;
  float *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btVector3FloatData **)&jarg1; 
  result = (float *)(float *) ((arg1)->m_floats);
  /*jresult = SWIG_JavaArrayOut##Float(jenv, (float *)result, 4);*/ 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_new_1btVector3FloatData(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Bullet::btVector3FloatData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Bullet::btVector3FloatData *)new Bullet::btVector3FloatData();
  *(Bullet::btVector3FloatData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_delete_1btVector3FloatData(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Bullet::btVector3FloatData *arg1 = (Bullet::btVector3FloatData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Bullet::btVector3FloatData **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btVector3DoubleData_1floats_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  Bullet::btVector3DoubleData *arg1 = (Bullet::btVector3DoubleData *) 0 ;
  double *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btVector3DoubleData **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != 4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  arg2 = (double *)jenv->GetPrimitiveArrayCritical(jarg2, 0); 
  {
    size_t ii;
    double *b = (double *) arg1->m_floats;
    for (ii = 0; ii < (size_t)4; ii++) b[ii] = *((double *) arg2 + ii);
  }
  jenv->ReleasePrimitiveArrayCritical(jarg2, (double *)arg2, 0); 
}


SWIGEXPORT jdoubleArray JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btVector3DoubleData_1floats_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdoubleArray jresult = 0 ;
  Bullet::btVector3DoubleData *arg1 = (Bullet::btVector3DoubleData *) 0 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btVector3DoubleData **)&jarg1; 
  result = (double *)(double *) ((arg1)->m_floats);
  /*jresult = SWIG_JavaArrayOut##Double(jenv, (double *)result, 4);*/ 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_new_1btVector3DoubleData(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Bullet::btVector3DoubleData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Bullet::btVector3DoubleData *)new Bullet::btVector3DoubleData();
  *(Bullet::btVector3DoubleData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_delete_1btVector3DoubleData(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Bullet::btVector3DoubleData *arg1 = (Bullet::btVector3DoubleData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Bullet::btVector3DoubleData **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btQuaternionFloatData_1floats_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloatArray jarg2) {
  Bullet::btQuaternionFloatData *arg1 = (Bullet::btQuaternionFloatData *) 0 ;
  float *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btQuaternionFloatData **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != 4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  arg2 = (float *)jenv->GetPrimitiveArrayCritical(jarg2, 0); 
  {
    size_t ii;
    float *b = (float *) arg1->m_floats;
    for (ii = 0; ii < (size_t)4; ii++) b[ii] = *((float *) arg2 + ii);
  }
  jenv->ReleasePrimitiveArrayCritical(jarg2, (float *)arg2, 0); 
}


SWIGEXPORT jfloatArray JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btQuaternionFloatData_1floats_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloatArray jresult = 0 ;
  Bullet::btQuaternionFloatData *arg1 = (Bullet::btQuaternionFloatData *) 0 ;
  float *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btQuaternionFloatData **)&jarg1; 
  result = (float *)(float *) ((arg1)->m_floats);
  /*jresult = SWIG_JavaArrayOut##Float(jenv, (float *)result, 4);*/ 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_new_1btQuaternionFloatData(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Bullet::btQuaternionFloatData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Bullet::btQuaternionFloatData *)new Bullet::btQuaternionFloatData();
  *(Bullet::btQuaternionFloatData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_delete_1btQuaternionFloatData(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Bullet::btQuaternionFloatData *arg1 = (Bullet::btQuaternionFloatData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Bullet::btQuaternionFloatData **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btQuaternionDoubleData_1floats_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  Bullet::btQuaternionDoubleData *arg1 = (Bullet::btQuaternionDoubleData *) 0 ;
  double *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btQuaternionDoubleData **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != 4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  arg2 = (double *)jenv->GetPrimitiveArrayCritical(jarg2, 0); 
  {
    size_t ii;
    double *b = (double *) arg1->m_floats;
    for (ii = 0; ii < (size_t)4; ii++) b[ii] = *((double *) arg2 + ii);
  }
  jenv->ReleasePrimitiveArrayCritical(jarg2, (double *)arg2, 0); 
}


SWIGEXPORT jdoubleArray JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btQuaternionDoubleData_1floats_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdoubleArray jresult = 0 ;
  Bullet::btQuaternionDoubleData *arg1 = (Bullet::btQuaternionDoubleData *) 0 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btQuaternionDoubleData **)&jarg1; 
  result = (double *)(double *) ((arg1)->m_floats);
  /*jresult = SWIG_JavaArrayOut##Double(jenv, (double *)result, 4);*/ 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_new_1btQuaternionDoubleData(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Bullet::btQuaternionDoubleData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Bullet::btQuaternionDoubleData *)new Bullet::btQuaternionDoubleData();
  *(Bullet::btQuaternionDoubleData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_delete_1btQuaternionDoubleData(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Bullet::btQuaternionDoubleData *arg1 = (Bullet::btQuaternionDoubleData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Bullet::btQuaternionDoubleData **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btMatrix3x3FloatData_1el_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Bullet::btMatrix3x3FloatData *arg1 = (Bullet::btMatrix3x3FloatData *) 0 ;
  Bullet::btVector3FloatData *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Bullet::btMatrix3x3FloatData **)&jarg1; 
  arg2 = *(Bullet::btVector3FloatData **)&jarg2; 
  {
    size_t ii;
    Bullet::btVector3FloatData *b = (Bullet::btVector3FloatData *) arg1->m_el;
    for (ii = 0; ii < (size_t)3; ii++) b[ii] = *((Bullet::btVector3FloatData *) arg2 + ii);
  }
  
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btMatrix3x3FloatData_1el_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Bullet::btMatrix3x3FloatData *arg1 = (Bullet::btMatrix3x3FloatData *) 0 ;
  Bullet::btVector3FloatData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btMatrix3x3FloatData **)&jarg1; 
  result = (Bullet::btVector3FloatData *)(Bullet::btVector3FloatData *) ((arg1)->m_el);
  *(Bullet::btVector3FloatData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_new_1btMatrix3x3FloatData(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Bullet::btMatrix3x3FloatData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Bullet::btMatrix3x3FloatData *)new Bullet::btMatrix3x3FloatData();
  *(Bullet::btMatrix3x3FloatData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_delete_1btMatrix3x3FloatData(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Bullet::btMatrix3x3FloatData *arg1 = (Bullet::btMatrix3x3FloatData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Bullet::btMatrix3x3FloatData **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btMatrix3x3DoubleData_1el_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Bullet::btMatrix3x3DoubleData *arg1 = (Bullet::btMatrix3x3DoubleData *) 0 ;
  Bullet::btVector3DoubleData *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Bullet::btMatrix3x3DoubleData **)&jarg1; 
  arg2 = *(Bullet::btVector3DoubleData **)&jarg2; 
  {
    size_t ii;
    Bullet::btVector3DoubleData *b = (Bullet::btVector3DoubleData *) arg1->m_el;
    for (ii = 0; ii < (size_t)3; ii++) b[ii] = *((Bullet::btVector3DoubleData *) arg2 + ii);
  }
  
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btMatrix3x3DoubleData_1el_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Bullet::btMatrix3x3DoubleData *arg1 = (Bullet::btMatrix3x3DoubleData *) 0 ;
  Bullet::btVector3DoubleData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btMatrix3x3DoubleData **)&jarg1; 
  result = (Bullet::btVector3DoubleData *)(Bullet::btVector3DoubleData *) ((arg1)->m_el);
  *(Bullet::btVector3DoubleData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_new_1btMatrix3x3DoubleData(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Bullet::btMatrix3x3DoubleData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Bullet::btMatrix3x3DoubleData *)new Bullet::btMatrix3x3DoubleData();
  *(Bullet::btMatrix3x3DoubleData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_delete_1btMatrix3x3DoubleData(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Bullet::btMatrix3x3DoubleData *arg1 = (Bullet::btMatrix3x3DoubleData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Bullet::btMatrix3x3DoubleData **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btTransformFloatData_1basis_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Bullet::btTransformFloatData *arg1 = (Bullet::btTransformFloatData *) 0 ;
  Bullet::btMatrix3x3FloatData *arg2 = (Bullet::btMatrix3x3FloatData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Bullet::btTransformFloatData **)&jarg1; 
  arg2 = *(Bullet::btMatrix3x3FloatData **)&jarg2; 
  if (arg1) (arg1)->m_basis = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btTransformFloatData_1basis_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Bullet::btTransformFloatData *arg1 = (Bullet::btTransformFloatData *) 0 ;
  Bullet::btMatrix3x3FloatData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btTransformFloatData **)&jarg1; 
  result = (Bullet::btMatrix3x3FloatData *)& ((arg1)->m_basis);
  *(Bullet::btMatrix3x3FloatData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btTransformFloatData_1origin_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Bullet::btTransformFloatData *arg1 = (Bullet::btTransformFloatData *) 0 ;
  Bullet::btVector3FloatData *arg2 = (Bullet::btVector3FloatData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Bullet::btTransformFloatData **)&jarg1; 
  arg2 = *(Bullet::btVector3FloatData **)&jarg2; 
  if (arg1) (arg1)->m_origin = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btTransformFloatData_1origin_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Bullet::btTransformFloatData *arg1 = (Bullet::btTransformFloatData *) 0 ;
  Bullet::btVector3FloatData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btTransformFloatData **)&jarg1; 
  result = (Bullet::btVector3FloatData *)& ((arg1)->m_origin);
  *(Bullet::btVector3FloatData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_new_1btTransformFloatData(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Bullet::btTransformFloatData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Bullet::btTransformFloatData *)new Bullet::btTransformFloatData();
  *(Bullet::btTransformFloatData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_delete_1btTransformFloatData(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Bullet::btTransformFloatData *arg1 = (Bullet::btTransformFloatData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Bullet::btTransformFloatData **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btTransformDoubleData_1basis_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Bullet::btTransformDoubleData *arg1 = (Bullet::btTransformDoubleData *) 0 ;
  Bullet::btMatrix3x3DoubleData *arg2 = (Bullet::btMatrix3x3DoubleData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Bullet::btTransformDoubleData **)&jarg1; 
  arg2 = *(Bullet::btMatrix3x3DoubleData **)&jarg2; 
  if (arg1) (arg1)->m_basis = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btTransformDoubleData_1basis_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Bullet::btTransformDoubleData *arg1 = (Bullet::btTransformDoubleData *) 0 ;
  Bullet::btMatrix3x3DoubleData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btTransformDoubleData **)&jarg1; 
  result = (Bullet::btMatrix3x3DoubleData *)& ((arg1)->m_basis);
  *(Bullet::btMatrix3x3DoubleData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btTransformDoubleData_1origin_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Bullet::btTransformDoubleData *arg1 = (Bullet::btTransformDoubleData *) 0 ;
  Bullet::btVector3DoubleData *arg2 = (Bullet::btVector3DoubleData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Bullet::btTransformDoubleData **)&jarg1; 
  arg2 = *(Bullet::btVector3DoubleData **)&jarg2; 
  if (arg1) (arg1)->m_origin = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btTransformDoubleData_1origin_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Bullet::btTransformDoubleData *arg1 = (Bullet::btTransformDoubleData *) 0 ;
  Bullet::btVector3DoubleData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btTransformDoubleData **)&jarg1; 
  result = (Bullet::btVector3DoubleData *)& ((arg1)->m_origin);
  *(Bullet::btVector3DoubleData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_new_1btTransformDoubleData(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Bullet::btTransformDoubleData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Bullet::btTransformDoubleData *)new Bullet::btTransformDoubleData();
  *(Bullet::btTransformDoubleData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_delete_1btTransformDoubleData(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Bullet::btTransformDoubleData *arg1 = (Bullet::btTransformDoubleData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Bullet::btTransformDoubleData **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btBvhSubtreeInfoData_1rootNodeIndex_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Bullet::btBvhSubtreeInfoData *arg1 = (Bullet::btBvhSubtreeInfoData *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btBvhSubtreeInfoData **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_rootNodeIndex = arg2;
}


SWIGEXPORT jint JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btBvhSubtreeInfoData_1rootNodeIndex_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Bullet::btBvhSubtreeInfoData *arg1 = (Bullet::btBvhSubtreeInfoData *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btBvhSubtreeInfoData **)&jarg1; 
  result = (int) ((arg1)->m_rootNodeIndex);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btBvhSubtreeInfoData_1subtreeSize_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Bullet::btBvhSubtreeInfoData *arg1 = (Bullet::btBvhSubtreeInfoData *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btBvhSubtreeInfoData **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_subtreeSize = arg2;
}


SWIGEXPORT jint JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btBvhSubtreeInfoData_1subtreeSize_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Bullet::btBvhSubtreeInfoData *arg1 = (Bullet::btBvhSubtreeInfoData *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btBvhSubtreeInfoData **)&jarg1; 
  result = (int) ((arg1)->m_subtreeSize);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btBvhSubtreeInfoData_1quantizedAabbMin_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshortArray jarg2) {
  Bullet::btBvhSubtreeInfoData *arg1 = (Bullet::btBvhSubtreeInfoData *) 0 ;
  short *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btBvhSubtreeInfoData **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  arg2 = (short *)jenv->GetPrimitiveArrayCritical(jarg2, 0); 
  {
    size_t ii;
    short *b = (short *) arg1->m_quantizedAabbMin;
    for (ii = 0; ii < (size_t)3; ii++) b[ii] = *((short *) arg2 + ii);
  }
  jenv->ReleasePrimitiveArrayCritical(jarg2, (short *)arg2, 0); 
}


SWIGEXPORT jshortArray JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btBvhSubtreeInfoData_1quantizedAabbMin_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshortArray jresult = 0 ;
  Bullet::btBvhSubtreeInfoData *arg1 = (Bullet::btBvhSubtreeInfoData *) 0 ;
  short *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btBvhSubtreeInfoData **)&jarg1; 
  result = (short *)(short *) ((arg1)->m_quantizedAabbMin);
  /*jresult = SWIG_JavaArrayOut##Short(jenv, (short *)result, 3);*/ 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btBvhSubtreeInfoData_1quantizedAabbMax_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshortArray jarg2) {
  Bullet::btBvhSubtreeInfoData *arg1 = (Bullet::btBvhSubtreeInfoData *) 0 ;
  short *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btBvhSubtreeInfoData **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  arg2 = (short *)jenv->GetPrimitiveArrayCritical(jarg2, 0); 
  {
    size_t ii;
    short *b = (short *) arg1->m_quantizedAabbMax;
    for (ii = 0; ii < (size_t)3; ii++) b[ii] = *((short *) arg2 + ii);
  }
  jenv->ReleasePrimitiveArrayCritical(jarg2, (short *)arg2, 0); 
}


SWIGEXPORT jshortArray JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btBvhSubtreeInfoData_1quantizedAabbMax_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshortArray jresult = 0 ;
  Bullet::btBvhSubtreeInfoData *arg1 = (Bullet::btBvhSubtreeInfoData *) 0 ;
  short *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btBvhSubtreeInfoData **)&jarg1; 
  result = (short *)(short *) ((arg1)->m_quantizedAabbMax);
  /*jresult = SWIG_JavaArrayOut##Short(jenv, (short *)result, 3);*/ 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_new_1btBvhSubtreeInfoData(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Bullet::btBvhSubtreeInfoData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Bullet::btBvhSubtreeInfoData *)new Bullet::btBvhSubtreeInfoData();
  *(Bullet::btBvhSubtreeInfoData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_delete_1btBvhSubtreeInfoData(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Bullet::btBvhSubtreeInfoData *arg1 = (Bullet::btBvhSubtreeInfoData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Bullet::btBvhSubtreeInfoData **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btOptimizedBvhNodeFloatData_1aabbMinOrg_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Bullet::btOptimizedBvhNodeFloatData *arg1 = (Bullet::btOptimizedBvhNodeFloatData *) 0 ;
  Bullet::btVector3FloatData *arg2 = (Bullet::btVector3FloatData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Bullet::btOptimizedBvhNodeFloatData **)&jarg1; 
  arg2 = *(Bullet::btVector3FloatData **)&jarg2; 
  if (arg1) (arg1)->m_aabbMinOrg = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btOptimizedBvhNodeFloatData_1aabbMinOrg_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Bullet::btOptimizedBvhNodeFloatData *arg1 = (Bullet::btOptimizedBvhNodeFloatData *) 0 ;
  Bullet::btVector3FloatData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btOptimizedBvhNodeFloatData **)&jarg1; 
  result = (Bullet::btVector3FloatData *)& ((arg1)->m_aabbMinOrg);
  *(Bullet::btVector3FloatData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btOptimizedBvhNodeFloatData_1aabbMaxOrg_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Bullet::btOptimizedBvhNodeFloatData *arg1 = (Bullet::btOptimizedBvhNodeFloatData *) 0 ;
  Bullet::btVector3FloatData *arg2 = (Bullet::btVector3FloatData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Bullet::btOptimizedBvhNodeFloatData **)&jarg1; 
  arg2 = *(Bullet::btVector3FloatData **)&jarg2; 
  if (arg1) (arg1)->m_aabbMaxOrg = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btOptimizedBvhNodeFloatData_1aabbMaxOrg_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Bullet::btOptimizedBvhNodeFloatData *arg1 = (Bullet::btOptimizedBvhNodeFloatData *) 0 ;
  Bullet::btVector3FloatData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btOptimizedBvhNodeFloatData **)&jarg1; 
  result = (Bullet::btVector3FloatData *)& ((arg1)->m_aabbMaxOrg);
  *(Bullet::btVector3FloatData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btOptimizedBvhNodeFloatData_1escapeIndex_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Bullet::btOptimizedBvhNodeFloatData *arg1 = (Bullet::btOptimizedBvhNodeFloatData *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btOptimizedBvhNodeFloatData **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_escapeIndex = arg2;
}


SWIGEXPORT jint JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btOptimizedBvhNodeFloatData_1escapeIndex_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Bullet::btOptimizedBvhNodeFloatData *arg1 = (Bullet::btOptimizedBvhNodeFloatData *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btOptimizedBvhNodeFloatData **)&jarg1; 
  result = (int) ((arg1)->m_escapeIndex);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btOptimizedBvhNodeFloatData_1subPart_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Bullet::btOptimizedBvhNodeFloatData *arg1 = (Bullet::btOptimizedBvhNodeFloatData *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btOptimizedBvhNodeFloatData **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_subPart = arg2;
}


SWIGEXPORT jint JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btOptimizedBvhNodeFloatData_1subPart_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Bullet::btOptimizedBvhNodeFloatData *arg1 = (Bullet::btOptimizedBvhNodeFloatData *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btOptimizedBvhNodeFloatData **)&jarg1; 
  result = (int) ((arg1)->m_subPart);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btOptimizedBvhNodeFloatData_1triangleIndex_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Bullet::btOptimizedBvhNodeFloatData *arg1 = (Bullet::btOptimizedBvhNodeFloatData *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btOptimizedBvhNodeFloatData **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_triangleIndex = arg2;
}


SWIGEXPORT jint JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btOptimizedBvhNodeFloatData_1triangleIndex_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Bullet::btOptimizedBvhNodeFloatData *arg1 = (Bullet::btOptimizedBvhNodeFloatData *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btOptimizedBvhNodeFloatData **)&jarg1; 
  result = (int) ((arg1)->m_triangleIndex);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btOptimizedBvhNodeFloatData_1pad_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  Bullet::btOptimizedBvhNodeFloatData *arg1 = (Bullet::btOptimizedBvhNodeFloatData *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btOptimizedBvhNodeFloatData **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->m_pad, (const char *)arg2, 4-1);
      arg1->m_pad[4-1] = 0;
    } else {
      arg1->m_pad[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btOptimizedBvhNodeFloatData_1pad_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  Bullet::btOptimizedBvhNodeFloatData *arg1 = (Bullet::btOptimizedBvhNodeFloatData *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btOptimizedBvhNodeFloatData **)&jarg1; 
  result = (char *)(char *) ((arg1)->m_pad);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_new_1btOptimizedBvhNodeFloatData(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Bullet::btOptimizedBvhNodeFloatData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Bullet::btOptimizedBvhNodeFloatData *)new Bullet::btOptimizedBvhNodeFloatData();
  *(Bullet::btOptimizedBvhNodeFloatData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_delete_1btOptimizedBvhNodeFloatData(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Bullet::btOptimizedBvhNodeFloatData *arg1 = (Bullet::btOptimizedBvhNodeFloatData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Bullet::btOptimizedBvhNodeFloatData **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btOptimizedBvhNodeDoubleData_1aabbMinOrg_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Bullet::btOptimizedBvhNodeDoubleData *arg1 = (Bullet::btOptimizedBvhNodeDoubleData *) 0 ;
  Bullet::btVector3DoubleData *arg2 = (Bullet::btVector3DoubleData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Bullet::btOptimizedBvhNodeDoubleData **)&jarg1; 
  arg2 = *(Bullet::btVector3DoubleData **)&jarg2; 
  if (arg1) (arg1)->m_aabbMinOrg = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btOptimizedBvhNodeDoubleData_1aabbMinOrg_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Bullet::btOptimizedBvhNodeDoubleData *arg1 = (Bullet::btOptimizedBvhNodeDoubleData *) 0 ;
  Bullet::btVector3DoubleData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btOptimizedBvhNodeDoubleData **)&jarg1; 
  result = (Bullet::btVector3DoubleData *)& ((arg1)->m_aabbMinOrg);
  *(Bullet::btVector3DoubleData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btOptimizedBvhNodeDoubleData_1aabbMaxOrg_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Bullet::btOptimizedBvhNodeDoubleData *arg1 = (Bullet::btOptimizedBvhNodeDoubleData *) 0 ;
  Bullet::btVector3DoubleData *arg2 = (Bullet::btVector3DoubleData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Bullet::btOptimizedBvhNodeDoubleData **)&jarg1; 
  arg2 = *(Bullet::btVector3DoubleData **)&jarg2; 
  if (arg1) (arg1)->m_aabbMaxOrg = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btOptimizedBvhNodeDoubleData_1aabbMaxOrg_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Bullet::btOptimizedBvhNodeDoubleData *arg1 = (Bullet::btOptimizedBvhNodeDoubleData *) 0 ;
  Bullet::btVector3DoubleData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btOptimizedBvhNodeDoubleData **)&jarg1; 
  result = (Bullet::btVector3DoubleData *)& ((arg1)->m_aabbMaxOrg);
  *(Bullet::btVector3DoubleData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btOptimizedBvhNodeDoubleData_1escapeIndex_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Bullet::btOptimizedBvhNodeDoubleData *arg1 = (Bullet::btOptimizedBvhNodeDoubleData *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btOptimizedBvhNodeDoubleData **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_escapeIndex = arg2;
}


SWIGEXPORT jint JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btOptimizedBvhNodeDoubleData_1escapeIndex_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Bullet::btOptimizedBvhNodeDoubleData *arg1 = (Bullet::btOptimizedBvhNodeDoubleData *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btOptimizedBvhNodeDoubleData **)&jarg1; 
  result = (int) ((arg1)->m_escapeIndex);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btOptimizedBvhNodeDoubleData_1subPart_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Bullet::btOptimizedBvhNodeDoubleData *arg1 = (Bullet::btOptimizedBvhNodeDoubleData *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btOptimizedBvhNodeDoubleData **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_subPart = arg2;
}


SWIGEXPORT jint JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btOptimizedBvhNodeDoubleData_1subPart_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Bullet::btOptimizedBvhNodeDoubleData *arg1 = (Bullet::btOptimizedBvhNodeDoubleData *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btOptimizedBvhNodeDoubleData **)&jarg1; 
  result = (int) ((arg1)->m_subPart);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btOptimizedBvhNodeDoubleData_1triangleIndex_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Bullet::btOptimizedBvhNodeDoubleData *arg1 = (Bullet::btOptimizedBvhNodeDoubleData *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btOptimizedBvhNodeDoubleData **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_triangleIndex = arg2;
}


SWIGEXPORT jint JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btOptimizedBvhNodeDoubleData_1triangleIndex_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Bullet::btOptimizedBvhNodeDoubleData *arg1 = (Bullet::btOptimizedBvhNodeDoubleData *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btOptimizedBvhNodeDoubleData **)&jarg1; 
  result = (int) ((arg1)->m_triangleIndex);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btOptimizedBvhNodeDoubleData_1pad_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  Bullet::btOptimizedBvhNodeDoubleData *arg1 = (Bullet::btOptimizedBvhNodeDoubleData *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btOptimizedBvhNodeDoubleData **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->m_pad, (const char *)arg2, 4-1);
      arg1->m_pad[4-1] = 0;
    } else {
      arg1->m_pad[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btOptimizedBvhNodeDoubleData_1pad_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  Bullet::btOptimizedBvhNodeDoubleData *arg1 = (Bullet::btOptimizedBvhNodeDoubleData *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btOptimizedBvhNodeDoubleData **)&jarg1; 
  result = (char *)(char *) ((arg1)->m_pad);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_new_1btOptimizedBvhNodeDoubleData(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Bullet::btOptimizedBvhNodeDoubleData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Bullet::btOptimizedBvhNodeDoubleData *)new Bullet::btOptimizedBvhNodeDoubleData();
  *(Bullet::btOptimizedBvhNodeDoubleData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_delete_1btOptimizedBvhNodeDoubleData(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Bullet::btOptimizedBvhNodeDoubleData *arg1 = (Bullet::btOptimizedBvhNodeDoubleData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Bullet::btOptimizedBvhNodeDoubleData **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btQuantizedBvhNodeData_1quantizedAabbMin_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshortArray jarg2) {
  Bullet::btQuantizedBvhNodeData *arg1 = (Bullet::btQuantizedBvhNodeData *) 0 ;
  short *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btQuantizedBvhNodeData **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  arg2 = (short *)jenv->GetPrimitiveArrayCritical(jarg2, 0); 
  {
    size_t ii;
    short *b = (short *) arg1->m_quantizedAabbMin;
    for (ii = 0; ii < (size_t)3; ii++) b[ii] = *((short *) arg2 + ii);
  }
  jenv->ReleasePrimitiveArrayCritical(jarg2, (short *)arg2, 0); 
}


SWIGEXPORT jshortArray JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btQuantizedBvhNodeData_1quantizedAabbMin_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshortArray jresult = 0 ;
  Bullet::btQuantizedBvhNodeData *arg1 = (Bullet::btQuantizedBvhNodeData *) 0 ;
  short *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btQuantizedBvhNodeData **)&jarg1; 
  result = (short *)(short *) ((arg1)->m_quantizedAabbMin);
  /*jresult = SWIG_JavaArrayOut##Short(jenv, (short *)result, 3);*/ 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btQuantizedBvhNodeData_1quantizedAabbMax_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshortArray jarg2) {
  Bullet::btQuantizedBvhNodeData *arg1 = (Bullet::btQuantizedBvhNodeData *) 0 ;
  short *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btQuantizedBvhNodeData **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  arg2 = (short *)jenv->GetPrimitiveArrayCritical(jarg2, 0); 
  {
    size_t ii;
    short *b = (short *) arg1->m_quantizedAabbMax;
    for (ii = 0; ii < (size_t)3; ii++) b[ii] = *((short *) arg2 + ii);
  }
  jenv->ReleasePrimitiveArrayCritical(jarg2, (short *)arg2, 0); 
}


SWIGEXPORT jshortArray JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btQuantizedBvhNodeData_1quantizedAabbMax_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshortArray jresult = 0 ;
  Bullet::btQuantizedBvhNodeData *arg1 = (Bullet::btQuantizedBvhNodeData *) 0 ;
  short *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btQuantizedBvhNodeData **)&jarg1; 
  result = (short *)(short *) ((arg1)->m_quantizedAabbMax);
  /*jresult = SWIG_JavaArrayOut##Short(jenv, (short *)result, 3);*/ 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btQuantizedBvhNodeData_1escapeIndexOrTriangleIndex_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Bullet::btQuantizedBvhNodeData *arg1 = (Bullet::btQuantizedBvhNodeData *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btQuantizedBvhNodeData **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_escapeIndexOrTriangleIndex = arg2;
}


SWIGEXPORT jint JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btQuantizedBvhNodeData_1escapeIndexOrTriangleIndex_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Bullet::btQuantizedBvhNodeData *arg1 = (Bullet::btQuantizedBvhNodeData *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btQuantizedBvhNodeData **)&jarg1; 
  result = (int) ((arg1)->m_escapeIndexOrTriangleIndex);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_new_1btQuantizedBvhNodeData(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Bullet::btQuantizedBvhNodeData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Bullet::btQuantizedBvhNodeData *)new Bullet::btQuantizedBvhNodeData();
  *(Bullet::btQuantizedBvhNodeData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_delete_1btQuantizedBvhNodeData(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Bullet::btQuantizedBvhNodeData *arg1 = (Bullet::btQuantizedBvhNodeData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Bullet::btQuantizedBvhNodeData **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btQuantizedBvhFloatData_1bvhAabbMin_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Bullet::btQuantizedBvhFloatData *arg1 = (Bullet::btQuantizedBvhFloatData *) 0 ;
  Bullet::btVector3FloatData *arg2 = (Bullet::btVector3FloatData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Bullet::btQuantizedBvhFloatData **)&jarg1; 
  arg2 = *(Bullet::btVector3FloatData **)&jarg2; 
  if (arg1) (arg1)->m_bvhAabbMin = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btQuantizedBvhFloatData_1bvhAabbMin_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Bullet::btQuantizedBvhFloatData *arg1 = (Bullet::btQuantizedBvhFloatData *) 0 ;
  Bullet::btVector3FloatData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btQuantizedBvhFloatData **)&jarg1; 
  result = (Bullet::btVector3FloatData *)& ((arg1)->m_bvhAabbMin);
  *(Bullet::btVector3FloatData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btQuantizedBvhFloatData_1bvhAabbMax_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Bullet::btQuantizedBvhFloatData *arg1 = (Bullet::btQuantizedBvhFloatData *) 0 ;
  Bullet::btVector3FloatData *arg2 = (Bullet::btVector3FloatData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Bullet::btQuantizedBvhFloatData **)&jarg1; 
  arg2 = *(Bullet::btVector3FloatData **)&jarg2; 
  if (arg1) (arg1)->m_bvhAabbMax = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btQuantizedBvhFloatData_1bvhAabbMax_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Bullet::btQuantizedBvhFloatData *arg1 = (Bullet::btQuantizedBvhFloatData *) 0 ;
  Bullet::btVector3FloatData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btQuantizedBvhFloatData **)&jarg1; 
  result = (Bullet::btVector3FloatData *)& ((arg1)->m_bvhAabbMax);
  *(Bullet::btVector3FloatData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btQuantizedBvhFloatData_1bvhQuantization_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Bullet::btQuantizedBvhFloatData *arg1 = (Bullet::btQuantizedBvhFloatData *) 0 ;
  Bullet::btVector3FloatData *arg2 = (Bullet::btVector3FloatData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Bullet::btQuantizedBvhFloatData **)&jarg1; 
  arg2 = *(Bullet::btVector3FloatData **)&jarg2; 
  if (arg1) (arg1)->m_bvhQuantization = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btQuantizedBvhFloatData_1bvhQuantization_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Bullet::btQuantizedBvhFloatData *arg1 = (Bullet::btQuantizedBvhFloatData *) 0 ;
  Bullet::btVector3FloatData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btQuantizedBvhFloatData **)&jarg1; 
  result = (Bullet::btVector3FloatData *)& ((arg1)->m_bvhQuantization);
  *(Bullet::btVector3FloatData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btQuantizedBvhFloatData_1curNodeIndex_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Bullet::btQuantizedBvhFloatData *arg1 = (Bullet::btQuantizedBvhFloatData *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btQuantizedBvhFloatData **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_curNodeIndex = arg2;
}


SWIGEXPORT jint JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btQuantizedBvhFloatData_1curNodeIndex_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Bullet::btQuantizedBvhFloatData *arg1 = (Bullet::btQuantizedBvhFloatData *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btQuantizedBvhFloatData **)&jarg1; 
  result = (int) ((arg1)->m_curNodeIndex);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btQuantizedBvhFloatData_1useQuantization_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Bullet::btQuantizedBvhFloatData *arg1 = (Bullet::btQuantizedBvhFloatData *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btQuantizedBvhFloatData **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_useQuantization = arg2;
}


SWIGEXPORT jint JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btQuantizedBvhFloatData_1useQuantization_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Bullet::btQuantizedBvhFloatData *arg1 = (Bullet::btQuantizedBvhFloatData *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btQuantizedBvhFloatData **)&jarg1; 
  result = (int) ((arg1)->m_useQuantization);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btQuantizedBvhFloatData_1numContiguousLeafNodes_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Bullet::btQuantizedBvhFloatData *arg1 = (Bullet::btQuantizedBvhFloatData *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btQuantizedBvhFloatData **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_numContiguousLeafNodes = arg2;
}


SWIGEXPORT jint JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btQuantizedBvhFloatData_1numContiguousLeafNodes_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Bullet::btQuantizedBvhFloatData *arg1 = (Bullet::btQuantizedBvhFloatData *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btQuantizedBvhFloatData **)&jarg1; 
  result = (int) ((arg1)->m_numContiguousLeafNodes);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btQuantizedBvhFloatData_1numQuantizedContiguousNodes_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Bullet::btQuantizedBvhFloatData *arg1 = (Bullet::btQuantizedBvhFloatData *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btQuantizedBvhFloatData **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_numQuantizedContiguousNodes = arg2;
}


SWIGEXPORT jint JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btQuantizedBvhFloatData_1numQuantizedContiguousNodes_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Bullet::btQuantizedBvhFloatData *arg1 = (Bullet::btQuantizedBvhFloatData *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btQuantizedBvhFloatData **)&jarg1; 
  result = (int) ((arg1)->m_numQuantizedContiguousNodes);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btQuantizedBvhFloatData_1contiguousNodesPtr_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Bullet::btQuantizedBvhFloatData *arg1 = (Bullet::btQuantizedBvhFloatData *) 0 ;
  Bullet::btOptimizedBvhNodeFloatData *arg2 = (Bullet::btOptimizedBvhNodeFloatData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Bullet::btQuantizedBvhFloatData **)&jarg1; 
  arg2 = *(Bullet::btOptimizedBvhNodeFloatData **)&jarg2; 
  if (arg1) (arg1)->m_contiguousNodesPtr = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btQuantizedBvhFloatData_1contiguousNodesPtr_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Bullet::btQuantizedBvhFloatData *arg1 = (Bullet::btQuantizedBvhFloatData *) 0 ;
  Bullet::btOptimizedBvhNodeFloatData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btQuantizedBvhFloatData **)&jarg1; 
  result = (Bullet::btOptimizedBvhNodeFloatData *) ((arg1)->m_contiguousNodesPtr);
  *(Bullet::btOptimizedBvhNodeFloatData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btQuantizedBvhFloatData_1quantizedContiguousNodesPtr_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Bullet::btQuantizedBvhFloatData *arg1 = (Bullet::btQuantizedBvhFloatData *) 0 ;
  Bullet::btQuantizedBvhNodeData *arg2 = (Bullet::btQuantizedBvhNodeData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Bullet::btQuantizedBvhFloatData **)&jarg1; 
  arg2 = *(Bullet::btQuantizedBvhNodeData **)&jarg2; 
  if (arg1) (arg1)->m_quantizedContiguousNodesPtr = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btQuantizedBvhFloatData_1quantizedContiguousNodesPtr_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Bullet::btQuantizedBvhFloatData *arg1 = (Bullet::btQuantizedBvhFloatData *) 0 ;
  Bullet::btQuantizedBvhNodeData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btQuantizedBvhFloatData **)&jarg1; 
  result = (Bullet::btQuantizedBvhNodeData *) ((arg1)->m_quantizedContiguousNodesPtr);
  *(Bullet::btQuantizedBvhNodeData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btQuantizedBvhFloatData_1subTreeInfoPtr_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Bullet::btQuantizedBvhFloatData *arg1 = (Bullet::btQuantizedBvhFloatData *) 0 ;
  Bullet::btBvhSubtreeInfoData *arg2 = (Bullet::btBvhSubtreeInfoData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Bullet::btQuantizedBvhFloatData **)&jarg1; 
  arg2 = *(Bullet::btBvhSubtreeInfoData **)&jarg2; 
  if (arg1) (arg1)->m_subTreeInfoPtr = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btQuantizedBvhFloatData_1subTreeInfoPtr_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Bullet::btQuantizedBvhFloatData *arg1 = (Bullet::btQuantizedBvhFloatData *) 0 ;
  Bullet::btBvhSubtreeInfoData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btQuantizedBvhFloatData **)&jarg1; 
  result = (Bullet::btBvhSubtreeInfoData *) ((arg1)->m_subTreeInfoPtr);
  *(Bullet::btBvhSubtreeInfoData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btQuantizedBvhFloatData_1traversalMode_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Bullet::btQuantizedBvhFloatData *arg1 = (Bullet::btQuantizedBvhFloatData *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btQuantizedBvhFloatData **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_traversalMode = arg2;
}


SWIGEXPORT jint JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btQuantizedBvhFloatData_1traversalMode_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Bullet::btQuantizedBvhFloatData *arg1 = (Bullet::btQuantizedBvhFloatData *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btQuantizedBvhFloatData **)&jarg1; 
  result = (int) ((arg1)->m_traversalMode);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btQuantizedBvhFloatData_1numSubtreeHeaders_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Bullet::btQuantizedBvhFloatData *arg1 = (Bullet::btQuantizedBvhFloatData *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btQuantizedBvhFloatData **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_numSubtreeHeaders = arg2;
}


SWIGEXPORT jint JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btQuantizedBvhFloatData_1numSubtreeHeaders_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Bullet::btQuantizedBvhFloatData *arg1 = (Bullet::btQuantizedBvhFloatData *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btQuantizedBvhFloatData **)&jarg1; 
  result = (int) ((arg1)->m_numSubtreeHeaders);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_new_1btQuantizedBvhFloatData(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Bullet::btQuantizedBvhFloatData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Bullet::btQuantizedBvhFloatData *)new Bullet::btQuantizedBvhFloatData();
  *(Bullet::btQuantizedBvhFloatData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_delete_1btQuantizedBvhFloatData(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Bullet::btQuantizedBvhFloatData *arg1 = (Bullet::btQuantizedBvhFloatData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Bullet::btQuantizedBvhFloatData **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btQuantizedBvhDoubleData_1bvhAabbMin_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Bullet::btQuantizedBvhDoubleData *arg1 = (Bullet::btQuantizedBvhDoubleData *) 0 ;
  Bullet::btVector3DoubleData *arg2 = (Bullet::btVector3DoubleData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Bullet::btQuantizedBvhDoubleData **)&jarg1; 
  arg2 = *(Bullet::btVector3DoubleData **)&jarg2; 
  if (arg1) (arg1)->m_bvhAabbMin = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btQuantizedBvhDoubleData_1bvhAabbMin_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Bullet::btQuantizedBvhDoubleData *arg1 = (Bullet::btQuantizedBvhDoubleData *) 0 ;
  Bullet::btVector3DoubleData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btQuantizedBvhDoubleData **)&jarg1; 
  result = (Bullet::btVector3DoubleData *)& ((arg1)->m_bvhAabbMin);
  *(Bullet::btVector3DoubleData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btQuantizedBvhDoubleData_1bvhAabbMax_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Bullet::btQuantizedBvhDoubleData *arg1 = (Bullet::btQuantizedBvhDoubleData *) 0 ;
  Bullet::btVector3DoubleData *arg2 = (Bullet::btVector3DoubleData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Bullet::btQuantizedBvhDoubleData **)&jarg1; 
  arg2 = *(Bullet::btVector3DoubleData **)&jarg2; 
  if (arg1) (arg1)->m_bvhAabbMax = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btQuantizedBvhDoubleData_1bvhAabbMax_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Bullet::btQuantizedBvhDoubleData *arg1 = (Bullet::btQuantizedBvhDoubleData *) 0 ;
  Bullet::btVector3DoubleData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btQuantizedBvhDoubleData **)&jarg1; 
  result = (Bullet::btVector3DoubleData *)& ((arg1)->m_bvhAabbMax);
  *(Bullet::btVector3DoubleData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btQuantizedBvhDoubleData_1bvhQuantization_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Bullet::btQuantizedBvhDoubleData *arg1 = (Bullet::btQuantizedBvhDoubleData *) 0 ;
  Bullet::btVector3DoubleData *arg2 = (Bullet::btVector3DoubleData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Bullet::btQuantizedBvhDoubleData **)&jarg1; 
  arg2 = *(Bullet::btVector3DoubleData **)&jarg2; 
  if (arg1) (arg1)->m_bvhQuantization = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btQuantizedBvhDoubleData_1bvhQuantization_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Bullet::btQuantizedBvhDoubleData *arg1 = (Bullet::btQuantizedBvhDoubleData *) 0 ;
  Bullet::btVector3DoubleData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btQuantizedBvhDoubleData **)&jarg1; 
  result = (Bullet::btVector3DoubleData *)& ((arg1)->m_bvhQuantization);
  *(Bullet::btVector3DoubleData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btQuantizedBvhDoubleData_1curNodeIndex_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Bullet::btQuantizedBvhDoubleData *arg1 = (Bullet::btQuantizedBvhDoubleData *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btQuantizedBvhDoubleData **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_curNodeIndex = arg2;
}


SWIGEXPORT jint JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btQuantizedBvhDoubleData_1curNodeIndex_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Bullet::btQuantizedBvhDoubleData *arg1 = (Bullet::btQuantizedBvhDoubleData *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btQuantizedBvhDoubleData **)&jarg1; 
  result = (int) ((arg1)->m_curNodeIndex);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btQuantizedBvhDoubleData_1useQuantization_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Bullet::btQuantizedBvhDoubleData *arg1 = (Bullet::btQuantizedBvhDoubleData *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btQuantizedBvhDoubleData **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_useQuantization = arg2;
}


SWIGEXPORT jint JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btQuantizedBvhDoubleData_1useQuantization_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Bullet::btQuantizedBvhDoubleData *arg1 = (Bullet::btQuantizedBvhDoubleData *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btQuantizedBvhDoubleData **)&jarg1; 
  result = (int) ((arg1)->m_useQuantization);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btQuantizedBvhDoubleData_1numContiguousLeafNodes_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Bullet::btQuantizedBvhDoubleData *arg1 = (Bullet::btQuantizedBvhDoubleData *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btQuantizedBvhDoubleData **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_numContiguousLeafNodes = arg2;
}


SWIGEXPORT jint JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btQuantizedBvhDoubleData_1numContiguousLeafNodes_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Bullet::btQuantizedBvhDoubleData *arg1 = (Bullet::btQuantizedBvhDoubleData *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btQuantizedBvhDoubleData **)&jarg1; 
  result = (int) ((arg1)->m_numContiguousLeafNodes);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btQuantizedBvhDoubleData_1numQuantizedContiguousNodes_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Bullet::btQuantizedBvhDoubleData *arg1 = (Bullet::btQuantizedBvhDoubleData *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btQuantizedBvhDoubleData **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_numQuantizedContiguousNodes = arg2;
}


SWIGEXPORT jint JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btQuantizedBvhDoubleData_1numQuantizedContiguousNodes_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Bullet::btQuantizedBvhDoubleData *arg1 = (Bullet::btQuantizedBvhDoubleData *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btQuantizedBvhDoubleData **)&jarg1; 
  result = (int) ((arg1)->m_numQuantizedContiguousNodes);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btQuantizedBvhDoubleData_1contiguousNodesPtr_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Bullet::btQuantizedBvhDoubleData *arg1 = (Bullet::btQuantizedBvhDoubleData *) 0 ;
  Bullet::btOptimizedBvhNodeDoubleData *arg2 = (Bullet::btOptimizedBvhNodeDoubleData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Bullet::btQuantizedBvhDoubleData **)&jarg1; 
  arg2 = *(Bullet::btOptimizedBvhNodeDoubleData **)&jarg2; 
  if (arg1) (arg1)->m_contiguousNodesPtr = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btQuantizedBvhDoubleData_1contiguousNodesPtr_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Bullet::btQuantizedBvhDoubleData *arg1 = (Bullet::btQuantizedBvhDoubleData *) 0 ;
  Bullet::btOptimizedBvhNodeDoubleData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btQuantizedBvhDoubleData **)&jarg1; 
  result = (Bullet::btOptimizedBvhNodeDoubleData *) ((arg1)->m_contiguousNodesPtr);
  *(Bullet::btOptimizedBvhNodeDoubleData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btQuantizedBvhDoubleData_1quantizedContiguousNodesPtr_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Bullet::btQuantizedBvhDoubleData *arg1 = (Bullet::btQuantizedBvhDoubleData *) 0 ;
  Bullet::btQuantizedBvhNodeData *arg2 = (Bullet::btQuantizedBvhNodeData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Bullet::btQuantizedBvhDoubleData **)&jarg1; 
  arg2 = *(Bullet::btQuantizedBvhNodeData **)&jarg2; 
  if (arg1) (arg1)->m_quantizedContiguousNodesPtr = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btQuantizedBvhDoubleData_1quantizedContiguousNodesPtr_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Bullet::btQuantizedBvhDoubleData *arg1 = (Bullet::btQuantizedBvhDoubleData *) 0 ;
  Bullet::btQuantizedBvhNodeData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btQuantizedBvhDoubleData **)&jarg1; 
  result = (Bullet::btQuantizedBvhNodeData *) ((arg1)->m_quantizedContiguousNodesPtr);
  *(Bullet::btQuantizedBvhNodeData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btQuantizedBvhDoubleData_1traversalMode_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Bullet::btQuantizedBvhDoubleData *arg1 = (Bullet::btQuantizedBvhDoubleData *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btQuantizedBvhDoubleData **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_traversalMode = arg2;
}


SWIGEXPORT jint JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btQuantizedBvhDoubleData_1traversalMode_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Bullet::btQuantizedBvhDoubleData *arg1 = (Bullet::btQuantizedBvhDoubleData *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btQuantizedBvhDoubleData **)&jarg1; 
  result = (int) ((arg1)->m_traversalMode);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btQuantizedBvhDoubleData_1numSubtreeHeaders_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Bullet::btQuantizedBvhDoubleData *arg1 = (Bullet::btQuantizedBvhDoubleData *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btQuantizedBvhDoubleData **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_numSubtreeHeaders = arg2;
}


SWIGEXPORT jint JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btQuantizedBvhDoubleData_1numSubtreeHeaders_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Bullet::btQuantizedBvhDoubleData *arg1 = (Bullet::btQuantizedBvhDoubleData *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btQuantizedBvhDoubleData **)&jarg1; 
  result = (int) ((arg1)->m_numSubtreeHeaders);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btQuantizedBvhDoubleData_1subTreeInfoPtr_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Bullet::btQuantizedBvhDoubleData *arg1 = (Bullet::btQuantizedBvhDoubleData *) 0 ;
  Bullet::btBvhSubtreeInfoData *arg2 = (Bullet::btBvhSubtreeInfoData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Bullet::btQuantizedBvhDoubleData **)&jarg1; 
  arg2 = *(Bullet::btBvhSubtreeInfoData **)&jarg2; 
  if (arg1) (arg1)->m_subTreeInfoPtr = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btQuantizedBvhDoubleData_1subTreeInfoPtr_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Bullet::btQuantizedBvhDoubleData *arg1 = (Bullet::btQuantizedBvhDoubleData *) 0 ;
  Bullet::btBvhSubtreeInfoData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btQuantizedBvhDoubleData **)&jarg1; 
  result = (Bullet::btBvhSubtreeInfoData *) ((arg1)->m_subTreeInfoPtr);
  *(Bullet::btBvhSubtreeInfoData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_new_1btQuantizedBvhDoubleData(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Bullet::btQuantizedBvhDoubleData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Bullet::btQuantizedBvhDoubleData *)new Bullet::btQuantizedBvhDoubleData();
  *(Bullet::btQuantizedBvhDoubleData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_delete_1btQuantizedBvhDoubleData(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Bullet::btQuantizedBvhDoubleData *arg1 = (Bullet::btQuantizedBvhDoubleData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Bullet::btQuantizedBvhDoubleData **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btCollisionShapeData_1name_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  Bullet::btCollisionShapeData *arg1 = (Bullet::btCollisionShapeData *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btCollisionShapeData **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    delete [] arg1->m_name;
    if (arg2) {
      arg1->m_name = (char *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->m_name, (const char *)arg2);
    } else {
      arg1->m_name = 0;
    }
  }
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btCollisionShapeData_1name_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  Bullet::btCollisionShapeData *arg1 = (Bullet::btCollisionShapeData *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btCollisionShapeData **)&jarg1; 
  result = (char *) ((arg1)->m_name);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btCollisionShapeData_1shapeType_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Bullet::btCollisionShapeData *arg1 = (Bullet::btCollisionShapeData *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btCollisionShapeData **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_shapeType = arg2;
}


SWIGEXPORT jint JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btCollisionShapeData_1shapeType_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Bullet::btCollisionShapeData *arg1 = (Bullet::btCollisionShapeData *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btCollisionShapeData **)&jarg1; 
  result = (int) ((arg1)->m_shapeType);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btCollisionShapeData_1padding_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  Bullet::btCollisionShapeData *arg1 = (Bullet::btCollisionShapeData *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btCollisionShapeData **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->m_padding, (const char *)arg2, 4-1);
      arg1->m_padding[4-1] = 0;
    } else {
      arg1->m_padding[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btCollisionShapeData_1padding_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  Bullet::btCollisionShapeData *arg1 = (Bullet::btCollisionShapeData *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btCollisionShapeData **)&jarg1; 
  result = (char *)(char *) ((arg1)->m_padding);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_new_1btCollisionShapeData(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Bullet::btCollisionShapeData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Bullet::btCollisionShapeData *)new Bullet::btCollisionShapeData();
  *(Bullet::btCollisionShapeData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_delete_1btCollisionShapeData(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Bullet::btCollisionShapeData *arg1 = (Bullet::btCollisionShapeData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Bullet::btCollisionShapeData **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btStaticPlaneShapeData_1collisionShapeData_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Bullet::btStaticPlaneShapeData *arg1 = (Bullet::btStaticPlaneShapeData *) 0 ;
  Bullet::btCollisionShapeData *arg2 = (Bullet::btCollisionShapeData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Bullet::btStaticPlaneShapeData **)&jarg1; 
  arg2 = *(Bullet::btCollisionShapeData **)&jarg2; 
  if (arg1) (arg1)->m_collisionShapeData = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btStaticPlaneShapeData_1collisionShapeData_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Bullet::btStaticPlaneShapeData *arg1 = (Bullet::btStaticPlaneShapeData *) 0 ;
  Bullet::btCollisionShapeData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btStaticPlaneShapeData **)&jarg1; 
  result = (Bullet::btCollisionShapeData *)& ((arg1)->m_collisionShapeData);
  *(Bullet::btCollisionShapeData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btStaticPlaneShapeData_1localScaling_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Bullet::btStaticPlaneShapeData *arg1 = (Bullet::btStaticPlaneShapeData *) 0 ;
  Bullet::btVector3FloatData *arg2 = (Bullet::btVector3FloatData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Bullet::btStaticPlaneShapeData **)&jarg1; 
  arg2 = *(Bullet::btVector3FloatData **)&jarg2; 
  if (arg1) (arg1)->m_localScaling = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btStaticPlaneShapeData_1localScaling_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Bullet::btStaticPlaneShapeData *arg1 = (Bullet::btStaticPlaneShapeData *) 0 ;
  Bullet::btVector3FloatData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btStaticPlaneShapeData **)&jarg1; 
  result = (Bullet::btVector3FloatData *)& ((arg1)->m_localScaling);
  *(Bullet::btVector3FloatData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btStaticPlaneShapeData_1planeNormal_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Bullet::btStaticPlaneShapeData *arg1 = (Bullet::btStaticPlaneShapeData *) 0 ;
  Bullet::btVector3FloatData *arg2 = (Bullet::btVector3FloatData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Bullet::btStaticPlaneShapeData **)&jarg1; 
  arg2 = *(Bullet::btVector3FloatData **)&jarg2; 
  if (arg1) (arg1)->m_planeNormal = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btStaticPlaneShapeData_1planeNormal_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Bullet::btStaticPlaneShapeData *arg1 = (Bullet::btStaticPlaneShapeData *) 0 ;
  Bullet::btVector3FloatData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btStaticPlaneShapeData **)&jarg1; 
  result = (Bullet::btVector3FloatData *)& ((arg1)->m_planeNormal);
  *(Bullet::btVector3FloatData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btStaticPlaneShapeData_1planeConstant_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  Bullet::btStaticPlaneShapeData *arg1 = (Bullet::btStaticPlaneShapeData *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btStaticPlaneShapeData **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->m_planeConstant = arg2;
}


SWIGEXPORT jfloat JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btStaticPlaneShapeData_1planeConstant_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  Bullet::btStaticPlaneShapeData *arg1 = (Bullet::btStaticPlaneShapeData *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btStaticPlaneShapeData **)&jarg1; 
  result = (float) ((arg1)->m_planeConstant);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btStaticPlaneShapeData_1pad_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  Bullet::btStaticPlaneShapeData *arg1 = (Bullet::btStaticPlaneShapeData *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btStaticPlaneShapeData **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->m_pad, (const char *)arg2, 4-1);
      arg1->m_pad[4-1] = 0;
    } else {
      arg1->m_pad[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btStaticPlaneShapeData_1pad_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  Bullet::btStaticPlaneShapeData *arg1 = (Bullet::btStaticPlaneShapeData *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btStaticPlaneShapeData **)&jarg1; 
  result = (char *)(char *) ((arg1)->m_pad);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_new_1btStaticPlaneShapeData(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Bullet::btStaticPlaneShapeData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Bullet::btStaticPlaneShapeData *)new Bullet::btStaticPlaneShapeData();
  *(Bullet::btStaticPlaneShapeData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_delete_1btStaticPlaneShapeData(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Bullet::btStaticPlaneShapeData *arg1 = (Bullet::btStaticPlaneShapeData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Bullet::btStaticPlaneShapeData **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btConvexInternalShapeData_1collisionShapeData_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Bullet::btConvexInternalShapeData *arg1 = (Bullet::btConvexInternalShapeData *) 0 ;
  Bullet::btCollisionShapeData *arg2 = (Bullet::btCollisionShapeData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Bullet::btConvexInternalShapeData **)&jarg1; 
  arg2 = *(Bullet::btCollisionShapeData **)&jarg2; 
  if (arg1) (arg1)->m_collisionShapeData = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btConvexInternalShapeData_1collisionShapeData_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Bullet::btConvexInternalShapeData *arg1 = (Bullet::btConvexInternalShapeData *) 0 ;
  Bullet::btCollisionShapeData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btConvexInternalShapeData **)&jarg1; 
  result = (Bullet::btCollisionShapeData *)& ((arg1)->m_collisionShapeData);
  *(Bullet::btCollisionShapeData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btConvexInternalShapeData_1localScaling_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Bullet::btConvexInternalShapeData *arg1 = (Bullet::btConvexInternalShapeData *) 0 ;
  Bullet::btVector3FloatData *arg2 = (Bullet::btVector3FloatData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Bullet::btConvexInternalShapeData **)&jarg1; 
  arg2 = *(Bullet::btVector3FloatData **)&jarg2; 
  if (arg1) (arg1)->m_localScaling = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btConvexInternalShapeData_1localScaling_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Bullet::btConvexInternalShapeData *arg1 = (Bullet::btConvexInternalShapeData *) 0 ;
  Bullet::btVector3FloatData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btConvexInternalShapeData **)&jarg1; 
  result = (Bullet::btVector3FloatData *)& ((arg1)->m_localScaling);
  *(Bullet::btVector3FloatData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btConvexInternalShapeData_1implicitShapeDimensions_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Bullet::btConvexInternalShapeData *arg1 = (Bullet::btConvexInternalShapeData *) 0 ;
  Bullet::btVector3FloatData *arg2 = (Bullet::btVector3FloatData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Bullet::btConvexInternalShapeData **)&jarg1; 
  arg2 = *(Bullet::btVector3FloatData **)&jarg2; 
  if (arg1) (arg1)->m_implicitShapeDimensions = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btConvexInternalShapeData_1implicitShapeDimensions_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Bullet::btConvexInternalShapeData *arg1 = (Bullet::btConvexInternalShapeData *) 0 ;
  Bullet::btVector3FloatData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btConvexInternalShapeData **)&jarg1; 
  result = (Bullet::btVector3FloatData *)& ((arg1)->m_implicitShapeDimensions);
  *(Bullet::btVector3FloatData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btConvexInternalShapeData_1collisionMargin_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  Bullet::btConvexInternalShapeData *arg1 = (Bullet::btConvexInternalShapeData *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btConvexInternalShapeData **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->m_collisionMargin = arg2;
}


SWIGEXPORT jfloat JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btConvexInternalShapeData_1collisionMargin_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  Bullet::btConvexInternalShapeData *arg1 = (Bullet::btConvexInternalShapeData *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btConvexInternalShapeData **)&jarg1; 
  result = (float) ((arg1)->m_collisionMargin);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btConvexInternalShapeData_1padding_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Bullet::btConvexInternalShapeData *arg1 = (Bullet::btConvexInternalShapeData *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btConvexInternalShapeData **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_padding = arg2;
}


SWIGEXPORT jint JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btConvexInternalShapeData_1padding_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Bullet::btConvexInternalShapeData *arg1 = (Bullet::btConvexInternalShapeData *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btConvexInternalShapeData **)&jarg1; 
  result = (int) ((arg1)->m_padding);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_new_1btConvexInternalShapeData(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Bullet::btConvexInternalShapeData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Bullet::btConvexInternalShapeData *)new Bullet::btConvexInternalShapeData();
  *(Bullet::btConvexInternalShapeData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_delete_1btConvexInternalShapeData(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Bullet::btConvexInternalShapeData *arg1 = (Bullet::btConvexInternalShapeData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Bullet::btConvexInternalShapeData **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btPositionAndRadius_1pos_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Bullet::btPositionAndRadius *arg1 = (Bullet::btPositionAndRadius *) 0 ;
  Bullet::btVector3FloatData *arg2 = (Bullet::btVector3FloatData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Bullet::btPositionAndRadius **)&jarg1; 
  arg2 = *(Bullet::btVector3FloatData **)&jarg2; 
  if (arg1) (arg1)->m_pos = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btPositionAndRadius_1pos_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Bullet::btPositionAndRadius *arg1 = (Bullet::btPositionAndRadius *) 0 ;
  Bullet::btVector3FloatData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btPositionAndRadius **)&jarg1; 
  result = (Bullet::btVector3FloatData *)& ((arg1)->m_pos);
  *(Bullet::btVector3FloatData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btPositionAndRadius_1radius_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  Bullet::btPositionAndRadius *arg1 = (Bullet::btPositionAndRadius *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btPositionAndRadius **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->m_radius = arg2;
}


SWIGEXPORT jfloat JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btPositionAndRadius_1radius_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  Bullet::btPositionAndRadius *arg1 = (Bullet::btPositionAndRadius *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btPositionAndRadius **)&jarg1; 
  result = (float) ((arg1)->m_radius);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_new_1btPositionAndRadius(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Bullet::btPositionAndRadius *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Bullet::btPositionAndRadius *)new Bullet::btPositionAndRadius();
  *(Bullet::btPositionAndRadius **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_delete_1btPositionAndRadius(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Bullet::btPositionAndRadius *arg1 = (Bullet::btPositionAndRadius *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Bullet::btPositionAndRadius **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btMultiSphereShapeData_1convexInternalShapeData_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Bullet::btMultiSphereShapeData *arg1 = (Bullet::btMultiSphereShapeData *) 0 ;
  Bullet::btConvexInternalShapeData *arg2 = (Bullet::btConvexInternalShapeData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Bullet::btMultiSphereShapeData **)&jarg1; 
  arg2 = *(Bullet::btConvexInternalShapeData **)&jarg2; 
  if (arg1) (arg1)->m_convexInternalShapeData = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btMultiSphereShapeData_1convexInternalShapeData_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Bullet::btMultiSphereShapeData *arg1 = (Bullet::btMultiSphereShapeData *) 0 ;
  Bullet::btConvexInternalShapeData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btMultiSphereShapeData **)&jarg1; 
  result = (Bullet::btConvexInternalShapeData *)& ((arg1)->m_convexInternalShapeData);
  *(Bullet::btConvexInternalShapeData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btMultiSphereShapeData_1localPositionArrayPtr_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Bullet::btMultiSphereShapeData *arg1 = (Bullet::btMultiSphereShapeData *) 0 ;
  Bullet::btPositionAndRadius *arg2 = (Bullet::btPositionAndRadius *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Bullet::btMultiSphereShapeData **)&jarg1; 
  arg2 = *(Bullet::btPositionAndRadius **)&jarg2; 
  if (arg1) (arg1)->m_localPositionArrayPtr = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btMultiSphereShapeData_1localPositionArrayPtr_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Bullet::btMultiSphereShapeData *arg1 = (Bullet::btMultiSphereShapeData *) 0 ;
  Bullet::btPositionAndRadius *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btMultiSphereShapeData **)&jarg1; 
  result = (Bullet::btPositionAndRadius *) ((arg1)->m_localPositionArrayPtr);
  *(Bullet::btPositionAndRadius **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btMultiSphereShapeData_1localPositionArraySize_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Bullet::btMultiSphereShapeData *arg1 = (Bullet::btMultiSphereShapeData *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btMultiSphereShapeData **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_localPositionArraySize = arg2;
}


SWIGEXPORT jint JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btMultiSphereShapeData_1localPositionArraySize_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Bullet::btMultiSphereShapeData *arg1 = (Bullet::btMultiSphereShapeData *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btMultiSphereShapeData **)&jarg1; 
  result = (int) ((arg1)->m_localPositionArraySize);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btMultiSphereShapeData_1padding_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  Bullet::btMultiSphereShapeData *arg1 = (Bullet::btMultiSphereShapeData *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btMultiSphereShapeData **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->m_padding, (const char *)arg2, 4-1);
      arg1->m_padding[4-1] = 0;
    } else {
      arg1->m_padding[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btMultiSphereShapeData_1padding_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  Bullet::btMultiSphereShapeData *arg1 = (Bullet::btMultiSphereShapeData *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btMultiSphereShapeData **)&jarg1; 
  result = (char *)(char *) ((arg1)->m_padding);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_new_1btMultiSphereShapeData(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Bullet::btMultiSphereShapeData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Bullet::btMultiSphereShapeData *)new Bullet::btMultiSphereShapeData();
  *(Bullet::btMultiSphereShapeData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_delete_1btMultiSphereShapeData(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Bullet::btMultiSphereShapeData *arg1 = (Bullet::btMultiSphereShapeData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Bullet::btMultiSphereShapeData **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btIntIndexData_1value_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Bullet::btIntIndexData *arg1 = (Bullet::btIntIndexData *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btIntIndexData **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_value = arg2;
}


SWIGEXPORT jint JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btIntIndexData_1value_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Bullet::btIntIndexData *arg1 = (Bullet::btIntIndexData *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btIntIndexData **)&jarg1; 
  result = (int) ((arg1)->m_value);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_new_1btIntIndexData(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Bullet::btIntIndexData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Bullet::btIntIndexData *)new Bullet::btIntIndexData();
  *(Bullet::btIntIndexData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_delete_1btIntIndexData(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Bullet::btIntIndexData *arg1 = (Bullet::btIntIndexData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Bullet::btIntIndexData **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btShortIntIndexData_1value_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  Bullet::btShortIntIndexData *arg1 = (Bullet::btShortIntIndexData *) 0 ;
  short arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btShortIntIndexData **)&jarg1; 
  arg2 = (short)jarg2; 
  if (arg1) (arg1)->m_value = arg2;
}


SWIGEXPORT jshort JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btShortIntIndexData_1value_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  Bullet::btShortIntIndexData *arg1 = (Bullet::btShortIntIndexData *) 0 ;
  short result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btShortIntIndexData **)&jarg1; 
  result = (short) ((arg1)->m_value);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btShortIntIndexData_1pad_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  Bullet::btShortIntIndexData *arg1 = (Bullet::btShortIntIndexData *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btShortIntIndexData **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->m_pad, (const char *)arg2, 2-1);
      arg1->m_pad[2-1] = 0;
    } else {
      arg1->m_pad[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btShortIntIndexData_1pad_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  Bullet::btShortIntIndexData *arg1 = (Bullet::btShortIntIndexData *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btShortIntIndexData **)&jarg1; 
  result = (char *)(char *) ((arg1)->m_pad);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_new_1btShortIntIndexData(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Bullet::btShortIntIndexData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Bullet::btShortIntIndexData *)new Bullet::btShortIntIndexData();
  *(Bullet::btShortIntIndexData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_delete_1btShortIntIndexData(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Bullet::btShortIntIndexData *arg1 = (Bullet::btShortIntIndexData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Bullet::btShortIntIndexData **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btShortIntIndexTripletData_1values_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshortArray jarg2) {
  Bullet::btShortIntIndexTripletData *arg1 = (Bullet::btShortIntIndexTripletData *) 0 ;
  short *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btShortIntIndexTripletData **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  arg2 = (short *)jenv->GetPrimitiveArrayCritical(jarg2, 0); 
  {
    size_t ii;
    short *b = (short *) arg1->m_values;
    for (ii = 0; ii < (size_t)3; ii++) b[ii] = *((short *) arg2 + ii);
  }
  jenv->ReleasePrimitiveArrayCritical(jarg2, (short *)arg2, 0); 
}


SWIGEXPORT jshortArray JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btShortIntIndexTripletData_1values_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshortArray jresult = 0 ;
  Bullet::btShortIntIndexTripletData *arg1 = (Bullet::btShortIntIndexTripletData *) 0 ;
  short *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btShortIntIndexTripletData **)&jarg1; 
  result = (short *)(short *) ((arg1)->m_values);
  /*jresult = SWIG_JavaArrayOut##Short(jenv, (short *)result, 3);*/ 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btShortIntIndexTripletData_1pad_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  Bullet::btShortIntIndexTripletData *arg1 = (Bullet::btShortIntIndexTripletData *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btShortIntIndexTripletData **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->m_pad, (const char *)arg2, 2-1);
      arg1->m_pad[2-1] = 0;
    } else {
      arg1->m_pad[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btShortIntIndexTripletData_1pad_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  Bullet::btShortIntIndexTripletData *arg1 = (Bullet::btShortIntIndexTripletData *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btShortIntIndexTripletData **)&jarg1; 
  result = (char *)(char *) ((arg1)->m_pad);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_new_1btShortIntIndexTripletData(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Bullet::btShortIntIndexTripletData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Bullet::btShortIntIndexTripletData *)new Bullet::btShortIntIndexTripletData();
  *(Bullet::btShortIntIndexTripletData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_delete_1btShortIntIndexTripletData(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Bullet::btShortIntIndexTripletData *arg1 = (Bullet::btShortIntIndexTripletData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Bullet::btShortIntIndexTripletData **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btCharIndexTripletData_1values_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  Bullet::btCharIndexTripletData *arg1 = (Bullet::btCharIndexTripletData *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btCharIndexTripletData **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->m_values, (const char *)arg2, 3-1);
      arg1->m_values[3-1] = 0;
    } else {
      arg1->m_values[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btCharIndexTripletData_1values_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  Bullet::btCharIndexTripletData *arg1 = (Bullet::btCharIndexTripletData *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btCharIndexTripletData **)&jarg1; 
  result = (char *)(char *) ((arg1)->m_values);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btCharIndexTripletData_1pad_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jchar jarg2) {
  Bullet::btCharIndexTripletData *arg1 = (Bullet::btCharIndexTripletData *) 0 ;
  char arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btCharIndexTripletData **)&jarg1; 
  arg2 = (char)jarg2; 
  if (arg1) (arg1)->m_pad = arg2;
}


SWIGEXPORT jchar JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btCharIndexTripletData_1pad_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jchar jresult = 0 ;
  Bullet::btCharIndexTripletData *arg1 = (Bullet::btCharIndexTripletData *) 0 ;
  char result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btCharIndexTripletData **)&jarg1; 
  result = (char) ((arg1)->m_pad);
  jresult = (jchar)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_new_1btCharIndexTripletData(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Bullet::btCharIndexTripletData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Bullet::btCharIndexTripletData *)new Bullet::btCharIndexTripletData();
  *(Bullet::btCharIndexTripletData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_delete_1btCharIndexTripletData(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Bullet::btCharIndexTripletData *arg1 = (Bullet::btCharIndexTripletData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Bullet::btCharIndexTripletData **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btMeshPartData_1vertices3f_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Bullet::btMeshPartData *arg1 = (Bullet::btMeshPartData *) 0 ;
  Bullet::btVector3FloatData *arg2 = (Bullet::btVector3FloatData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Bullet::btMeshPartData **)&jarg1; 
  arg2 = *(Bullet::btVector3FloatData **)&jarg2; 
  if (arg1) (arg1)->m_vertices3f = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btMeshPartData_1vertices3f_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Bullet::btMeshPartData *arg1 = (Bullet::btMeshPartData *) 0 ;
  Bullet::btVector3FloatData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btMeshPartData **)&jarg1; 
  result = (Bullet::btVector3FloatData *) ((arg1)->m_vertices3f);
  *(Bullet::btVector3FloatData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btMeshPartData_1vertices3d_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Bullet::btMeshPartData *arg1 = (Bullet::btMeshPartData *) 0 ;
  Bullet::btVector3DoubleData *arg2 = (Bullet::btVector3DoubleData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Bullet::btMeshPartData **)&jarg1; 
  arg2 = *(Bullet::btVector3DoubleData **)&jarg2; 
  if (arg1) (arg1)->m_vertices3d = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btMeshPartData_1vertices3d_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Bullet::btMeshPartData *arg1 = (Bullet::btMeshPartData *) 0 ;
  Bullet::btVector3DoubleData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btMeshPartData **)&jarg1; 
  result = (Bullet::btVector3DoubleData *) ((arg1)->m_vertices3d);
  *(Bullet::btVector3DoubleData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btMeshPartData_1indices32_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Bullet::btMeshPartData *arg1 = (Bullet::btMeshPartData *) 0 ;
  Bullet::btIntIndexData *arg2 = (Bullet::btIntIndexData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Bullet::btMeshPartData **)&jarg1; 
  arg2 = *(Bullet::btIntIndexData **)&jarg2; 
  if (arg1) (arg1)->m_indices32 = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btMeshPartData_1indices32_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Bullet::btMeshPartData *arg1 = (Bullet::btMeshPartData *) 0 ;
  Bullet::btIntIndexData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btMeshPartData **)&jarg1; 
  result = (Bullet::btIntIndexData *) ((arg1)->m_indices32);
  *(Bullet::btIntIndexData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btMeshPartData_13indices16_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Bullet::btMeshPartData *arg1 = (Bullet::btMeshPartData *) 0 ;
  Bullet::btShortIntIndexTripletData *arg2 = (Bullet::btShortIntIndexTripletData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Bullet::btMeshPartData **)&jarg1; 
  arg2 = *(Bullet::btShortIntIndexTripletData **)&jarg2; 
  if (arg1) (arg1)->m_3indices16 = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btMeshPartData_13indices16_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Bullet::btMeshPartData *arg1 = (Bullet::btMeshPartData *) 0 ;
  Bullet::btShortIntIndexTripletData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btMeshPartData **)&jarg1; 
  result = (Bullet::btShortIntIndexTripletData *) ((arg1)->m_3indices16);
  *(Bullet::btShortIntIndexTripletData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btMeshPartData_13indices8_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Bullet::btMeshPartData *arg1 = (Bullet::btMeshPartData *) 0 ;
  Bullet::btCharIndexTripletData *arg2 = (Bullet::btCharIndexTripletData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Bullet::btMeshPartData **)&jarg1; 
  arg2 = *(Bullet::btCharIndexTripletData **)&jarg2; 
  if (arg1) (arg1)->m_3indices8 = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btMeshPartData_13indices8_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Bullet::btMeshPartData *arg1 = (Bullet::btMeshPartData *) 0 ;
  Bullet::btCharIndexTripletData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btMeshPartData **)&jarg1; 
  result = (Bullet::btCharIndexTripletData *) ((arg1)->m_3indices8);
  *(Bullet::btCharIndexTripletData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btMeshPartData_1indices16_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Bullet::btMeshPartData *arg1 = (Bullet::btMeshPartData *) 0 ;
  Bullet::btShortIntIndexData *arg2 = (Bullet::btShortIntIndexData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Bullet::btMeshPartData **)&jarg1; 
  arg2 = *(Bullet::btShortIntIndexData **)&jarg2; 
  if (arg1) (arg1)->m_indices16 = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btMeshPartData_1indices16_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Bullet::btMeshPartData *arg1 = (Bullet::btMeshPartData *) 0 ;
  Bullet::btShortIntIndexData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btMeshPartData **)&jarg1; 
  result = (Bullet::btShortIntIndexData *) ((arg1)->m_indices16);
  *(Bullet::btShortIntIndexData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btMeshPartData_1numTriangles_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Bullet::btMeshPartData *arg1 = (Bullet::btMeshPartData *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btMeshPartData **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_numTriangles = arg2;
}


SWIGEXPORT jint JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btMeshPartData_1numTriangles_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Bullet::btMeshPartData *arg1 = (Bullet::btMeshPartData *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btMeshPartData **)&jarg1; 
  result = (int) ((arg1)->m_numTriangles);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btMeshPartData_1numVertices_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Bullet::btMeshPartData *arg1 = (Bullet::btMeshPartData *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btMeshPartData **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_numVertices = arg2;
}


SWIGEXPORT jint JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btMeshPartData_1numVertices_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Bullet::btMeshPartData *arg1 = (Bullet::btMeshPartData *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btMeshPartData **)&jarg1; 
  result = (int) ((arg1)->m_numVertices);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_new_1btMeshPartData(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Bullet::btMeshPartData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Bullet::btMeshPartData *)new Bullet::btMeshPartData();
  *(Bullet::btMeshPartData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_delete_1btMeshPartData(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Bullet::btMeshPartData *arg1 = (Bullet::btMeshPartData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Bullet::btMeshPartData **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btStridingMeshInterfaceData_1meshPartsPtr_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Bullet::btStridingMeshInterfaceData *arg1 = (Bullet::btStridingMeshInterfaceData *) 0 ;
  Bullet::btMeshPartData *arg2 = (Bullet::btMeshPartData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Bullet::btStridingMeshInterfaceData **)&jarg1; 
  arg2 = *(Bullet::btMeshPartData **)&jarg2; 
  if (arg1) (arg1)->m_meshPartsPtr = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btStridingMeshInterfaceData_1meshPartsPtr_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Bullet::btStridingMeshInterfaceData *arg1 = (Bullet::btStridingMeshInterfaceData *) 0 ;
  Bullet::btMeshPartData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btStridingMeshInterfaceData **)&jarg1; 
  result = (Bullet::btMeshPartData *) ((arg1)->m_meshPartsPtr);
  *(Bullet::btMeshPartData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btStridingMeshInterfaceData_1scaling_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Bullet::btStridingMeshInterfaceData *arg1 = (Bullet::btStridingMeshInterfaceData *) 0 ;
  Bullet::btVector3FloatData *arg2 = (Bullet::btVector3FloatData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Bullet::btStridingMeshInterfaceData **)&jarg1; 
  arg2 = *(Bullet::btVector3FloatData **)&jarg2; 
  if (arg1) (arg1)->m_scaling = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btStridingMeshInterfaceData_1scaling_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Bullet::btStridingMeshInterfaceData *arg1 = (Bullet::btStridingMeshInterfaceData *) 0 ;
  Bullet::btVector3FloatData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btStridingMeshInterfaceData **)&jarg1; 
  result = (Bullet::btVector3FloatData *)& ((arg1)->m_scaling);
  *(Bullet::btVector3FloatData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btStridingMeshInterfaceData_1numMeshParts_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Bullet::btStridingMeshInterfaceData *arg1 = (Bullet::btStridingMeshInterfaceData *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btStridingMeshInterfaceData **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_numMeshParts = arg2;
}


SWIGEXPORT jint JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btStridingMeshInterfaceData_1numMeshParts_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Bullet::btStridingMeshInterfaceData *arg1 = (Bullet::btStridingMeshInterfaceData *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btStridingMeshInterfaceData **)&jarg1; 
  result = (int) ((arg1)->m_numMeshParts);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btStridingMeshInterfaceData_1padding_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  Bullet::btStridingMeshInterfaceData *arg1 = (Bullet::btStridingMeshInterfaceData *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btStridingMeshInterfaceData **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->m_padding, (const char *)arg2, 4-1);
      arg1->m_padding[4-1] = 0;
    } else {
      arg1->m_padding[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btStridingMeshInterfaceData_1padding_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  Bullet::btStridingMeshInterfaceData *arg1 = (Bullet::btStridingMeshInterfaceData *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btStridingMeshInterfaceData **)&jarg1; 
  result = (char *)(char *) ((arg1)->m_padding);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_new_1btStridingMeshInterfaceData(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Bullet::btStridingMeshInterfaceData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Bullet::btStridingMeshInterfaceData *)new Bullet::btStridingMeshInterfaceData();
  *(Bullet::btStridingMeshInterfaceData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_delete_1btStridingMeshInterfaceData(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Bullet::btStridingMeshInterfaceData *arg1 = (Bullet::btStridingMeshInterfaceData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Bullet::btStridingMeshInterfaceData **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btTriangleMeshShapeData_1collisionShapeData_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Bullet::btTriangleMeshShapeData *arg1 = (Bullet::btTriangleMeshShapeData *) 0 ;
  Bullet::btCollisionShapeData *arg2 = (Bullet::btCollisionShapeData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Bullet::btTriangleMeshShapeData **)&jarg1; 
  arg2 = *(Bullet::btCollisionShapeData **)&jarg2; 
  if (arg1) (arg1)->m_collisionShapeData = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btTriangleMeshShapeData_1collisionShapeData_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Bullet::btTriangleMeshShapeData *arg1 = (Bullet::btTriangleMeshShapeData *) 0 ;
  Bullet::btCollisionShapeData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btTriangleMeshShapeData **)&jarg1; 
  result = (Bullet::btCollisionShapeData *)& ((arg1)->m_collisionShapeData);
  *(Bullet::btCollisionShapeData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btTriangleMeshShapeData_1meshInterface_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Bullet::btTriangleMeshShapeData *arg1 = (Bullet::btTriangleMeshShapeData *) 0 ;
  Bullet::btStridingMeshInterfaceData *arg2 = (Bullet::btStridingMeshInterfaceData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Bullet::btTriangleMeshShapeData **)&jarg1; 
  arg2 = *(Bullet::btStridingMeshInterfaceData **)&jarg2; 
  if (arg1) (arg1)->m_meshInterface = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btTriangleMeshShapeData_1meshInterface_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Bullet::btTriangleMeshShapeData *arg1 = (Bullet::btTriangleMeshShapeData *) 0 ;
  Bullet::btStridingMeshInterfaceData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btTriangleMeshShapeData **)&jarg1; 
  result = (Bullet::btStridingMeshInterfaceData *)& ((arg1)->m_meshInterface);
  *(Bullet::btStridingMeshInterfaceData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btTriangleMeshShapeData_1quantizedFloatBvh_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Bullet::btTriangleMeshShapeData *arg1 = (Bullet::btTriangleMeshShapeData *) 0 ;
  Bullet::btQuantizedBvhFloatData *arg2 = (Bullet::btQuantizedBvhFloatData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Bullet::btTriangleMeshShapeData **)&jarg1; 
  arg2 = *(Bullet::btQuantizedBvhFloatData **)&jarg2; 
  if (arg1) (arg1)->m_quantizedFloatBvh = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btTriangleMeshShapeData_1quantizedFloatBvh_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Bullet::btTriangleMeshShapeData *arg1 = (Bullet::btTriangleMeshShapeData *) 0 ;
  Bullet::btQuantizedBvhFloatData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btTriangleMeshShapeData **)&jarg1; 
  result = (Bullet::btQuantizedBvhFloatData *) ((arg1)->m_quantizedFloatBvh);
  *(Bullet::btQuantizedBvhFloatData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btTriangleMeshShapeData_1quantizedDoubleBvh_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Bullet::btTriangleMeshShapeData *arg1 = (Bullet::btTriangleMeshShapeData *) 0 ;
  Bullet::btQuantizedBvhDoubleData *arg2 = (Bullet::btQuantizedBvhDoubleData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Bullet::btTriangleMeshShapeData **)&jarg1; 
  arg2 = *(Bullet::btQuantizedBvhDoubleData **)&jarg2; 
  if (arg1) (arg1)->m_quantizedDoubleBvh = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btTriangleMeshShapeData_1quantizedDoubleBvh_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Bullet::btTriangleMeshShapeData *arg1 = (Bullet::btTriangleMeshShapeData *) 0 ;
  Bullet::btQuantizedBvhDoubleData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btTriangleMeshShapeData **)&jarg1; 
  result = (Bullet::btQuantizedBvhDoubleData *) ((arg1)->m_quantizedDoubleBvh);
  *(Bullet::btQuantizedBvhDoubleData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btTriangleMeshShapeData_1triangleInfoMap_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Bullet::btTriangleMeshShapeData *arg1 = (Bullet::btTriangleMeshShapeData *) 0 ;
  Bullet::btTriangleInfoMapData *arg2 = (Bullet::btTriangleInfoMapData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Bullet::btTriangleMeshShapeData **)&jarg1; 
  arg2 = *(Bullet::btTriangleInfoMapData **)&jarg2; 
  if (arg1) (arg1)->m_triangleInfoMap = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btTriangleMeshShapeData_1triangleInfoMap_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Bullet::btTriangleMeshShapeData *arg1 = (Bullet::btTriangleMeshShapeData *) 0 ;
  Bullet::btTriangleInfoMapData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btTriangleMeshShapeData **)&jarg1; 
  result = (Bullet::btTriangleInfoMapData *) ((arg1)->m_triangleInfoMap);
  *(Bullet::btTriangleInfoMapData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btTriangleMeshShapeData_1collisionMargin_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  Bullet::btTriangleMeshShapeData *arg1 = (Bullet::btTriangleMeshShapeData *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btTriangleMeshShapeData **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->m_collisionMargin = arg2;
}


SWIGEXPORT jfloat JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btTriangleMeshShapeData_1collisionMargin_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  Bullet::btTriangleMeshShapeData *arg1 = (Bullet::btTriangleMeshShapeData *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btTriangleMeshShapeData **)&jarg1; 
  result = (float) ((arg1)->m_collisionMargin);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btTriangleMeshShapeData_1pad3_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  Bullet::btTriangleMeshShapeData *arg1 = (Bullet::btTriangleMeshShapeData *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btTriangleMeshShapeData **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->m_pad3, (const char *)arg2, 4-1);
      arg1->m_pad3[4-1] = 0;
    } else {
      arg1->m_pad3[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btTriangleMeshShapeData_1pad3_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  Bullet::btTriangleMeshShapeData *arg1 = (Bullet::btTriangleMeshShapeData *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btTriangleMeshShapeData **)&jarg1; 
  result = (char *)(char *) ((arg1)->m_pad3);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_new_1btTriangleMeshShapeData(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Bullet::btTriangleMeshShapeData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Bullet::btTriangleMeshShapeData *)new Bullet::btTriangleMeshShapeData();
  *(Bullet::btTriangleMeshShapeData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_delete_1btTriangleMeshShapeData(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Bullet::btTriangleMeshShapeData *arg1 = (Bullet::btTriangleMeshShapeData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Bullet::btTriangleMeshShapeData **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btScaledTriangleMeshShapeData_1trimeshShapeData_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Bullet::btScaledTriangleMeshShapeData *arg1 = (Bullet::btScaledTriangleMeshShapeData *) 0 ;
  Bullet::btTriangleMeshShapeData *arg2 = (Bullet::btTriangleMeshShapeData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Bullet::btScaledTriangleMeshShapeData **)&jarg1; 
  arg2 = *(Bullet::btTriangleMeshShapeData **)&jarg2; 
  if (arg1) (arg1)->m_trimeshShapeData = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btScaledTriangleMeshShapeData_1trimeshShapeData_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Bullet::btScaledTriangleMeshShapeData *arg1 = (Bullet::btScaledTriangleMeshShapeData *) 0 ;
  Bullet::btTriangleMeshShapeData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btScaledTriangleMeshShapeData **)&jarg1; 
  result = (Bullet::btTriangleMeshShapeData *)& ((arg1)->m_trimeshShapeData);
  *(Bullet::btTriangleMeshShapeData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btScaledTriangleMeshShapeData_1localScaling_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Bullet::btScaledTriangleMeshShapeData *arg1 = (Bullet::btScaledTriangleMeshShapeData *) 0 ;
  Bullet::btVector3FloatData *arg2 = (Bullet::btVector3FloatData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Bullet::btScaledTriangleMeshShapeData **)&jarg1; 
  arg2 = *(Bullet::btVector3FloatData **)&jarg2; 
  if (arg1) (arg1)->m_localScaling = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btScaledTriangleMeshShapeData_1localScaling_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Bullet::btScaledTriangleMeshShapeData *arg1 = (Bullet::btScaledTriangleMeshShapeData *) 0 ;
  Bullet::btVector3FloatData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btScaledTriangleMeshShapeData **)&jarg1; 
  result = (Bullet::btVector3FloatData *)& ((arg1)->m_localScaling);
  *(Bullet::btVector3FloatData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_new_1btScaledTriangleMeshShapeData(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Bullet::btScaledTriangleMeshShapeData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Bullet::btScaledTriangleMeshShapeData *)new Bullet::btScaledTriangleMeshShapeData();
  *(Bullet::btScaledTriangleMeshShapeData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_delete_1btScaledTriangleMeshShapeData(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Bullet::btScaledTriangleMeshShapeData *arg1 = (Bullet::btScaledTriangleMeshShapeData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Bullet::btScaledTriangleMeshShapeData **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btCompoundShapeChildData_1transform_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Bullet::btCompoundShapeChildData *arg1 = (Bullet::btCompoundShapeChildData *) 0 ;
  Bullet::btTransformFloatData *arg2 = (Bullet::btTransformFloatData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Bullet::btCompoundShapeChildData **)&jarg1; 
  arg2 = *(Bullet::btTransformFloatData **)&jarg2; 
  if (arg1) (arg1)->m_transform = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btCompoundShapeChildData_1transform_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Bullet::btCompoundShapeChildData *arg1 = (Bullet::btCompoundShapeChildData *) 0 ;
  Bullet::btTransformFloatData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btCompoundShapeChildData **)&jarg1; 
  result = (Bullet::btTransformFloatData *)& ((arg1)->m_transform);
  *(Bullet::btTransformFloatData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btCompoundShapeChildData_1childShape_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Bullet::btCompoundShapeChildData *arg1 = (Bullet::btCompoundShapeChildData *) 0 ;
  Bullet::btCollisionShapeData *arg2 = (Bullet::btCollisionShapeData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Bullet::btCompoundShapeChildData **)&jarg1; 
  arg2 = *(Bullet::btCollisionShapeData **)&jarg2; 
  if (arg1) (arg1)->m_childShape = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btCompoundShapeChildData_1childShape_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Bullet::btCompoundShapeChildData *arg1 = (Bullet::btCompoundShapeChildData *) 0 ;
  Bullet::btCollisionShapeData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btCompoundShapeChildData **)&jarg1; 
  result = (Bullet::btCollisionShapeData *) ((arg1)->m_childShape);
  *(Bullet::btCollisionShapeData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btCompoundShapeChildData_1childShapeType_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Bullet::btCompoundShapeChildData *arg1 = (Bullet::btCompoundShapeChildData *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btCompoundShapeChildData **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_childShapeType = arg2;
}


SWIGEXPORT jint JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btCompoundShapeChildData_1childShapeType_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Bullet::btCompoundShapeChildData *arg1 = (Bullet::btCompoundShapeChildData *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btCompoundShapeChildData **)&jarg1; 
  result = (int) ((arg1)->m_childShapeType);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btCompoundShapeChildData_1childMargin_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  Bullet::btCompoundShapeChildData *arg1 = (Bullet::btCompoundShapeChildData *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btCompoundShapeChildData **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->m_childMargin = arg2;
}


SWIGEXPORT jfloat JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btCompoundShapeChildData_1childMargin_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  Bullet::btCompoundShapeChildData *arg1 = (Bullet::btCompoundShapeChildData *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btCompoundShapeChildData **)&jarg1; 
  result = (float) ((arg1)->m_childMargin);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_new_1btCompoundShapeChildData(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Bullet::btCompoundShapeChildData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Bullet::btCompoundShapeChildData *)new Bullet::btCompoundShapeChildData();
  *(Bullet::btCompoundShapeChildData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_delete_1btCompoundShapeChildData(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Bullet::btCompoundShapeChildData *arg1 = (Bullet::btCompoundShapeChildData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Bullet::btCompoundShapeChildData **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btCompoundShapeData_1collisionShapeData_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Bullet::btCompoundShapeData *arg1 = (Bullet::btCompoundShapeData *) 0 ;
  Bullet::btCollisionShapeData *arg2 = (Bullet::btCollisionShapeData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Bullet::btCompoundShapeData **)&jarg1; 
  arg2 = *(Bullet::btCollisionShapeData **)&jarg2; 
  if (arg1) (arg1)->m_collisionShapeData = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btCompoundShapeData_1collisionShapeData_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Bullet::btCompoundShapeData *arg1 = (Bullet::btCompoundShapeData *) 0 ;
  Bullet::btCollisionShapeData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btCompoundShapeData **)&jarg1; 
  result = (Bullet::btCollisionShapeData *)& ((arg1)->m_collisionShapeData);
  *(Bullet::btCollisionShapeData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btCompoundShapeData_1childShapePtr_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Bullet::btCompoundShapeData *arg1 = (Bullet::btCompoundShapeData *) 0 ;
  Bullet::btCompoundShapeChildData *arg2 = (Bullet::btCompoundShapeChildData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Bullet::btCompoundShapeData **)&jarg1; 
  arg2 = *(Bullet::btCompoundShapeChildData **)&jarg2; 
  if (arg1) (arg1)->m_childShapePtr = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btCompoundShapeData_1childShapePtr_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Bullet::btCompoundShapeData *arg1 = (Bullet::btCompoundShapeData *) 0 ;
  Bullet::btCompoundShapeChildData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btCompoundShapeData **)&jarg1; 
  result = (Bullet::btCompoundShapeChildData *) ((arg1)->m_childShapePtr);
  *(Bullet::btCompoundShapeChildData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btCompoundShapeData_1numChildShapes_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Bullet::btCompoundShapeData *arg1 = (Bullet::btCompoundShapeData *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btCompoundShapeData **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_numChildShapes = arg2;
}


SWIGEXPORT jint JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btCompoundShapeData_1numChildShapes_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Bullet::btCompoundShapeData *arg1 = (Bullet::btCompoundShapeData *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btCompoundShapeData **)&jarg1; 
  result = (int) ((arg1)->m_numChildShapes);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btCompoundShapeData_1collisionMargin_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  Bullet::btCompoundShapeData *arg1 = (Bullet::btCompoundShapeData *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btCompoundShapeData **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->m_collisionMargin = arg2;
}


SWIGEXPORT jfloat JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btCompoundShapeData_1collisionMargin_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  Bullet::btCompoundShapeData *arg1 = (Bullet::btCompoundShapeData *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btCompoundShapeData **)&jarg1; 
  result = (float) ((arg1)->m_collisionMargin);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_new_1btCompoundShapeData(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Bullet::btCompoundShapeData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Bullet::btCompoundShapeData *)new Bullet::btCompoundShapeData();
  *(Bullet::btCompoundShapeData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_delete_1btCompoundShapeData(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Bullet::btCompoundShapeData *arg1 = (Bullet::btCompoundShapeData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Bullet::btCompoundShapeData **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btCylinderShapeData_1convexInternalShapeData_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Bullet::btCylinderShapeData *arg1 = (Bullet::btCylinderShapeData *) 0 ;
  Bullet::btConvexInternalShapeData *arg2 = (Bullet::btConvexInternalShapeData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Bullet::btCylinderShapeData **)&jarg1; 
  arg2 = *(Bullet::btConvexInternalShapeData **)&jarg2; 
  if (arg1) (arg1)->m_convexInternalShapeData = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btCylinderShapeData_1convexInternalShapeData_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Bullet::btCylinderShapeData *arg1 = (Bullet::btCylinderShapeData *) 0 ;
  Bullet::btConvexInternalShapeData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btCylinderShapeData **)&jarg1; 
  result = (Bullet::btConvexInternalShapeData *)& ((arg1)->m_convexInternalShapeData);
  *(Bullet::btConvexInternalShapeData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btCylinderShapeData_1upAxis_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Bullet::btCylinderShapeData *arg1 = (Bullet::btCylinderShapeData *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btCylinderShapeData **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_upAxis = arg2;
}


SWIGEXPORT jint JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btCylinderShapeData_1upAxis_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Bullet::btCylinderShapeData *arg1 = (Bullet::btCylinderShapeData *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btCylinderShapeData **)&jarg1; 
  result = (int) ((arg1)->m_upAxis);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btCylinderShapeData_1padding_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  Bullet::btCylinderShapeData *arg1 = (Bullet::btCylinderShapeData *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btCylinderShapeData **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->m_padding, (const char *)arg2, 4-1);
      arg1->m_padding[4-1] = 0;
    } else {
      arg1->m_padding[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btCylinderShapeData_1padding_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  Bullet::btCylinderShapeData *arg1 = (Bullet::btCylinderShapeData *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btCylinderShapeData **)&jarg1; 
  result = (char *)(char *) ((arg1)->m_padding);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_new_1btCylinderShapeData(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Bullet::btCylinderShapeData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Bullet::btCylinderShapeData *)new Bullet::btCylinderShapeData();
  *(Bullet::btCylinderShapeData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_delete_1btCylinderShapeData(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Bullet::btCylinderShapeData *arg1 = (Bullet::btCylinderShapeData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Bullet::btCylinderShapeData **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btConeShapeData_1convexInternalShapeData_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Bullet::btConeShapeData *arg1 = (Bullet::btConeShapeData *) 0 ;
  Bullet::btConvexInternalShapeData *arg2 = (Bullet::btConvexInternalShapeData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Bullet::btConeShapeData **)&jarg1; 
  arg2 = *(Bullet::btConvexInternalShapeData **)&jarg2; 
  if (arg1) (arg1)->m_convexInternalShapeData = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btConeShapeData_1convexInternalShapeData_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Bullet::btConeShapeData *arg1 = (Bullet::btConeShapeData *) 0 ;
  Bullet::btConvexInternalShapeData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btConeShapeData **)&jarg1; 
  result = (Bullet::btConvexInternalShapeData *)& ((arg1)->m_convexInternalShapeData);
  *(Bullet::btConvexInternalShapeData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btConeShapeData_1upIndex_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Bullet::btConeShapeData *arg1 = (Bullet::btConeShapeData *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btConeShapeData **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_upIndex = arg2;
}


SWIGEXPORT jint JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btConeShapeData_1upIndex_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Bullet::btConeShapeData *arg1 = (Bullet::btConeShapeData *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btConeShapeData **)&jarg1; 
  result = (int) ((arg1)->m_upIndex);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btConeShapeData_1padding_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  Bullet::btConeShapeData *arg1 = (Bullet::btConeShapeData *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btConeShapeData **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->m_padding, (const char *)arg2, 4-1);
      arg1->m_padding[4-1] = 0;
    } else {
      arg1->m_padding[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btConeShapeData_1padding_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  Bullet::btConeShapeData *arg1 = (Bullet::btConeShapeData *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btConeShapeData **)&jarg1; 
  result = (char *)(char *) ((arg1)->m_padding);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_new_1btConeShapeData(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Bullet::btConeShapeData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Bullet::btConeShapeData *)new Bullet::btConeShapeData();
  *(Bullet::btConeShapeData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_delete_1btConeShapeData(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Bullet::btConeShapeData *arg1 = (Bullet::btConeShapeData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Bullet::btConeShapeData **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btCapsuleShapeData_1convexInternalShapeData_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Bullet::btCapsuleShapeData *arg1 = (Bullet::btCapsuleShapeData *) 0 ;
  Bullet::btConvexInternalShapeData *arg2 = (Bullet::btConvexInternalShapeData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Bullet::btCapsuleShapeData **)&jarg1; 
  arg2 = *(Bullet::btConvexInternalShapeData **)&jarg2; 
  if (arg1) (arg1)->m_convexInternalShapeData = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btCapsuleShapeData_1convexInternalShapeData_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Bullet::btCapsuleShapeData *arg1 = (Bullet::btCapsuleShapeData *) 0 ;
  Bullet::btConvexInternalShapeData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btCapsuleShapeData **)&jarg1; 
  result = (Bullet::btConvexInternalShapeData *)& ((arg1)->m_convexInternalShapeData);
  *(Bullet::btConvexInternalShapeData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btCapsuleShapeData_1upAxis_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Bullet::btCapsuleShapeData *arg1 = (Bullet::btCapsuleShapeData *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btCapsuleShapeData **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_upAxis = arg2;
}


SWIGEXPORT jint JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btCapsuleShapeData_1upAxis_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Bullet::btCapsuleShapeData *arg1 = (Bullet::btCapsuleShapeData *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btCapsuleShapeData **)&jarg1; 
  result = (int) ((arg1)->m_upAxis);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btCapsuleShapeData_1padding_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  Bullet::btCapsuleShapeData *arg1 = (Bullet::btCapsuleShapeData *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btCapsuleShapeData **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->m_padding, (const char *)arg2, 4-1);
      arg1->m_padding[4-1] = 0;
    } else {
      arg1->m_padding[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btCapsuleShapeData_1padding_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  Bullet::btCapsuleShapeData *arg1 = (Bullet::btCapsuleShapeData *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btCapsuleShapeData **)&jarg1; 
  result = (char *)(char *) ((arg1)->m_padding);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_new_1btCapsuleShapeData(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Bullet::btCapsuleShapeData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Bullet::btCapsuleShapeData *)new Bullet::btCapsuleShapeData();
  *(Bullet::btCapsuleShapeData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_delete_1btCapsuleShapeData(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Bullet::btCapsuleShapeData *arg1 = (Bullet::btCapsuleShapeData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Bullet::btCapsuleShapeData **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btTriangleInfoData_1flags_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Bullet::btTriangleInfoData *arg1 = (Bullet::btTriangleInfoData *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btTriangleInfoData **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_flags = arg2;
}


SWIGEXPORT jint JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btTriangleInfoData_1flags_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Bullet::btTriangleInfoData *arg1 = (Bullet::btTriangleInfoData *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btTriangleInfoData **)&jarg1; 
  result = (int) ((arg1)->m_flags);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btTriangleInfoData_1edgeV0V1Angle_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  Bullet::btTriangleInfoData *arg1 = (Bullet::btTriangleInfoData *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btTriangleInfoData **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->m_edgeV0V1Angle = arg2;
}


SWIGEXPORT jfloat JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btTriangleInfoData_1edgeV0V1Angle_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  Bullet::btTriangleInfoData *arg1 = (Bullet::btTriangleInfoData *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btTriangleInfoData **)&jarg1; 
  result = (float) ((arg1)->m_edgeV0V1Angle);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btTriangleInfoData_1edgeV1V2Angle_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  Bullet::btTriangleInfoData *arg1 = (Bullet::btTriangleInfoData *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btTriangleInfoData **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->m_edgeV1V2Angle = arg2;
}


SWIGEXPORT jfloat JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btTriangleInfoData_1edgeV1V2Angle_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  Bullet::btTriangleInfoData *arg1 = (Bullet::btTriangleInfoData *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btTriangleInfoData **)&jarg1; 
  result = (float) ((arg1)->m_edgeV1V2Angle);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btTriangleInfoData_1edgeV2V0Angle_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  Bullet::btTriangleInfoData *arg1 = (Bullet::btTriangleInfoData *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btTriangleInfoData **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->m_edgeV2V0Angle = arg2;
}


SWIGEXPORT jfloat JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btTriangleInfoData_1edgeV2V0Angle_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  Bullet::btTriangleInfoData *arg1 = (Bullet::btTriangleInfoData *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btTriangleInfoData **)&jarg1; 
  result = (float) ((arg1)->m_edgeV2V0Angle);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_new_1btTriangleInfoData(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Bullet::btTriangleInfoData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Bullet::btTriangleInfoData *)new Bullet::btTriangleInfoData();
  *(Bullet::btTriangleInfoData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_delete_1btTriangleInfoData(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Bullet::btTriangleInfoData *arg1 = (Bullet::btTriangleInfoData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Bullet::btTriangleInfoData **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btTriangleInfoMapData_1hashTablePtr_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobject jarg2) {
  Bullet::btTriangleInfoMapData *arg1 = (Bullet::btTriangleInfoMapData *) 0 ;
  int *arg2 = (int *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btTriangleInfoMapData **)&jarg1; 
  {
    arg2 = (int*)jenv->GetDirectBufferAddress(jarg2);
    if (arg2 == NULL) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unable to get address of direct buffer. Buffer must be allocated direct.");
    }
  }
  {
    if (arg2) {
      arg1->m_hashTablePtr = arg2;
    } else {
      arg1->m_hashTablePtr = 0;
    }
  }
  
}


SWIGEXPORT jobject JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btTriangleInfoMapData_1hashTablePtr_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jobject jresult = 0 ;
  Bullet::btTriangleInfoMapData *arg1 = (Bullet::btTriangleInfoMapData *) 0 ;
  int *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btTriangleInfoMapData **)&jarg1; 
  result = (int *) ((arg1)->m_hashTablePtr);
  *(int **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btTriangleInfoMapData_1nextPtr_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobject jarg2) {
  Bullet::btTriangleInfoMapData *arg1 = (Bullet::btTriangleInfoMapData *) 0 ;
  int *arg2 = (int *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btTriangleInfoMapData **)&jarg1; 
  {
    arg2 = (int*)jenv->GetDirectBufferAddress(jarg2);
    if (arg2 == NULL) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unable to get address of direct buffer. Buffer must be allocated direct.");
    }
  }
  {
    if (arg2) {
      arg1->m_nextPtr = arg2;
    } else {
      arg1->m_nextPtr = 0;
    }
  }
  
}


SWIGEXPORT jobject JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btTriangleInfoMapData_1nextPtr_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jobject jresult = 0 ;
  Bullet::btTriangleInfoMapData *arg1 = (Bullet::btTriangleInfoMapData *) 0 ;
  int *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btTriangleInfoMapData **)&jarg1; 
  result = (int *) ((arg1)->m_nextPtr);
  *(int **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btTriangleInfoMapData_1valueArrayPtr_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Bullet::btTriangleInfoMapData *arg1 = (Bullet::btTriangleInfoMapData *) 0 ;
  Bullet::btTriangleInfoData *arg2 = (Bullet::btTriangleInfoData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Bullet::btTriangleInfoMapData **)&jarg1; 
  arg2 = *(Bullet::btTriangleInfoData **)&jarg2; 
  if (arg1) (arg1)->m_valueArrayPtr = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btTriangleInfoMapData_1valueArrayPtr_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Bullet::btTriangleInfoMapData *arg1 = (Bullet::btTriangleInfoMapData *) 0 ;
  Bullet::btTriangleInfoData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btTriangleInfoMapData **)&jarg1; 
  result = (Bullet::btTriangleInfoData *) ((arg1)->m_valueArrayPtr);
  *(Bullet::btTriangleInfoData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btTriangleInfoMapData_1keyArrayPtr_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobject jarg2) {
  Bullet::btTriangleInfoMapData *arg1 = (Bullet::btTriangleInfoMapData *) 0 ;
  int *arg2 = (int *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btTriangleInfoMapData **)&jarg1; 
  {
    arg2 = (int*)jenv->GetDirectBufferAddress(jarg2);
    if (arg2 == NULL) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unable to get address of direct buffer. Buffer must be allocated direct.");
    }
  }
  {
    if (arg2) {
      arg1->m_keyArrayPtr = arg2;
    } else {
      arg1->m_keyArrayPtr = 0;
    }
  }
  
}


SWIGEXPORT jobject JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btTriangleInfoMapData_1keyArrayPtr_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jobject jresult = 0 ;
  Bullet::btTriangleInfoMapData *arg1 = (Bullet::btTriangleInfoMapData *) 0 ;
  int *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btTriangleInfoMapData **)&jarg1; 
  result = (int *) ((arg1)->m_keyArrayPtr);
  *(int **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btTriangleInfoMapData_1convexEpsilon_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  Bullet::btTriangleInfoMapData *arg1 = (Bullet::btTriangleInfoMapData *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btTriangleInfoMapData **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->m_convexEpsilon = arg2;
}


SWIGEXPORT jfloat JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btTriangleInfoMapData_1convexEpsilon_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  Bullet::btTriangleInfoMapData *arg1 = (Bullet::btTriangleInfoMapData *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btTriangleInfoMapData **)&jarg1; 
  result = (float) ((arg1)->m_convexEpsilon);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btTriangleInfoMapData_1planarEpsilon_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  Bullet::btTriangleInfoMapData *arg1 = (Bullet::btTriangleInfoMapData *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btTriangleInfoMapData **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->m_planarEpsilon = arg2;
}


SWIGEXPORT jfloat JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btTriangleInfoMapData_1planarEpsilon_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  Bullet::btTriangleInfoMapData *arg1 = (Bullet::btTriangleInfoMapData *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btTriangleInfoMapData **)&jarg1; 
  result = (float) ((arg1)->m_planarEpsilon);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btTriangleInfoMapData_1equalVertexThreshold_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  Bullet::btTriangleInfoMapData *arg1 = (Bullet::btTriangleInfoMapData *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btTriangleInfoMapData **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->m_equalVertexThreshold = arg2;
}


SWIGEXPORT jfloat JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btTriangleInfoMapData_1equalVertexThreshold_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  Bullet::btTriangleInfoMapData *arg1 = (Bullet::btTriangleInfoMapData *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btTriangleInfoMapData **)&jarg1; 
  result = (float) ((arg1)->m_equalVertexThreshold);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btTriangleInfoMapData_1edgeDistanceThreshold_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  Bullet::btTriangleInfoMapData *arg1 = (Bullet::btTriangleInfoMapData *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btTriangleInfoMapData **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->m_edgeDistanceThreshold = arg2;
}


SWIGEXPORT jfloat JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btTriangleInfoMapData_1edgeDistanceThreshold_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  Bullet::btTriangleInfoMapData *arg1 = (Bullet::btTriangleInfoMapData *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btTriangleInfoMapData **)&jarg1; 
  result = (float) ((arg1)->m_edgeDistanceThreshold);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btTriangleInfoMapData_1zeroAreaThreshold_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  Bullet::btTriangleInfoMapData *arg1 = (Bullet::btTriangleInfoMapData *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btTriangleInfoMapData **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->m_zeroAreaThreshold = arg2;
}


SWIGEXPORT jfloat JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btTriangleInfoMapData_1zeroAreaThreshold_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  Bullet::btTriangleInfoMapData *arg1 = (Bullet::btTriangleInfoMapData *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btTriangleInfoMapData **)&jarg1; 
  result = (float) ((arg1)->m_zeroAreaThreshold);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btTriangleInfoMapData_1nextSize_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Bullet::btTriangleInfoMapData *arg1 = (Bullet::btTriangleInfoMapData *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btTriangleInfoMapData **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_nextSize = arg2;
}


SWIGEXPORT jint JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btTriangleInfoMapData_1nextSize_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Bullet::btTriangleInfoMapData *arg1 = (Bullet::btTriangleInfoMapData *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btTriangleInfoMapData **)&jarg1; 
  result = (int) ((arg1)->m_nextSize);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btTriangleInfoMapData_1hashTableSize_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Bullet::btTriangleInfoMapData *arg1 = (Bullet::btTriangleInfoMapData *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btTriangleInfoMapData **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_hashTableSize = arg2;
}


SWIGEXPORT jint JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btTriangleInfoMapData_1hashTableSize_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Bullet::btTriangleInfoMapData *arg1 = (Bullet::btTriangleInfoMapData *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btTriangleInfoMapData **)&jarg1; 
  result = (int) ((arg1)->m_hashTableSize);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btTriangleInfoMapData_1numValues_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Bullet::btTriangleInfoMapData *arg1 = (Bullet::btTriangleInfoMapData *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btTriangleInfoMapData **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_numValues = arg2;
}


SWIGEXPORT jint JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btTriangleInfoMapData_1numValues_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Bullet::btTriangleInfoMapData *arg1 = (Bullet::btTriangleInfoMapData *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btTriangleInfoMapData **)&jarg1; 
  result = (int) ((arg1)->m_numValues);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btTriangleInfoMapData_1numKeys_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Bullet::btTriangleInfoMapData *arg1 = (Bullet::btTriangleInfoMapData *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btTriangleInfoMapData **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_numKeys = arg2;
}


SWIGEXPORT jint JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btTriangleInfoMapData_1numKeys_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Bullet::btTriangleInfoMapData *arg1 = (Bullet::btTriangleInfoMapData *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btTriangleInfoMapData **)&jarg1; 
  result = (int) ((arg1)->m_numKeys);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btTriangleInfoMapData_1padding_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  Bullet::btTriangleInfoMapData *arg1 = (Bullet::btTriangleInfoMapData *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btTriangleInfoMapData **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->m_padding, (const char *)arg2, 4-1);
      arg1->m_padding[4-1] = 0;
    } else {
      arg1->m_padding[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btTriangleInfoMapData_1padding_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  Bullet::btTriangleInfoMapData *arg1 = (Bullet::btTriangleInfoMapData *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btTriangleInfoMapData **)&jarg1; 
  result = (char *)(char *) ((arg1)->m_padding);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_new_1btTriangleInfoMapData(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Bullet::btTriangleInfoMapData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Bullet::btTriangleInfoMapData *)new Bullet::btTriangleInfoMapData();
  *(Bullet::btTriangleInfoMapData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_delete_1btTriangleInfoMapData(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Bullet::btTriangleInfoMapData *arg1 = (Bullet::btTriangleInfoMapData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Bullet::btTriangleInfoMapData **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btGImpactMeshShapeData_1collisionShapeData_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Bullet::btGImpactMeshShapeData *arg1 = (Bullet::btGImpactMeshShapeData *) 0 ;
  Bullet::btCollisionShapeData *arg2 = (Bullet::btCollisionShapeData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Bullet::btGImpactMeshShapeData **)&jarg1; 
  arg2 = *(Bullet::btCollisionShapeData **)&jarg2; 
  if (arg1) (arg1)->m_collisionShapeData = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btGImpactMeshShapeData_1collisionShapeData_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Bullet::btGImpactMeshShapeData *arg1 = (Bullet::btGImpactMeshShapeData *) 0 ;
  Bullet::btCollisionShapeData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btGImpactMeshShapeData **)&jarg1; 
  result = (Bullet::btCollisionShapeData *)& ((arg1)->m_collisionShapeData);
  *(Bullet::btCollisionShapeData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btGImpactMeshShapeData_1meshInterface_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Bullet::btGImpactMeshShapeData *arg1 = (Bullet::btGImpactMeshShapeData *) 0 ;
  Bullet::btStridingMeshInterfaceData *arg2 = (Bullet::btStridingMeshInterfaceData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Bullet::btGImpactMeshShapeData **)&jarg1; 
  arg2 = *(Bullet::btStridingMeshInterfaceData **)&jarg2; 
  if (arg1) (arg1)->m_meshInterface = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btGImpactMeshShapeData_1meshInterface_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Bullet::btGImpactMeshShapeData *arg1 = (Bullet::btGImpactMeshShapeData *) 0 ;
  Bullet::btStridingMeshInterfaceData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btGImpactMeshShapeData **)&jarg1; 
  result = (Bullet::btStridingMeshInterfaceData *)& ((arg1)->m_meshInterface);
  *(Bullet::btStridingMeshInterfaceData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btGImpactMeshShapeData_1localScaling_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Bullet::btGImpactMeshShapeData *arg1 = (Bullet::btGImpactMeshShapeData *) 0 ;
  Bullet::btVector3FloatData *arg2 = (Bullet::btVector3FloatData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Bullet::btGImpactMeshShapeData **)&jarg1; 
  arg2 = *(Bullet::btVector3FloatData **)&jarg2; 
  if (arg1) (arg1)->m_localScaling = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btGImpactMeshShapeData_1localScaling_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Bullet::btGImpactMeshShapeData *arg1 = (Bullet::btGImpactMeshShapeData *) 0 ;
  Bullet::btVector3FloatData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btGImpactMeshShapeData **)&jarg1; 
  result = (Bullet::btVector3FloatData *)& ((arg1)->m_localScaling);
  *(Bullet::btVector3FloatData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btGImpactMeshShapeData_1collisionMargin_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  Bullet::btGImpactMeshShapeData *arg1 = (Bullet::btGImpactMeshShapeData *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btGImpactMeshShapeData **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->m_collisionMargin = arg2;
}


SWIGEXPORT jfloat JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btGImpactMeshShapeData_1collisionMargin_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  Bullet::btGImpactMeshShapeData *arg1 = (Bullet::btGImpactMeshShapeData *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btGImpactMeshShapeData **)&jarg1; 
  result = (float) ((arg1)->m_collisionMargin);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btGImpactMeshShapeData_1gimpactSubType_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Bullet::btGImpactMeshShapeData *arg1 = (Bullet::btGImpactMeshShapeData *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btGImpactMeshShapeData **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_gimpactSubType = arg2;
}


SWIGEXPORT jint JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btGImpactMeshShapeData_1gimpactSubType_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Bullet::btGImpactMeshShapeData *arg1 = (Bullet::btGImpactMeshShapeData *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btGImpactMeshShapeData **)&jarg1; 
  result = (int) ((arg1)->m_gimpactSubType);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_new_1btGImpactMeshShapeData(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Bullet::btGImpactMeshShapeData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Bullet::btGImpactMeshShapeData *)new Bullet::btGImpactMeshShapeData();
  *(Bullet::btGImpactMeshShapeData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_delete_1btGImpactMeshShapeData(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Bullet::btGImpactMeshShapeData *arg1 = (Bullet::btGImpactMeshShapeData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Bullet::btGImpactMeshShapeData **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btConvexHullShapeData_1convexInternalShapeData_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Bullet::btConvexHullShapeData *arg1 = (Bullet::btConvexHullShapeData *) 0 ;
  Bullet::btConvexInternalShapeData *arg2 = (Bullet::btConvexInternalShapeData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Bullet::btConvexHullShapeData **)&jarg1; 
  arg2 = *(Bullet::btConvexInternalShapeData **)&jarg2; 
  if (arg1) (arg1)->m_convexInternalShapeData = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btConvexHullShapeData_1convexInternalShapeData_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Bullet::btConvexHullShapeData *arg1 = (Bullet::btConvexHullShapeData *) 0 ;
  Bullet::btConvexInternalShapeData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btConvexHullShapeData **)&jarg1; 
  result = (Bullet::btConvexInternalShapeData *)& ((arg1)->m_convexInternalShapeData);
  *(Bullet::btConvexInternalShapeData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btConvexHullShapeData_1unscaledPointsFloatPtr_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Bullet::btConvexHullShapeData *arg1 = (Bullet::btConvexHullShapeData *) 0 ;
  Bullet::btVector3FloatData *arg2 = (Bullet::btVector3FloatData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Bullet::btConvexHullShapeData **)&jarg1; 
  arg2 = *(Bullet::btVector3FloatData **)&jarg2; 
  if (arg1) (arg1)->m_unscaledPointsFloatPtr = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btConvexHullShapeData_1unscaledPointsFloatPtr_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Bullet::btConvexHullShapeData *arg1 = (Bullet::btConvexHullShapeData *) 0 ;
  Bullet::btVector3FloatData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btConvexHullShapeData **)&jarg1; 
  result = (Bullet::btVector3FloatData *) ((arg1)->m_unscaledPointsFloatPtr);
  *(Bullet::btVector3FloatData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btConvexHullShapeData_1unscaledPointsDoublePtr_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Bullet::btConvexHullShapeData *arg1 = (Bullet::btConvexHullShapeData *) 0 ;
  Bullet::btVector3DoubleData *arg2 = (Bullet::btVector3DoubleData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Bullet::btConvexHullShapeData **)&jarg1; 
  arg2 = *(Bullet::btVector3DoubleData **)&jarg2; 
  if (arg1) (arg1)->m_unscaledPointsDoublePtr = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btConvexHullShapeData_1unscaledPointsDoublePtr_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Bullet::btConvexHullShapeData *arg1 = (Bullet::btConvexHullShapeData *) 0 ;
  Bullet::btVector3DoubleData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btConvexHullShapeData **)&jarg1; 
  result = (Bullet::btVector3DoubleData *) ((arg1)->m_unscaledPointsDoublePtr);
  *(Bullet::btVector3DoubleData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btConvexHullShapeData_1numUnscaledPoints_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Bullet::btConvexHullShapeData *arg1 = (Bullet::btConvexHullShapeData *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btConvexHullShapeData **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_numUnscaledPoints = arg2;
}


SWIGEXPORT jint JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btConvexHullShapeData_1numUnscaledPoints_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Bullet::btConvexHullShapeData *arg1 = (Bullet::btConvexHullShapeData *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btConvexHullShapeData **)&jarg1; 
  result = (int) ((arg1)->m_numUnscaledPoints);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btConvexHullShapeData_1padding3_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  Bullet::btConvexHullShapeData *arg1 = (Bullet::btConvexHullShapeData *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btConvexHullShapeData **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->m_padding3, (const char *)arg2, 4-1);
      arg1->m_padding3[4-1] = 0;
    } else {
      arg1->m_padding3[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btConvexHullShapeData_1padding3_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  Bullet::btConvexHullShapeData *arg1 = (Bullet::btConvexHullShapeData *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btConvexHullShapeData **)&jarg1; 
  result = (char *)(char *) ((arg1)->m_padding3);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_new_1btConvexHullShapeData(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Bullet::btConvexHullShapeData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Bullet::btConvexHullShapeData *)new Bullet::btConvexHullShapeData();
  *(Bullet::btConvexHullShapeData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_delete_1btConvexHullShapeData(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Bullet::btConvexHullShapeData *arg1 = (Bullet::btConvexHullShapeData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Bullet::btConvexHullShapeData **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btCollisionObjectDoubleData_1broadphaseHandle_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  Bullet::btCollisionObjectDoubleData *arg1 = (Bullet::btCollisionObjectDoubleData *) 0 ;
  void *arg2 = (void *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btCollisionObjectDoubleData **)&jarg1; 
  arg2 = (void *)jarg2; 
  if (arg1) (arg1)->m_broadphaseHandle = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btCollisionObjectDoubleData_1broadphaseHandle_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Bullet::btCollisionObjectDoubleData *arg1 = (Bullet::btCollisionObjectDoubleData *) 0 ;
  void *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btCollisionObjectDoubleData **)&jarg1; 
  result = (void *) ((arg1)->m_broadphaseHandle);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btCollisionObjectDoubleData_1collisionShape_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  Bullet::btCollisionObjectDoubleData *arg1 = (Bullet::btCollisionObjectDoubleData *) 0 ;
  void *arg2 = (void *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btCollisionObjectDoubleData **)&jarg1; 
  arg2 = (void *)jarg2; 
  if (arg1) (arg1)->m_collisionShape = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btCollisionObjectDoubleData_1collisionShape_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Bullet::btCollisionObjectDoubleData *arg1 = (Bullet::btCollisionObjectDoubleData *) 0 ;
  void *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btCollisionObjectDoubleData **)&jarg1; 
  result = (void *) ((arg1)->m_collisionShape);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btCollisionObjectDoubleData_1rootCollisionShape_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Bullet::btCollisionObjectDoubleData *arg1 = (Bullet::btCollisionObjectDoubleData *) 0 ;
  Bullet::btCollisionShapeData *arg2 = (Bullet::btCollisionShapeData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Bullet::btCollisionObjectDoubleData **)&jarg1; 
  arg2 = *(Bullet::btCollisionShapeData **)&jarg2; 
  if (arg1) (arg1)->m_rootCollisionShape = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btCollisionObjectDoubleData_1rootCollisionShape_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Bullet::btCollisionObjectDoubleData *arg1 = (Bullet::btCollisionObjectDoubleData *) 0 ;
  Bullet::btCollisionShapeData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btCollisionObjectDoubleData **)&jarg1; 
  result = (Bullet::btCollisionShapeData *) ((arg1)->m_rootCollisionShape);
  *(Bullet::btCollisionShapeData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btCollisionObjectDoubleData_1name_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  Bullet::btCollisionObjectDoubleData *arg1 = (Bullet::btCollisionObjectDoubleData *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btCollisionObjectDoubleData **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    delete [] arg1->m_name;
    if (arg2) {
      arg1->m_name = (char *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->m_name, (const char *)arg2);
    } else {
      arg1->m_name = 0;
    }
  }
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btCollisionObjectDoubleData_1name_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  Bullet::btCollisionObjectDoubleData *arg1 = (Bullet::btCollisionObjectDoubleData *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btCollisionObjectDoubleData **)&jarg1; 
  result = (char *) ((arg1)->m_name);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btCollisionObjectDoubleData_1worldTransform_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Bullet::btCollisionObjectDoubleData *arg1 = (Bullet::btCollisionObjectDoubleData *) 0 ;
  Bullet::btTransformDoubleData *arg2 = (Bullet::btTransformDoubleData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Bullet::btCollisionObjectDoubleData **)&jarg1; 
  arg2 = *(Bullet::btTransformDoubleData **)&jarg2; 
  if (arg1) (arg1)->m_worldTransform = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btCollisionObjectDoubleData_1worldTransform_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Bullet::btCollisionObjectDoubleData *arg1 = (Bullet::btCollisionObjectDoubleData *) 0 ;
  Bullet::btTransformDoubleData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btCollisionObjectDoubleData **)&jarg1; 
  result = (Bullet::btTransformDoubleData *)& ((arg1)->m_worldTransform);
  *(Bullet::btTransformDoubleData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btCollisionObjectDoubleData_1interpolationWorldTransform_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Bullet::btCollisionObjectDoubleData *arg1 = (Bullet::btCollisionObjectDoubleData *) 0 ;
  Bullet::btTransformDoubleData *arg2 = (Bullet::btTransformDoubleData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Bullet::btCollisionObjectDoubleData **)&jarg1; 
  arg2 = *(Bullet::btTransformDoubleData **)&jarg2; 
  if (arg1) (arg1)->m_interpolationWorldTransform = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btCollisionObjectDoubleData_1interpolationWorldTransform_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Bullet::btCollisionObjectDoubleData *arg1 = (Bullet::btCollisionObjectDoubleData *) 0 ;
  Bullet::btTransformDoubleData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btCollisionObjectDoubleData **)&jarg1; 
  result = (Bullet::btTransformDoubleData *)& ((arg1)->m_interpolationWorldTransform);
  *(Bullet::btTransformDoubleData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btCollisionObjectDoubleData_1interpolationLinearVelocity_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Bullet::btCollisionObjectDoubleData *arg1 = (Bullet::btCollisionObjectDoubleData *) 0 ;
  Bullet::btVector3DoubleData *arg2 = (Bullet::btVector3DoubleData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Bullet::btCollisionObjectDoubleData **)&jarg1; 
  arg2 = *(Bullet::btVector3DoubleData **)&jarg2; 
  if (arg1) (arg1)->m_interpolationLinearVelocity = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btCollisionObjectDoubleData_1interpolationLinearVelocity_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Bullet::btCollisionObjectDoubleData *arg1 = (Bullet::btCollisionObjectDoubleData *) 0 ;
  Bullet::btVector3DoubleData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btCollisionObjectDoubleData **)&jarg1; 
  result = (Bullet::btVector3DoubleData *)& ((arg1)->m_interpolationLinearVelocity);
  *(Bullet::btVector3DoubleData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btCollisionObjectDoubleData_1interpolationAngularVelocity_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Bullet::btCollisionObjectDoubleData *arg1 = (Bullet::btCollisionObjectDoubleData *) 0 ;
  Bullet::btVector3DoubleData *arg2 = (Bullet::btVector3DoubleData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Bullet::btCollisionObjectDoubleData **)&jarg1; 
  arg2 = *(Bullet::btVector3DoubleData **)&jarg2; 
  if (arg1) (arg1)->m_interpolationAngularVelocity = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btCollisionObjectDoubleData_1interpolationAngularVelocity_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Bullet::btCollisionObjectDoubleData *arg1 = (Bullet::btCollisionObjectDoubleData *) 0 ;
  Bullet::btVector3DoubleData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btCollisionObjectDoubleData **)&jarg1; 
  result = (Bullet::btVector3DoubleData *)& ((arg1)->m_interpolationAngularVelocity);
  *(Bullet::btVector3DoubleData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btCollisionObjectDoubleData_1anisotropicFriction_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Bullet::btCollisionObjectDoubleData *arg1 = (Bullet::btCollisionObjectDoubleData *) 0 ;
  Bullet::btVector3DoubleData *arg2 = (Bullet::btVector3DoubleData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Bullet::btCollisionObjectDoubleData **)&jarg1; 
  arg2 = *(Bullet::btVector3DoubleData **)&jarg2; 
  if (arg1) (arg1)->m_anisotropicFriction = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btCollisionObjectDoubleData_1anisotropicFriction_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Bullet::btCollisionObjectDoubleData *arg1 = (Bullet::btCollisionObjectDoubleData *) 0 ;
  Bullet::btVector3DoubleData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btCollisionObjectDoubleData **)&jarg1; 
  result = (Bullet::btVector3DoubleData *)& ((arg1)->m_anisotropicFriction);
  *(Bullet::btVector3DoubleData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btCollisionObjectDoubleData_1contactProcessingThreshold_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  Bullet::btCollisionObjectDoubleData *arg1 = (Bullet::btCollisionObjectDoubleData *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btCollisionObjectDoubleData **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->m_contactProcessingThreshold = arg2;
}


SWIGEXPORT jdouble JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btCollisionObjectDoubleData_1contactProcessingThreshold_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  Bullet::btCollisionObjectDoubleData *arg1 = (Bullet::btCollisionObjectDoubleData *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btCollisionObjectDoubleData **)&jarg1; 
  result = (double) ((arg1)->m_contactProcessingThreshold);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btCollisionObjectDoubleData_1deactivationTime_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  Bullet::btCollisionObjectDoubleData *arg1 = (Bullet::btCollisionObjectDoubleData *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btCollisionObjectDoubleData **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->m_deactivationTime = arg2;
}


SWIGEXPORT jdouble JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btCollisionObjectDoubleData_1deactivationTime_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  Bullet::btCollisionObjectDoubleData *arg1 = (Bullet::btCollisionObjectDoubleData *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btCollisionObjectDoubleData **)&jarg1; 
  result = (double) ((arg1)->m_deactivationTime);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btCollisionObjectDoubleData_1friction_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  Bullet::btCollisionObjectDoubleData *arg1 = (Bullet::btCollisionObjectDoubleData *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btCollisionObjectDoubleData **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->m_friction = arg2;
}


SWIGEXPORT jdouble JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btCollisionObjectDoubleData_1friction_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  Bullet::btCollisionObjectDoubleData *arg1 = (Bullet::btCollisionObjectDoubleData *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btCollisionObjectDoubleData **)&jarg1; 
  result = (double) ((arg1)->m_friction);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btCollisionObjectDoubleData_1rollingFriction_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  Bullet::btCollisionObjectDoubleData *arg1 = (Bullet::btCollisionObjectDoubleData *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btCollisionObjectDoubleData **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->m_rollingFriction = arg2;
}


SWIGEXPORT jdouble JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btCollisionObjectDoubleData_1rollingFriction_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  Bullet::btCollisionObjectDoubleData *arg1 = (Bullet::btCollisionObjectDoubleData *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btCollisionObjectDoubleData **)&jarg1; 
  result = (double) ((arg1)->m_rollingFriction);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btCollisionObjectDoubleData_1contactDamping_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  Bullet::btCollisionObjectDoubleData *arg1 = (Bullet::btCollisionObjectDoubleData *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btCollisionObjectDoubleData **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->m_contactDamping = arg2;
}


SWIGEXPORT jdouble JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btCollisionObjectDoubleData_1contactDamping_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  Bullet::btCollisionObjectDoubleData *arg1 = (Bullet::btCollisionObjectDoubleData *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btCollisionObjectDoubleData **)&jarg1; 
  result = (double) ((arg1)->m_contactDamping);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btCollisionObjectDoubleData_1contactStiffness_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  Bullet::btCollisionObjectDoubleData *arg1 = (Bullet::btCollisionObjectDoubleData *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btCollisionObjectDoubleData **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->m_contactStiffness = arg2;
}


SWIGEXPORT jdouble JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btCollisionObjectDoubleData_1contactStiffness_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  Bullet::btCollisionObjectDoubleData *arg1 = (Bullet::btCollisionObjectDoubleData *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btCollisionObjectDoubleData **)&jarg1; 
  result = (double) ((arg1)->m_contactStiffness);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btCollisionObjectDoubleData_1restitution_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  Bullet::btCollisionObjectDoubleData *arg1 = (Bullet::btCollisionObjectDoubleData *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btCollisionObjectDoubleData **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->m_restitution = arg2;
}


SWIGEXPORT jdouble JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btCollisionObjectDoubleData_1restitution_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  Bullet::btCollisionObjectDoubleData *arg1 = (Bullet::btCollisionObjectDoubleData *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btCollisionObjectDoubleData **)&jarg1; 
  result = (double) ((arg1)->m_restitution);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btCollisionObjectDoubleData_1hitFraction_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  Bullet::btCollisionObjectDoubleData *arg1 = (Bullet::btCollisionObjectDoubleData *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btCollisionObjectDoubleData **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->m_hitFraction = arg2;
}


SWIGEXPORT jdouble JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btCollisionObjectDoubleData_1hitFraction_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  Bullet::btCollisionObjectDoubleData *arg1 = (Bullet::btCollisionObjectDoubleData *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btCollisionObjectDoubleData **)&jarg1; 
  result = (double) ((arg1)->m_hitFraction);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btCollisionObjectDoubleData_1ccdSweptSphereRadius_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  Bullet::btCollisionObjectDoubleData *arg1 = (Bullet::btCollisionObjectDoubleData *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btCollisionObjectDoubleData **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->m_ccdSweptSphereRadius = arg2;
}


SWIGEXPORT jdouble JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btCollisionObjectDoubleData_1ccdSweptSphereRadius_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  Bullet::btCollisionObjectDoubleData *arg1 = (Bullet::btCollisionObjectDoubleData *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btCollisionObjectDoubleData **)&jarg1; 
  result = (double) ((arg1)->m_ccdSweptSphereRadius);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btCollisionObjectDoubleData_1ccdMotionThreshold_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  Bullet::btCollisionObjectDoubleData *arg1 = (Bullet::btCollisionObjectDoubleData *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btCollisionObjectDoubleData **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->m_ccdMotionThreshold = arg2;
}


SWIGEXPORT jdouble JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btCollisionObjectDoubleData_1ccdMotionThreshold_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  Bullet::btCollisionObjectDoubleData *arg1 = (Bullet::btCollisionObjectDoubleData *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btCollisionObjectDoubleData **)&jarg1; 
  result = (double) ((arg1)->m_ccdMotionThreshold);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btCollisionObjectDoubleData_1hasAnisotropicFriction_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Bullet::btCollisionObjectDoubleData *arg1 = (Bullet::btCollisionObjectDoubleData *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btCollisionObjectDoubleData **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_hasAnisotropicFriction = arg2;
}


SWIGEXPORT jint JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btCollisionObjectDoubleData_1hasAnisotropicFriction_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Bullet::btCollisionObjectDoubleData *arg1 = (Bullet::btCollisionObjectDoubleData *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btCollisionObjectDoubleData **)&jarg1; 
  result = (int) ((arg1)->m_hasAnisotropicFriction);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btCollisionObjectDoubleData_1collisionFlags_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Bullet::btCollisionObjectDoubleData *arg1 = (Bullet::btCollisionObjectDoubleData *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btCollisionObjectDoubleData **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_collisionFlags = arg2;
}


SWIGEXPORT jint JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btCollisionObjectDoubleData_1collisionFlags_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Bullet::btCollisionObjectDoubleData *arg1 = (Bullet::btCollisionObjectDoubleData *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btCollisionObjectDoubleData **)&jarg1; 
  result = (int) ((arg1)->m_collisionFlags);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btCollisionObjectDoubleData_1islandTag1_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Bullet::btCollisionObjectDoubleData *arg1 = (Bullet::btCollisionObjectDoubleData *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btCollisionObjectDoubleData **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_islandTag1 = arg2;
}


SWIGEXPORT jint JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btCollisionObjectDoubleData_1islandTag1_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Bullet::btCollisionObjectDoubleData *arg1 = (Bullet::btCollisionObjectDoubleData *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btCollisionObjectDoubleData **)&jarg1; 
  result = (int) ((arg1)->m_islandTag1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btCollisionObjectDoubleData_1companionId_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Bullet::btCollisionObjectDoubleData *arg1 = (Bullet::btCollisionObjectDoubleData *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btCollisionObjectDoubleData **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_companionId = arg2;
}


SWIGEXPORT jint JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btCollisionObjectDoubleData_1companionId_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Bullet::btCollisionObjectDoubleData *arg1 = (Bullet::btCollisionObjectDoubleData *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btCollisionObjectDoubleData **)&jarg1; 
  result = (int) ((arg1)->m_companionId);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btCollisionObjectDoubleData_1activationState1_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Bullet::btCollisionObjectDoubleData *arg1 = (Bullet::btCollisionObjectDoubleData *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btCollisionObjectDoubleData **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_activationState1 = arg2;
}


SWIGEXPORT jint JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btCollisionObjectDoubleData_1activationState1_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Bullet::btCollisionObjectDoubleData *arg1 = (Bullet::btCollisionObjectDoubleData *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btCollisionObjectDoubleData **)&jarg1; 
  result = (int) ((arg1)->m_activationState1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btCollisionObjectDoubleData_1internalType_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Bullet::btCollisionObjectDoubleData *arg1 = (Bullet::btCollisionObjectDoubleData *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btCollisionObjectDoubleData **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_internalType = arg2;
}


SWIGEXPORT jint JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btCollisionObjectDoubleData_1internalType_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Bullet::btCollisionObjectDoubleData *arg1 = (Bullet::btCollisionObjectDoubleData *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btCollisionObjectDoubleData **)&jarg1; 
  result = (int) ((arg1)->m_internalType);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btCollisionObjectDoubleData_1checkCollideWith_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Bullet::btCollisionObjectDoubleData *arg1 = (Bullet::btCollisionObjectDoubleData *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btCollisionObjectDoubleData **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_checkCollideWith = arg2;
}


SWIGEXPORT jint JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btCollisionObjectDoubleData_1checkCollideWith_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Bullet::btCollisionObjectDoubleData *arg1 = (Bullet::btCollisionObjectDoubleData *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btCollisionObjectDoubleData **)&jarg1; 
  result = (int) ((arg1)->m_checkCollideWith);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btCollisionObjectDoubleData_1padding_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  Bullet::btCollisionObjectDoubleData *arg1 = (Bullet::btCollisionObjectDoubleData *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btCollisionObjectDoubleData **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->m_padding, (const char *)arg2, 4-1);
      arg1->m_padding[4-1] = 0;
    } else {
      arg1->m_padding[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btCollisionObjectDoubleData_1padding_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  Bullet::btCollisionObjectDoubleData *arg1 = (Bullet::btCollisionObjectDoubleData *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btCollisionObjectDoubleData **)&jarg1; 
  result = (char *)(char *) ((arg1)->m_padding);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_new_1btCollisionObjectDoubleData(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Bullet::btCollisionObjectDoubleData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Bullet::btCollisionObjectDoubleData *)new Bullet::btCollisionObjectDoubleData();
  *(Bullet::btCollisionObjectDoubleData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_delete_1btCollisionObjectDoubleData(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Bullet::btCollisionObjectDoubleData *arg1 = (Bullet::btCollisionObjectDoubleData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Bullet::btCollisionObjectDoubleData **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btCollisionObjectFloatData_1broadphaseHandle_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  Bullet::btCollisionObjectFloatData *arg1 = (Bullet::btCollisionObjectFloatData *) 0 ;
  void *arg2 = (void *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btCollisionObjectFloatData **)&jarg1; 
  arg2 = (void *)jarg2; 
  if (arg1) (arg1)->m_broadphaseHandle = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btCollisionObjectFloatData_1broadphaseHandle_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Bullet::btCollisionObjectFloatData *arg1 = (Bullet::btCollisionObjectFloatData *) 0 ;
  void *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btCollisionObjectFloatData **)&jarg1; 
  result = (void *) ((arg1)->m_broadphaseHandle);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btCollisionObjectFloatData_1collisionShape_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  Bullet::btCollisionObjectFloatData *arg1 = (Bullet::btCollisionObjectFloatData *) 0 ;
  void *arg2 = (void *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btCollisionObjectFloatData **)&jarg1; 
  arg2 = (void *)jarg2; 
  if (arg1) (arg1)->m_collisionShape = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btCollisionObjectFloatData_1collisionShape_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Bullet::btCollisionObjectFloatData *arg1 = (Bullet::btCollisionObjectFloatData *) 0 ;
  void *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btCollisionObjectFloatData **)&jarg1; 
  result = (void *) ((arg1)->m_collisionShape);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btCollisionObjectFloatData_1rootCollisionShape_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Bullet::btCollisionObjectFloatData *arg1 = (Bullet::btCollisionObjectFloatData *) 0 ;
  Bullet::btCollisionShapeData *arg2 = (Bullet::btCollisionShapeData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Bullet::btCollisionObjectFloatData **)&jarg1; 
  arg2 = *(Bullet::btCollisionShapeData **)&jarg2; 
  if (arg1) (arg1)->m_rootCollisionShape = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btCollisionObjectFloatData_1rootCollisionShape_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Bullet::btCollisionObjectFloatData *arg1 = (Bullet::btCollisionObjectFloatData *) 0 ;
  Bullet::btCollisionShapeData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btCollisionObjectFloatData **)&jarg1; 
  result = (Bullet::btCollisionShapeData *) ((arg1)->m_rootCollisionShape);
  *(Bullet::btCollisionShapeData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btCollisionObjectFloatData_1name_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  Bullet::btCollisionObjectFloatData *arg1 = (Bullet::btCollisionObjectFloatData *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btCollisionObjectFloatData **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    delete [] arg1->m_name;
    if (arg2) {
      arg1->m_name = (char *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->m_name, (const char *)arg2);
    } else {
      arg1->m_name = 0;
    }
  }
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btCollisionObjectFloatData_1name_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  Bullet::btCollisionObjectFloatData *arg1 = (Bullet::btCollisionObjectFloatData *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btCollisionObjectFloatData **)&jarg1; 
  result = (char *) ((arg1)->m_name);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btCollisionObjectFloatData_1worldTransform_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Bullet::btCollisionObjectFloatData *arg1 = (Bullet::btCollisionObjectFloatData *) 0 ;
  Bullet::btTransformFloatData *arg2 = (Bullet::btTransformFloatData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Bullet::btCollisionObjectFloatData **)&jarg1; 
  arg2 = *(Bullet::btTransformFloatData **)&jarg2; 
  if (arg1) (arg1)->m_worldTransform = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btCollisionObjectFloatData_1worldTransform_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Bullet::btCollisionObjectFloatData *arg1 = (Bullet::btCollisionObjectFloatData *) 0 ;
  Bullet::btTransformFloatData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btCollisionObjectFloatData **)&jarg1; 
  result = (Bullet::btTransformFloatData *)& ((arg1)->m_worldTransform);
  *(Bullet::btTransformFloatData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btCollisionObjectFloatData_1interpolationWorldTransform_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Bullet::btCollisionObjectFloatData *arg1 = (Bullet::btCollisionObjectFloatData *) 0 ;
  Bullet::btTransformFloatData *arg2 = (Bullet::btTransformFloatData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Bullet::btCollisionObjectFloatData **)&jarg1; 
  arg2 = *(Bullet::btTransformFloatData **)&jarg2; 
  if (arg1) (arg1)->m_interpolationWorldTransform = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btCollisionObjectFloatData_1interpolationWorldTransform_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Bullet::btCollisionObjectFloatData *arg1 = (Bullet::btCollisionObjectFloatData *) 0 ;
  Bullet::btTransformFloatData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btCollisionObjectFloatData **)&jarg1; 
  result = (Bullet::btTransformFloatData *)& ((arg1)->m_interpolationWorldTransform);
  *(Bullet::btTransformFloatData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btCollisionObjectFloatData_1interpolationLinearVelocity_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Bullet::btCollisionObjectFloatData *arg1 = (Bullet::btCollisionObjectFloatData *) 0 ;
  Bullet::btVector3FloatData *arg2 = (Bullet::btVector3FloatData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Bullet::btCollisionObjectFloatData **)&jarg1; 
  arg2 = *(Bullet::btVector3FloatData **)&jarg2; 
  if (arg1) (arg1)->m_interpolationLinearVelocity = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btCollisionObjectFloatData_1interpolationLinearVelocity_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Bullet::btCollisionObjectFloatData *arg1 = (Bullet::btCollisionObjectFloatData *) 0 ;
  Bullet::btVector3FloatData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btCollisionObjectFloatData **)&jarg1; 
  result = (Bullet::btVector3FloatData *)& ((arg1)->m_interpolationLinearVelocity);
  *(Bullet::btVector3FloatData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btCollisionObjectFloatData_1interpolationAngularVelocity_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Bullet::btCollisionObjectFloatData *arg1 = (Bullet::btCollisionObjectFloatData *) 0 ;
  Bullet::btVector3FloatData *arg2 = (Bullet::btVector3FloatData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Bullet::btCollisionObjectFloatData **)&jarg1; 
  arg2 = *(Bullet::btVector3FloatData **)&jarg2; 
  if (arg1) (arg1)->m_interpolationAngularVelocity = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btCollisionObjectFloatData_1interpolationAngularVelocity_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Bullet::btCollisionObjectFloatData *arg1 = (Bullet::btCollisionObjectFloatData *) 0 ;
  Bullet::btVector3FloatData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btCollisionObjectFloatData **)&jarg1; 
  result = (Bullet::btVector3FloatData *)& ((arg1)->m_interpolationAngularVelocity);
  *(Bullet::btVector3FloatData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btCollisionObjectFloatData_1anisotropicFriction_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Bullet::btCollisionObjectFloatData *arg1 = (Bullet::btCollisionObjectFloatData *) 0 ;
  Bullet::btVector3FloatData *arg2 = (Bullet::btVector3FloatData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Bullet::btCollisionObjectFloatData **)&jarg1; 
  arg2 = *(Bullet::btVector3FloatData **)&jarg2; 
  if (arg1) (arg1)->m_anisotropicFriction = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btCollisionObjectFloatData_1anisotropicFriction_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Bullet::btCollisionObjectFloatData *arg1 = (Bullet::btCollisionObjectFloatData *) 0 ;
  Bullet::btVector3FloatData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btCollisionObjectFloatData **)&jarg1; 
  result = (Bullet::btVector3FloatData *)& ((arg1)->m_anisotropicFriction);
  *(Bullet::btVector3FloatData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btCollisionObjectFloatData_1contactProcessingThreshold_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  Bullet::btCollisionObjectFloatData *arg1 = (Bullet::btCollisionObjectFloatData *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btCollisionObjectFloatData **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->m_contactProcessingThreshold = arg2;
}


SWIGEXPORT jfloat JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btCollisionObjectFloatData_1contactProcessingThreshold_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  Bullet::btCollisionObjectFloatData *arg1 = (Bullet::btCollisionObjectFloatData *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btCollisionObjectFloatData **)&jarg1; 
  result = (float) ((arg1)->m_contactProcessingThreshold);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btCollisionObjectFloatData_1deactivationTime_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  Bullet::btCollisionObjectFloatData *arg1 = (Bullet::btCollisionObjectFloatData *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btCollisionObjectFloatData **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->m_deactivationTime = arg2;
}


SWIGEXPORT jfloat JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btCollisionObjectFloatData_1deactivationTime_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  Bullet::btCollisionObjectFloatData *arg1 = (Bullet::btCollisionObjectFloatData *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btCollisionObjectFloatData **)&jarg1; 
  result = (float) ((arg1)->m_deactivationTime);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btCollisionObjectFloatData_1friction_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  Bullet::btCollisionObjectFloatData *arg1 = (Bullet::btCollisionObjectFloatData *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btCollisionObjectFloatData **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->m_friction = arg2;
}


SWIGEXPORT jfloat JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btCollisionObjectFloatData_1friction_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  Bullet::btCollisionObjectFloatData *arg1 = (Bullet::btCollisionObjectFloatData *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btCollisionObjectFloatData **)&jarg1; 
  result = (float) ((arg1)->m_friction);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btCollisionObjectFloatData_1rollingFriction_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  Bullet::btCollisionObjectFloatData *arg1 = (Bullet::btCollisionObjectFloatData *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btCollisionObjectFloatData **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->m_rollingFriction = arg2;
}


SWIGEXPORT jfloat JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btCollisionObjectFloatData_1rollingFriction_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  Bullet::btCollisionObjectFloatData *arg1 = (Bullet::btCollisionObjectFloatData *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btCollisionObjectFloatData **)&jarg1; 
  result = (float) ((arg1)->m_rollingFriction);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btCollisionObjectFloatData_1contactDamping_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  Bullet::btCollisionObjectFloatData *arg1 = (Bullet::btCollisionObjectFloatData *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btCollisionObjectFloatData **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->m_contactDamping = arg2;
}


SWIGEXPORT jfloat JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btCollisionObjectFloatData_1contactDamping_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  Bullet::btCollisionObjectFloatData *arg1 = (Bullet::btCollisionObjectFloatData *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btCollisionObjectFloatData **)&jarg1; 
  result = (float) ((arg1)->m_contactDamping);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btCollisionObjectFloatData_1contactStiffness_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  Bullet::btCollisionObjectFloatData *arg1 = (Bullet::btCollisionObjectFloatData *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btCollisionObjectFloatData **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->m_contactStiffness = arg2;
}


SWIGEXPORT jfloat JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btCollisionObjectFloatData_1contactStiffness_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  Bullet::btCollisionObjectFloatData *arg1 = (Bullet::btCollisionObjectFloatData *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btCollisionObjectFloatData **)&jarg1; 
  result = (float) ((arg1)->m_contactStiffness);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btCollisionObjectFloatData_1restitution_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  Bullet::btCollisionObjectFloatData *arg1 = (Bullet::btCollisionObjectFloatData *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btCollisionObjectFloatData **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->m_restitution = arg2;
}


SWIGEXPORT jfloat JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btCollisionObjectFloatData_1restitution_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  Bullet::btCollisionObjectFloatData *arg1 = (Bullet::btCollisionObjectFloatData *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btCollisionObjectFloatData **)&jarg1; 
  result = (float) ((arg1)->m_restitution);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btCollisionObjectFloatData_1hitFraction_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  Bullet::btCollisionObjectFloatData *arg1 = (Bullet::btCollisionObjectFloatData *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btCollisionObjectFloatData **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->m_hitFraction = arg2;
}


SWIGEXPORT jfloat JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btCollisionObjectFloatData_1hitFraction_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  Bullet::btCollisionObjectFloatData *arg1 = (Bullet::btCollisionObjectFloatData *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btCollisionObjectFloatData **)&jarg1; 
  result = (float) ((arg1)->m_hitFraction);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btCollisionObjectFloatData_1ccdSweptSphereRadius_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  Bullet::btCollisionObjectFloatData *arg1 = (Bullet::btCollisionObjectFloatData *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btCollisionObjectFloatData **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->m_ccdSweptSphereRadius = arg2;
}


SWIGEXPORT jfloat JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btCollisionObjectFloatData_1ccdSweptSphereRadius_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  Bullet::btCollisionObjectFloatData *arg1 = (Bullet::btCollisionObjectFloatData *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btCollisionObjectFloatData **)&jarg1; 
  result = (float) ((arg1)->m_ccdSweptSphereRadius);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btCollisionObjectFloatData_1ccdMotionThreshold_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  Bullet::btCollisionObjectFloatData *arg1 = (Bullet::btCollisionObjectFloatData *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btCollisionObjectFloatData **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->m_ccdMotionThreshold = arg2;
}


SWIGEXPORT jfloat JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btCollisionObjectFloatData_1ccdMotionThreshold_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  Bullet::btCollisionObjectFloatData *arg1 = (Bullet::btCollisionObjectFloatData *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btCollisionObjectFloatData **)&jarg1; 
  result = (float) ((arg1)->m_ccdMotionThreshold);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btCollisionObjectFloatData_1hasAnisotropicFriction_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Bullet::btCollisionObjectFloatData *arg1 = (Bullet::btCollisionObjectFloatData *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btCollisionObjectFloatData **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_hasAnisotropicFriction = arg2;
}


SWIGEXPORT jint JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btCollisionObjectFloatData_1hasAnisotropicFriction_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Bullet::btCollisionObjectFloatData *arg1 = (Bullet::btCollisionObjectFloatData *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btCollisionObjectFloatData **)&jarg1; 
  result = (int) ((arg1)->m_hasAnisotropicFriction);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btCollisionObjectFloatData_1collisionFlags_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Bullet::btCollisionObjectFloatData *arg1 = (Bullet::btCollisionObjectFloatData *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btCollisionObjectFloatData **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_collisionFlags = arg2;
}


SWIGEXPORT jint JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btCollisionObjectFloatData_1collisionFlags_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Bullet::btCollisionObjectFloatData *arg1 = (Bullet::btCollisionObjectFloatData *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btCollisionObjectFloatData **)&jarg1; 
  result = (int) ((arg1)->m_collisionFlags);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btCollisionObjectFloatData_1islandTag1_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Bullet::btCollisionObjectFloatData *arg1 = (Bullet::btCollisionObjectFloatData *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btCollisionObjectFloatData **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_islandTag1 = arg2;
}


SWIGEXPORT jint JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btCollisionObjectFloatData_1islandTag1_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Bullet::btCollisionObjectFloatData *arg1 = (Bullet::btCollisionObjectFloatData *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btCollisionObjectFloatData **)&jarg1; 
  result = (int) ((arg1)->m_islandTag1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btCollisionObjectFloatData_1companionId_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Bullet::btCollisionObjectFloatData *arg1 = (Bullet::btCollisionObjectFloatData *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btCollisionObjectFloatData **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_companionId = arg2;
}


SWIGEXPORT jint JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btCollisionObjectFloatData_1companionId_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Bullet::btCollisionObjectFloatData *arg1 = (Bullet::btCollisionObjectFloatData *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btCollisionObjectFloatData **)&jarg1; 
  result = (int) ((arg1)->m_companionId);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btCollisionObjectFloatData_1activationState1_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Bullet::btCollisionObjectFloatData *arg1 = (Bullet::btCollisionObjectFloatData *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btCollisionObjectFloatData **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_activationState1 = arg2;
}


SWIGEXPORT jint JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btCollisionObjectFloatData_1activationState1_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Bullet::btCollisionObjectFloatData *arg1 = (Bullet::btCollisionObjectFloatData *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btCollisionObjectFloatData **)&jarg1; 
  result = (int) ((arg1)->m_activationState1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btCollisionObjectFloatData_1internalType_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Bullet::btCollisionObjectFloatData *arg1 = (Bullet::btCollisionObjectFloatData *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btCollisionObjectFloatData **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_internalType = arg2;
}


SWIGEXPORT jint JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btCollisionObjectFloatData_1internalType_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Bullet::btCollisionObjectFloatData *arg1 = (Bullet::btCollisionObjectFloatData *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btCollisionObjectFloatData **)&jarg1; 
  result = (int) ((arg1)->m_internalType);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btCollisionObjectFloatData_1checkCollideWith_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Bullet::btCollisionObjectFloatData *arg1 = (Bullet::btCollisionObjectFloatData *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btCollisionObjectFloatData **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_checkCollideWith = arg2;
}


SWIGEXPORT jint JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btCollisionObjectFloatData_1checkCollideWith_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Bullet::btCollisionObjectFloatData *arg1 = (Bullet::btCollisionObjectFloatData *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btCollisionObjectFloatData **)&jarg1; 
  result = (int) ((arg1)->m_checkCollideWith);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btCollisionObjectFloatData_1padding_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  Bullet::btCollisionObjectFloatData *arg1 = (Bullet::btCollisionObjectFloatData *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btCollisionObjectFloatData **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->m_padding, (const char *)arg2, 4-1);
      arg1->m_padding[4-1] = 0;
    } else {
      arg1->m_padding[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btCollisionObjectFloatData_1padding_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  Bullet::btCollisionObjectFloatData *arg1 = (Bullet::btCollisionObjectFloatData *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btCollisionObjectFloatData **)&jarg1; 
  result = (char *)(char *) ((arg1)->m_padding);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_new_1btCollisionObjectFloatData(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Bullet::btCollisionObjectFloatData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Bullet::btCollisionObjectFloatData *)new Bullet::btCollisionObjectFloatData();
  *(Bullet::btCollisionObjectFloatData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_delete_1btCollisionObjectFloatData(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Bullet::btCollisionObjectFloatData *arg1 = (Bullet::btCollisionObjectFloatData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Bullet::btCollisionObjectFloatData **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btContactSolverInfoDoubleData_1tau_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  Bullet::btContactSolverInfoDoubleData *arg1 = (Bullet::btContactSolverInfoDoubleData *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btContactSolverInfoDoubleData **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->m_tau = arg2;
}


SWIGEXPORT jdouble JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btContactSolverInfoDoubleData_1tau_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  Bullet::btContactSolverInfoDoubleData *arg1 = (Bullet::btContactSolverInfoDoubleData *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btContactSolverInfoDoubleData **)&jarg1; 
  result = (double) ((arg1)->m_tau);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btContactSolverInfoDoubleData_1damping_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  Bullet::btContactSolverInfoDoubleData *arg1 = (Bullet::btContactSolverInfoDoubleData *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btContactSolverInfoDoubleData **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->m_damping = arg2;
}


SWIGEXPORT jdouble JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btContactSolverInfoDoubleData_1damping_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  Bullet::btContactSolverInfoDoubleData *arg1 = (Bullet::btContactSolverInfoDoubleData *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btContactSolverInfoDoubleData **)&jarg1; 
  result = (double) ((arg1)->m_damping);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btContactSolverInfoDoubleData_1friction_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  Bullet::btContactSolverInfoDoubleData *arg1 = (Bullet::btContactSolverInfoDoubleData *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btContactSolverInfoDoubleData **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->m_friction = arg2;
}


SWIGEXPORT jdouble JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btContactSolverInfoDoubleData_1friction_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  Bullet::btContactSolverInfoDoubleData *arg1 = (Bullet::btContactSolverInfoDoubleData *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btContactSolverInfoDoubleData **)&jarg1; 
  result = (double) ((arg1)->m_friction);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btContactSolverInfoDoubleData_1timeStep_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  Bullet::btContactSolverInfoDoubleData *arg1 = (Bullet::btContactSolverInfoDoubleData *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btContactSolverInfoDoubleData **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->m_timeStep = arg2;
}


SWIGEXPORT jdouble JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btContactSolverInfoDoubleData_1timeStep_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  Bullet::btContactSolverInfoDoubleData *arg1 = (Bullet::btContactSolverInfoDoubleData *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btContactSolverInfoDoubleData **)&jarg1; 
  result = (double) ((arg1)->m_timeStep);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btContactSolverInfoDoubleData_1restitution_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  Bullet::btContactSolverInfoDoubleData *arg1 = (Bullet::btContactSolverInfoDoubleData *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btContactSolverInfoDoubleData **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->m_restitution = arg2;
}


SWIGEXPORT jdouble JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btContactSolverInfoDoubleData_1restitution_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  Bullet::btContactSolverInfoDoubleData *arg1 = (Bullet::btContactSolverInfoDoubleData *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btContactSolverInfoDoubleData **)&jarg1; 
  result = (double) ((arg1)->m_restitution);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btContactSolverInfoDoubleData_1maxErrorReduction_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  Bullet::btContactSolverInfoDoubleData *arg1 = (Bullet::btContactSolverInfoDoubleData *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btContactSolverInfoDoubleData **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->m_maxErrorReduction = arg2;
}


SWIGEXPORT jdouble JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btContactSolverInfoDoubleData_1maxErrorReduction_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  Bullet::btContactSolverInfoDoubleData *arg1 = (Bullet::btContactSolverInfoDoubleData *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btContactSolverInfoDoubleData **)&jarg1; 
  result = (double) ((arg1)->m_maxErrorReduction);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btContactSolverInfoDoubleData_1sor_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  Bullet::btContactSolverInfoDoubleData *arg1 = (Bullet::btContactSolverInfoDoubleData *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btContactSolverInfoDoubleData **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->m_sor = arg2;
}


SWIGEXPORT jdouble JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btContactSolverInfoDoubleData_1sor_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  Bullet::btContactSolverInfoDoubleData *arg1 = (Bullet::btContactSolverInfoDoubleData *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btContactSolverInfoDoubleData **)&jarg1; 
  result = (double) ((arg1)->m_sor);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btContactSolverInfoDoubleData_1erp_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  Bullet::btContactSolverInfoDoubleData *arg1 = (Bullet::btContactSolverInfoDoubleData *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btContactSolverInfoDoubleData **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->m_erp = arg2;
}


SWIGEXPORT jdouble JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btContactSolverInfoDoubleData_1erp_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  Bullet::btContactSolverInfoDoubleData *arg1 = (Bullet::btContactSolverInfoDoubleData *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btContactSolverInfoDoubleData **)&jarg1; 
  result = (double) ((arg1)->m_erp);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btContactSolverInfoDoubleData_1erp2_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  Bullet::btContactSolverInfoDoubleData *arg1 = (Bullet::btContactSolverInfoDoubleData *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btContactSolverInfoDoubleData **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->m_erp2 = arg2;
}


SWIGEXPORT jdouble JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btContactSolverInfoDoubleData_1erp2_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  Bullet::btContactSolverInfoDoubleData *arg1 = (Bullet::btContactSolverInfoDoubleData *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btContactSolverInfoDoubleData **)&jarg1; 
  result = (double) ((arg1)->m_erp2);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btContactSolverInfoDoubleData_1globalCfm_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  Bullet::btContactSolverInfoDoubleData *arg1 = (Bullet::btContactSolverInfoDoubleData *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btContactSolverInfoDoubleData **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->m_globalCfm = arg2;
}


SWIGEXPORT jdouble JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btContactSolverInfoDoubleData_1globalCfm_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  Bullet::btContactSolverInfoDoubleData *arg1 = (Bullet::btContactSolverInfoDoubleData *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btContactSolverInfoDoubleData **)&jarg1; 
  result = (double) ((arg1)->m_globalCfm);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btContactSolverInfoDoubleData_1splitImpulsePenetrationThreshold_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  Bullet::btContactSolverInfoDoubleData *arg1 = (Bullet::btContactSolverInfoDoubleData *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btContactSolverInfoDoubleData **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->m_splitImpulsePenetrationThreshold = arg2;
}


SWIGEXPORT jdouble JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btContactSolverInfoDoubleData_1splitImpulsePenetrationThreshold_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  Bullet::btContactSolverInfoDoubleData *arg1 = (Bullet::btContactSolverInfoDoubleData *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btContactSolverInfoDoubleData **)&jarg1; 
  result = (double) ((arg1)->m_splitImpulsePenetrationThreshold);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btContactSolverInfoDoubleData_1splitImpulseTurnErp_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  Bullet::btContactSolverInfoDoubleData *arg1 = (Bullet::btContactSolverInfoDoubleData *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btContactSolverInfoDoubleData **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->m_splitImpulseTurnErp = arg2;
}


SWIGEXPORT jdouble JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btContactSolverInfoDoubleData_1splitImpulseTurnErp_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  Bullet::btContactSolverInfoDoubleData *arg1 = (Bullet::btContactSolverInfoDoubleData *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btContactSolverInfoDoubleData **)&jarg1; 
  result = (double) ((arg1)->m_splitImpulseTurnErp);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btContactSolverInfoDoubleData_1linearSlop_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  Bullet::btContactSolverInfoDoubleData *arg1 = (Bullet::btContactSolverInfoDoubleData *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btContactSolverInfoDoubleData **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->m_linearSlop = arg2;
}


SWIGEXPORT jdouble JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btContactSolverInfoDoubleData_1linearSlop_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  Bullet::btContactSolverInfoDoubleData *arg1 = (Bullet::btContactSolverInfoDoubleData *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btContactSolverInfoDoubleData **)&jarg1; 
  result = (double) ((arg1)->m_linearSlop);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btContactSolverInfoDoubleData_1warmstartingFactor_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  Bullet::btContactSolverInfoDoubleData *arg1 = (Bullet::btContactSolverInfoDoubleData *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btContactSolverInfoDoubleData **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->m_warmstartingFactor = arg2;
}


SWIGEXPORT jdouble JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btContactSolverInfoDoubleData_1warmstartingFactor_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  Bullet::btContactSolverInfoDoubleData *arg1 = (Bullet::btContactSolverInfoDoubleData *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btContactSolverInfoDoubleData **)&jarg1; 
  result = (double) ((arg1)->m_warmstartingFactor);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btContactSolverInfoDoubleData_1maxGyroscopicForce_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  Bullet::btContactSolverInfoDoubleData *arg1 = (Bullet::btContactSolverInfoDoubleData *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btContactSolverInfoDoubleData **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->m_maxGyroscopicForce = arg2;
}


SWIGEXPORT jdouble JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btContactSolverInfoDoubleData_1maxGyroscopicForce_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  Bullet::btContactSolverInfoDoubleData *arg1 = (Bullet::btContactSolverInfoDoubleData *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btContactSolverInfoDoubleData **)&jarg1; 
  result = (double) ((arg1)->m_maxGyroscopicForce);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btContactSolverInfoDoubleData_1singleAxisRollingFrictionThreshold_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  Bullet::btContactSolverInfoDoubleData *arg1 = (Bullet::btContactSolverInfoDoubleData *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btContactSolverInfoDoubleData **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->m_singleAxisRollingFrictionThreshold = arg2;
}


SWIGEXPORT jdouble JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btContactSolverInfoDoubleData_1singleAxisRollingFrictionThreshold_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  Bullet::btContactSolverInfoDoubleData *arg1 = (Bullet::btContactSolverInfoDoubleData *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btContactSolverInfoDoubleData **)&jarg1; 
  result = (double) ((arg1)->m_singleAxisRollingFrictionThreshold);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btContactSolverInfoDoubleData_1numIterations_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Bullet::btContactSolverInfoDoubleData *arg1 = (Bullet::btContactSolverInfoDoubleData *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btContactSolverInfoDoubleData **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_numIterations = arg2;
}


SWIGEXPORT jint JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btContactSolverInfoDoubleData_1numIterations_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Bullet::btContactSolverInfoDoubleData *arg1 = (Bullet::btContactSolverInfoDoubleData *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btContactSolverInfoDoubleData **)&jarg1; 
  result = (int) ((arg1)->m_numIterations);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btContactSolverInfoDoubleData_1solverMode_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Bullet::btContactSolverInfoDoubleData *arg1 = (Bullet::btContactSolverInfoDoubleData *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btContactSolverInfoDoubleData **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_solverMode = arg2;
}


SWIGEXPORT jint JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btContactSolverInfoDoubleData_1solverMode_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Bullet::btContactSolverInfoDoubleData *arg1 = (Bullet::btContactSolverInfoDoubleData *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btContactSolverInfoDoubleData **)&jarg1; 
  result = (int) ((arg1)->m_solverMode);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btContactSolverInfoDoubleData_1restingContactRestitutionThreshold_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Bullet::btContactSolverInfoDoubleData *arg1 = (Bullet::btContactSolverInfoDoubleData *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btContactSolverInfoDoubleData **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_restingContactRestitutionThreshold = arg2;
}


SWIGEXPORT jint JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btContactSolverInfoDoubleData_1restingContactRestitutionThreshold_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Bullet::btContactSolverInfoDoubleData *arg1 = (Bullet::btContactSolverInfoDoubleData *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btContactSolverInfoDoubleData **)&jarg1; 
  result = (int) ((arg1)->m_restingContactRestitutionThreshold);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btContactSolverInfoDoubleData_1minimumSolverBatchSize_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Bullet::btContactSolverInfoDoubleData *arg1 = (Bullet::btContactSolverInfoDoubleData *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btContactSolverInfoDoubleData **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_minimumSolverBatchSize = arg2;
}


SWIGEXPORT jint JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btContactSolverInfoDoubleData_1minimumSolverBatchSize_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Bullet::btContactSolverInfoDoubleData *arg1 = (Bullet::btContactSolverInfoDoubleData *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btContactSolverInfoDoubleData **)&jarg1; 
  result = (int) ((arg1)->m_minimumSolverBatchSize);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btContactSolverInfoDoubleData_1splitImpulse_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Bullet::btContactSolverInfoDoubleData *arg1 = (Bullet::btContactSolverInfoDoubleData *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btContactSolverInfoDoubleData **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_splitImpulse = arg2;
}


SWIGEXPORT jint JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btContactSolverInfoDoubleData_1splitImpulse_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Bullet::btContactSolverInfoDoubleData *arg1 = (Bullet::btContactSolverInfoDoubleData *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btContactSolverInfoDoubleData **)&jarg1; 
  result = (int) ((arg1)->m_splitImpulse);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btContactSolverInfoDoubleData_1padding_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  Bullet::btContactSolverInfoDoubleData *arg1 = (Bullet::btContactSolverInfoDoubleData *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btContactSolverInfoDoubleData **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->m_padding, (const char *)arg2, 4-1);
      arg1->m_padding[4-1] = 0;
    } else {
      arg1->m_padding[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btContactSolverInfoDoubleData_1padding_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  Bullet::btContactSolverInfoDoubleData *arg1 = (Bullet::btContactSolverInfoDoubleData *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btContactSolverInfoDoubleData **)&jarg1; 
  result = (char *)(char *) ((arg1)->m_padding);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_new_1btContactSolverInfoDoubleData(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Bullet::btContactSolverInfoDoubleData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Bullet::btContactSolverInfoDoubleData *)new Bullet::btContactSolverInfoDoubleData();
  *(Bullet::btContactSolverInfoDoubleData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_delete_1btContactSolverInfoDoubleData(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Bullet::btContactSolverInfoDoubleData *arg1 = (Bullet::btContactSolverInfoDoubleData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Bullet::btContactSolverInfoDoubleData **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btContactSolverInfoFloatData_1tau_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  Bullet::btContactSolverInfoFloatData *arg1 = (Bullet::btContactSolverInfoFloatData *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btContactSolverInfoFloatData **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->m_tau = arg2;
}


SWIGEXPORT jfloat JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btContactSolverInfoFloatData_1tau_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  Bullet::btContactSolverInfoFloatData *arg1 = (Bullet::btContactSolverInfoFloatData *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btContactSolverInfoFloatData **)&jarg1; 
  result = (float) ((arg1)->m_tau);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btContactSolverInfoFloatData_1damping_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  Bullet::btContactSolverInfoFloatData *arg1 = (Bullet::btContactSolverInfoFloatData *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btContactSolverInfoFloatData **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->m_damping = arg2;
}


SWIGEXPORT jfloat JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btContactSolverInfoFloatData_1damping_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  Bullet::btContactSolverInfoFloatData *arg1 = (Bullet::btContactSolverInfoFloatData *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btContactSolverInfoFloatData **)&jarg1; 
  result = (float) ((arg1)->m_damping);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btContactSolverInfoFloatData_1friction_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  Bullet::btContactSolverInfoFloatData *arg1 = (Bullet::btContactSolverInfoFloatData *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btContactSolverInfoFloatData **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->m_friction = arg2;
}


SWIGEXPORT jfloat JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btContactSolverInfoFloatData_1friction_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  Bullet::btContactSolverInfoFloatData *arg1 = (Bullet::btContactSolverInfoFloatData *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btContactSolverInfoFloatData **)&jarg1; 
  result = (float) ((arg1)->m_friction);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btContactSolverInfoFloatData_1timeStep_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  Bullet::btContactSolverInfoFloatData *arg1 = (Bullet::btContactSolverInfoFloatData *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btContactSolverInfoFloatData **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->m_timeStep = arg2;
}


SWIGEXPORT jfloat JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btContactSolverInfoFloatData_1timeStep_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  Bullet::btContactSolverInfoFloatData *arg1 = (Bullet::btContactSolverInfoFloatData *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btContactSolverInfoFloatData **)&jarg1; 
  result = (float) ((arg1)->m_timeStep);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btContactSolverInfoFloatData_1restitution_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  Bullet::btContactSolverInfoFloatData *arg1 = (Bullet::btContactSolverInfoFloatData *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btContactSolverInfoFloatData **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->m_restitution = arg2;
}


SWIGEXPORT jfloat JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btContactSolverInfoFloatData_1restitution_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  Bullet::btContactSolverInfoFloatData *arg1 = (Bullet::btContactSolverInfoFloatData *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btContactSolverInfoFloatData **)&jarg1; 
  result = (float) ((arg1)->m_restitution);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btContactSolverInfoFloatData_1maxErrorReduction_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  Bullet::btContactSolverInfoFloatData *arg1 = (Bullet::btContactSolverInfoFloatData *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btContactSolverInfoFloatData **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->m_maxErrorReduction = arg2;
}


SWIGEXPORT jfloat JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btContactSolverInfoFloatData_1maxErrorReduction_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  Bullet::btContactSolverInfoFloatData *arg1 = (Bullet::btContactSolverInfoFloatData *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btContactSolverInfoFloatData **)&jarg1; 
  result = (float) ((arg1)->m_maxErrorReduction);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btContactSolverInfoFloatData_1sor_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  Bullet::btContactSolverInfoFloatData *arg1 = (Bullet::btContactSolverInfoFloatData *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btContactSolverInfoFloatData **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->m_sor = arg2;
}


SWIGEXPORT jfloat JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btContactSolverInfoFloatData_1sor_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  Bullet::btContactSolverInfoFloatData *arg1 = (Bullet::btContactSolverInfoFloatData *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btContactSolverInfoFloatData **)&jarg1; 
  result = (float) ((arg1)->m_sor);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btContactSolverInfoFloatData_1erp_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  Bullet::btContactSolverInfoFloatData *arg1 = (Bullet::btContactSolverInfoFloatData *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btContactSolverInfoFloatData **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->m_erp = arg2;
}


SWIGEXPORT jfloat JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btContactSolverInfoFloatData_1erp_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  Bullet::btContactSolverInfoFloatData *arg1 = (Bullet::btContactSolverInfoFloatData *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btContactSolverInfoFloatData **)&jarg1; 
  result = (float) ((arg1)->m_erp);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btContactSolverInfoFloatData_1erp2_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  Bullet::btContactSolverInfoFloatData *arg1 = (Bullet::btContactSolverInfoFloatData *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btContactSolverInfoFloatData **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->m_erp2 = arg2;
}


SWIGEXPORT jfloat JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btContactSolverInfoFloatData_1erp2_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  Bullet::btContactSolverInfoFloatData *arg1 = (Bullet::btContactSolverInfoFloatData *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btContactSolverInfoFloatData **)&jarg1; 
  result = (float) ((arg1)->m_erp2);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btContactSolverInfoFloatData_1globalCfm_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  Bullet::btContactSolverInfoFloatData *arg1 = (Bullet::btContactSolverInfoFloatData *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btContactSolverInfoFloatData **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->m_globalCfm = arg2;
}


SWIGEXPORT jfloat JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btContactSolverInfoFloatData_1globalCfm_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  Bullet::btContactSolverInfoFloatData *arg1 = (Bullet::btContactSolverInfoFloatData *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btContactSolverInfoFloatData **)&jarg1; 
  result = (float) ((arg1)->m_globalCfm);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btContactSolverInfoFloatData_1splitImpulsePenetrationThreshold_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  Bullet::btContactSolverInfoFloatData *arg1 = (Bullet::btContactSolverInfoFloatData *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btContactSolverInfoFloatData **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->m_splitImpulsePenetrationThreshold = arg2;
}


SWIGEXPORT jfloat JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btContactSolverInfoFloatData_1splitImpulsePenetrationThreshold_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  Bullet::btContactSolverInfoFloatData *arg1 = (Bullet::btContactSolverInfoFloatData *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btContactSolverInfoFloatData **)&jarg1; 
  result = (float) ((arg1)->m_splitImpulsePenetrationThreshold);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btContactSolverInfoFloatData_1splitImpulseTurnErp_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  Bullet::btContactSolverInfoFloatData *arg1 = (Bullet::btContactSolverInfoFloatData *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btContactSolverInfoFloatData **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->m_splitImpulseTurnErp = arg2;
}


SWIGEXPORT jfloat JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btContactSolverInfoFloatData_1splitImpulseTurnErp_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  Bullet::btContactSolverInfoFloatData *arg1 = (Bullet::btContactSolverInfoFloatData *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btContactSolverInfoFloatData **)&jarg1; 
  result = (float) ((arg1)->m_splitImpulseTurnErp);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btContactSolverInfoFloatData_1linearSlop_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  Bullet::btContactSolverInfoFloatData *arg1 = (Bullet::btContactSolverInfoFloatData *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btContactSolverInfoFloatData **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->m_linearSlop = arg2;
}


SWIGEXPORT jfloat JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btContactSolverInfoFloatData_1linearSlop_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  Bullet::btContactSolverInfoFloatData *arg1 = (Bullet::btContactSolverInfoFloatData *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btContactSolverInfoFloatData **)&jarg1; 
  result = (float) ((arg1)->m_linearSlop);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btContactSolverInfoFloatData_1warmstartingFactor_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  Bullet::btContactSolverInfoFloatData *arg1 = (Bullet::btContactSolverInfoFloatData *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btContactSolverInfoFloatData **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->m_warmstartingFactor = arg2;
}


SWIGEXPORT jfloat JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btContactSolverInfoFloatData_1warmstartingFactor_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  Bullet::btContactSolverInfoFloatData *arg1 = (Bullet::btContactSolverInfoFloatData *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btContactSolverInfoFloatData **)&jarg1; 
  result = (float) ((arg1)->m_warmstartingFactor);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btContactSolverInfoFloatData_1maxGyroscopicForce_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  Bullet::btContactSolverInfoFloatData *arg1 = (Bullet::btContactSolverInfoFloatData *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btContactSolverInfoFloatData **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->m_maxGyroscopicForce = arg2;
}


SWIGEXPORT jfloat JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btContactSolverInfoFloatData_1maxGyroscopicForce_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  Bullet::btContactSolverInfoFloatData *arg1 = (Bullet::btContactSolverInfoFloatData *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btContactSolverInfoFloatData **)&jarg1; 
  result = (float) ((arg1)->m_maxGyroscopicForce);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btContactSolverInfoFloatData_1singleAxisRollingFrictionThreshold_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  Bullet::btContactSolverInfoFloatData *arg1 = (Bullet::btContactSolverInfoFloatData *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btContactSolverInfoFloatData **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->m_singleAxisRollingFrictionThreshold = arg2;
}


SWIGEXPORT jfloat JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btContactSolverInfoFloatData_1singleAxisRollingFrictionThreshold_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  Bullet::btContactSolverInfoFloatData *arg1 = (Bullet::btContactSolverInfoFloatData *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btContactSolverInfoFloatData **)&jarg1; 
  result = (float) ((arg1)->m_singleAxisRollingFrictionThreshold);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btContactSolverInfoFloatData_1numIterations_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Bullet::btContactSolverInfoFloatData *arg1 = (Bullet::btContactSolverInfoFloatData *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btContactSolverInfoFloatData **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_numIterations = arg2;
}


SWIGEXPORT jint JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btContactSolverInfoFloatData_1numIterations_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Bullet::btContactSolverInfoFloatData *arg1 = (Bullet::btContactSolverInfoFloatData *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btContactSolverInfoFloatData **)&jarg1; 
  result = (int) ((arg1)->m_numIterations);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btContactSolverInfoFloatData_1solverMode_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Bullet::btContactSolverInfoFloatData *arg1 = (Bullet::btContactSolverInfoFloatData *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btContactSolverInfoFloatData **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_solverMode = arg2;
}


SWIGEXPORT jint JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btContactSolverInfoFloatData_1solverMode_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Bullet::btContactSolverInfoFloatData *arg1 = (Bullet::btContactSolverInfoFloatData *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btContactSolverInfoFloatData **)&jarg1; 
  result = (int) ((arg1)->m_solverMode);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btContactSolverInfoFloatData_1restingContactRestitutionThreshold_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Bullet::btContactSolverInfoFloatData *arg1 = (Bullet::btContactSolverInfoFloatData *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btContactSolverInfoFloatData **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_restingContactRestitutionThreshold = arg2;
}


SWIGEXPORT jint JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btContactSolverInfoFloatData_1restingContactRestitutionThreshold_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Bullet::btContactSolverInfoFloatData *arg1 = (Bullet::btContactSolverInfoFloatData *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btContactSolverInfoFloatData **)&jarg1; 
  result = (int) ((arg1)->m_restingContactRestitutionThreshold);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btContactSolverInfoFloatData_1minimumSolverBatchSize_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Bullet::btContactSolverInfoFloatData *arg1 = (Bullet::btContactSolverInfoFloatData *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btContactSolverInfoFloatData **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_minimumSolverBatchSize = arg2;
}


SWIGEXPORT jint JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btContactSolverInfoFloatData_1minimumSolverBatchSize_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Bullet::btContactSolverInfoFloatData *arg1 = (Bullet::btContactSolverInfoFloatData *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btContactSolverInfoFloatData **)&jarg1; 
  result = (int) ((arg1)->m_minimumSolverBatchSize);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btContactSolverInfoFloatData_1splitImpulse_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Bullet::btContactSolverInfoFloatData *arg1 = (Bullet::btContactSolverInfoFloatData *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btContactSolverInfoFloatData **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_splitImpulse = arg2;
}


SWIGEXPORT jint JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btContactSolverInfoFloatData_1splitImpulse_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Bullet::btContactSolverInfoFloatData *arg1 = (Bullet::btContactSolverInfoFloatData *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btContactSolverInfoFloatData **)&jarg1; 
  result = (int) ((arg1)->m_splitImpulse);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btContactSolverInfoFloatData_1padding_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  Bullet::btContactSolverInfoFloatData *arg1 = (Bullet::btContactSolverInfoFloatData *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btContactSolverInfoFloatData **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->m_padding, (const char *)arg2, 4-1);
      arg1->m_padding[4-1] = 0;
    } else {
      arg1->m_padding[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btContactSolverInfoFloatData_1padding_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  Bullet::btContactSolverInfoFloatData *arg1 = (Bullet::btContactSolverInfoFloatData *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btContactSolverInfoFloatData **)&jarg1; 
  result = (char *)(char *) ((arg1)->m_padding);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_new_1btContactSolverInfoFloatData(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Bullet::btContactSolverInfoFloatData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Bullet::btContactSolverInfoFloatData *)new Bullet::btContactSolverInfoFloatData();
  *(Bullet::btContactSolverInfoFloatData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_delete_1btContactSolverInfoFloatData(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Bullet::btContactSolverInfoFloatData *arg1 = (Bullet::btContactSolverInfoFloatData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Bullet::btContactSolverInfoFloatData **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btDynamicsWorldDoubleData_1solverInfo_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Bullet::btDynamicsWorldDoubleData *arg1 = (Bullet::btDynamicsWorldDoubleData *) 0 ;
  Bullet::btContactSolverInfoDoubleData *arg2 = (Bullet::btContactSolverInfoDoubleData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Bullet::btDynamicsWorldDoubleData **)&jarg1; 
  arg2 = *(Bullet::btContactSolverInfoDoubleData **)&jarg2; 
  if (arg1) (arg1)->m_solverInfo = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btDynamicsWorldDoubleData_1solverInfo_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Bullet::btDynamicsWorldDoubleData *arg1 = (Bullet::btDynamicsWorldDoubleData *) 0 ;
  Bullet::btContactSolverInfoDoubleData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btDynamicsWorldDoubleData **)&jarg1; 
  result = (Bullet::btContactSolverInfoDoubleData *)& ((arg1)->m_solverInfo);
  *(Bullet::btContactSolverInfoDoubleData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btDynamicsWorldDoubleData_1gravity_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Bullet::btDynamicsWorldDoubleData *arg1 = (Bullet::btDynamicsWorldDoubleData *) 0 ;
  Bullet::btVector3DoubleData *arg2 = (Bullet::btVector3DoubleData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Bullet::btDynamicsWorldDoubleData **)&jarg1; 
  arg2 = *(Bullet::btVector3DoubleData **)&jarg2; 
  if (arg1) (arg1)->m_gravity = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btDynamicsWorldDoubleData_1gravity_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Bullet::btDynamicsWorldDoubleData *arg1 = (Bullet::btDynamicsWorldDoubleData *) 0 ;
  Bullet::btVector3DoubleData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btDynamicsWorldDoubleData **)&jarg1; 
  result = (Bullet::btVector3DoubleData *)& ((arg1)->m_gravity);
  *(Bullet::btVector3DoubleData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_new_1btDynamicsWorldDoubleData(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Bullet::btDynamicsWorldDoubleData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Bullet::btDynamicsWorldDoubleData *)new Bullet::btDynamicsWorldDoubleData();
  *(Bullet::btDynamicsWorldDoubleData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_delete_1btDynamicsWorldDoubleData(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Bullet::btDynamicsWorldDoubleData *arg1 = (Bullet::btDynamicsWorldDoubleData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Bullet::btDynamicsWorldDoubleData **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btDynamicsWorldFloatData_1solverInfo_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Bullet::btDynamicsWorldFloatData *arg1 = (Bullet::btDynamicsWorldFloatData *) 0 ;
  Bullet::btContactSolverInfoFloatData *arg2 = (Bullet::btContactSolverInfoFloatData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Bullet::btDynamicsWorldFloatData **)&jarg1; 
  arg2 = *(Bullet::btContactSolverInfoFloatData **)&jarg2; 
  if (arg1) (arg1)->m_solverInfo = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btDynamicsWorldFloatData_1solverInfo_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Bullet::btDynamicsWorldFloatData *arg1 = (Bullet::btDynamicsWorldFloatData *) 0 ;
  Bullet::btContactSolverInfoFloatData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btDynamicsWorldFloatData **)&jarg1; 
  result = (Bullet::btContactSolverInfoFloatData *)& ((arg1)->m_solverInfo);
  *(Bullet::btContactSolverInfoFloatData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btDynamicsWorldFloatData_1gravity_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Bullet::btDynamicsWorldFloatData *arg1 = (Bullet::btDynamicsWorldFloatData *) 0 ;
  Bullet::btVector3FloatData *arg2 = (Bullet::btVector3FloatData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Bullet::btDynamicsWorldFloatData **)&jarg1; 
  arg2 = *(Bullet::btVector3FloatData **)&jarg2; 
  if (arg1) (arg1)->m_gravity = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btDynamicsWorldFloatData_1gravity_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Bullet::btDynamicsWorldFloatData *arg1 = (Bullet::btDynamicsWorldFloatData *) 0 ;
  Bullet::btVector3FloatData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btDynamicsWorldFloatData **)&jarg1; 
  result = (Bullet::btVector3FloatData *)& ((arg1)->m_gravity);
  *(Bullet::btVector3FloatData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_new_1btDynamicsWorldFloatData(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Bullet::btDynamicsWorldFloatData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Bullet::btDynamicsWorldFloatData *)new Bullet::btDynamicsWorldFloatData();
  *(Bullet::btDynamicsWorldFloatData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_delete_1btDynamicsWorldFloatData(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Bullet::btDynamicsWorldFloatData *arg1 = (Bullet::btDynamicsWorldFloatData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Bullet::btDynamicsWorldFloatData **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btRigidBodyFloatData_1collisionObjectData_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Bullet::btRigidBodyFloatData *arg1 = (Bullet::btRigidBodyFloatData *) 0 ;
  Bullet::btCollisionObjectFloatData *arg2 = (Bullet::btCollisionObjectFloatData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Bullet::btRigidBodyFloatData **)&jarg1; 
  arg2 = *(Bullet::btCollisionObjectFloatData **)&jarg2; 
  if (arg1) (arg1)->m_collisionObjectData = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btRigidBodyFloatData_1collisionObjectData_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Bullet::btRigidBodyFloatData *arg1 = (Bullet::btRigidBodyFloatData *) 0 ;
  Bullet::btCollisionObjectFloatData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btRigidBodyFloatData **)&jarg1; 
  result = (Bullet::btCollisionObjectFloatData *)& ((arg1)->m_collisionObjectData);
  *(Bullet::btCollisionObjectFloatData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btRigidBodyFloatData_1invInertiaTensorWorld_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Bullet::btRigidBodyFloatData *arg1 = (Bullet::btRigidBodyFloatData *) 0 ;
  Bullet::btMatrix3x3FloatData *arg2 = (Bullet::btMatrix3x3FloatData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Bullet::btRigidBodyFloatData **)&jarg1; 
  arg2 = *(Bullet::btMatrix3x3FloatData **)&jarg2; 
  if (arg1) (arg1)->m_invInertiaTensorWorld = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btRigidBodyFloatData_1invInertiaTensorWorld_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Bullet::btRigidBodyFloatData *arg1 = (Bullet::btRigidBodyFloatData *) 0 ;
  Bullet::btMatrix3x3FloatData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btRigidBodyFloatData **)&jarg1; 
  result = (Bullet::btMatrix3x3FloatData *)& ((arg1)->m_invInertiaTensorWorld);
  *(Bullet::btMatrix3x3FloatData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btRigidBodyFloatData_1linearVelocity_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Bullet::btRigidBodyFloatData *arg1 = (Bullet::btRigidBodyFloatData *) 0 ;
  Bullet::btVector3FloatData *arg2 = (Bullet::btVector3FloatData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Bullet::btRigidBodyFloatData **)&jarg1; 
  arg2 = *(Bullet::btVector3FloatData **)&jarg2; 
  if (arg1) (arg1)->m_linearVelocity = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btRigidBodyFloatData_1linearVelocity_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Bullet::btRigidBodyFloatData *arg1 = (Bullet::btRigidBodyFloatData *) 0 ;
  Bullet::btVector3FloatData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btRigidBodyFloatData **)&jarg1; 
  result = (Bullet::btVector3FloatData *)& ((arg1)->m_linearVelocity);
  *(Bullet::btVector3FloatData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btRigidBodyFloatData_1angularVelocity_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Bullet::btRigidBodyFloatData *arg1 = (Bullet::btRigidBodyFloatData *) 0 ;
  Bullet::btVector3FloatData *arg2 = (Bullet::btVector3FloatData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Bullet::btRigidBodyFloatData **)&jarg1; 
  arg2 = *(Bullet::btVector3FloatData **)&jarg2; 
  if (arg1) (arg1)->m_angularVelocity = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btRigidBodyFloatData_1angularVelocity_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Bullet::btRigidBodyFloatData *arg1 = (Bullet::btRigidBodyFloatData *) 0 ;
  Bullet::btVector3FloatData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btRigidBodyFloatData **)&jarg1; 
  result = (Bullet::btVector3FloatData *)& ((arg1)->m_angularVelocity);
  *(Bullet::btVector3FloatData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btRigidBodyFloatData_1angularFactor_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Bullet::btRigidBodyFloatData *arg1 = (Bullet::btRigidBodyFloatData *) 0 ;
  Bullet::btVector3FloatData *arg2 = (Bullet::btVector3FloatData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Bullet::btRigidBodyFloatData **)&jarg1; 
  arg2 = *(Bullet::btVector3FloatData **)&jarg2; 
  if (arg1) (arg1)->m_angularFactor = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btRigidBodyFloatData_1angularFactor_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Bullet::btRigidBodyFloatData *arg1 = (Bullet::btRigidBodyFloatData *) 0 ;
  Bullet::btVector3FloatData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btRigidBodyFloatData **)&jarg1; 
  result = (Bullet::btVector3FloatData *)& ((arg1)->m_angularFactor);
  *(Bullet::btVector3FloatData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btRigidBodyFloatData_1linearFactor_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Bullet::btRigidBodyFloatData *arg1 = (Bullet::btRigidBodyFloatData *) 0 ;
  Bullet::btVector3FloatData *arg2 = (Bullet::btVector3FloatData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Bullet::btRigidBodyFloatData **)&jarg1; 
  arg2 = *(Bullet::btVector3FloatData **)&jarg2; 
  if (arg1) (arg1)->m_linearFactor = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btRigidBodyFloatData_1linearFactor_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Bullet::btRigidBodyFloatData *arg1 = (Bullet::btRigidBodyFloatData *) 0 ;
  Bullet::btVector3FloatData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btRigidBodyFloatData **)&jarg1; 
  result = (Bullet::btVector3FloatData *)& ((arg1)->m_linearFactor);
  *(Bullet::btVector3FloatData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btRigidBodyFloatData_1gravity_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Bullet::btRigidBodyFloatData *arg1 = (Bullet::btRigidBodyFloatData *) 0 ;
  Bullet::btVector3FloatData *arg2 = (Bullet::btVector3FloatData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Bullet::btRigidBodyFloatData **)&jarg1; 
  arg2 = *(Bullet::btVector3FloatData **)&jarg2; 
  if (arg1) (arg1)->m_gravity = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btRigidBodyFloatData_1gravity_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Bullet::btRigidBodyFloatData *arg1 = (Bullet::btRigidBodyFloatData *) 0 ;
  Bullet::btVector3FloatData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btRigidBodyFloatData **)&jarg1; 
  result = (Bullet::btVector3FloatData *)& ((arg1)->m_gravity);
  *(Bullet::btVector3FloatData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btRigidBodyFloatData_1gravity_1acceleration_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Bullet::btRigidBodyFloatData *arg1 = (Bullet::btRigidBodyFloatData *) 0 ;
  Bullet::btVector3FloatData *arg2 = (Bullet::btVector3FloatData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Bullet::btRigidBodyFloatData **)&jarg1; 
  arg2 = *(Bullet::btVector3FloatData **)&jarg2; 
  if (arg1) (arg1)->m_gravity_acceleration = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btRigidBodyFloatData_1gravity_1acceleration_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Bullet::btRigidBodyFloatData *arg1 = (Bullet::btRigidBodyFloatData *) 0 ;
  Bullet::btVector3FloatData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btRigidBodyFloatData **)&jarg1; 
  result = (Bullet::btVector3FloatData *)& ((arg1)->m_gravity_acceleration);
  *(Bullet::btVector3FloatData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btRigidBodyFloatData_1invInertiaLocal_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Bullet::btRigidBodyFloatData *arg1 = (Bullet::btRigidBodyFloatData *) 0 ;
  Bullet::btVector3FloatData *arg2 = (Bullet::btVector3FloatData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Bullet::btRigidBodyFloatData **)&jarg1; 
  arg2 = *(Bullet::btVector3FloatData **)&jarg2; 
  if (arg1) (arg1)->m_invInertiaLocal = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btRigidBodyFloatData_1invInertiaLocal_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Bullet::btRigidBodyFloatData *arg1 = (Bullet::btRigidBodyFloatData *) 0 ;
  Bullet::btVector3FloatData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btRigidBodyFloatData **)&jarg1; 
  result = (Bullet::btVector3FloatData *)& ((arg1)->m_invInertiaLocal);
  *(Bullet::btVector3FloatData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btRigidBodyFloatData_1totalForce_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Bullet::btRigidBodyFloatData *arg1 = (Bullet::btRigidBodyFloatData *) 0 ;
  Bullet::btVector3FloatData *arg2 = (Bullet::btVector3FloatData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Bullet::btRigidBodyFloatData **)&jarg1; 
  arg2 = *(Bullet::btVector3FloatData **)&jarg2; 
  if (arg1) (arg1)->m_totalForce = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btRigidBodyFloatData_1totalForce_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Bullet::btRigidBodyFloatData *arg1 = (Bullet::btRigidBodyFloatData *) 0 ;
  Bullet::btVector3FloatData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btRigidBodyFloatData **)&jarg1; 
  result = (Bullet::btVector3FloatData *)& ((arg1)->m_totalForce);
  *(Bullet::btVector3FloatData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btRigidBodyFloatData_1totalTorque_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Bullet::btRigidBodyFloatData *arg1 = (Bullet::btRigidBodyFloatData *) 0 ;
  Bullet::btVector3FloatData *arg2 = (Bullet::btVector3FloatData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Bullet::btRigidBodyFloatData **)&jarg1; 
  arg2 = *(Bullet::btVector3FloatData **)&jarg2; 
  if (arg1) (arg1)->m_totalTorque = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btRigidBodyFloatData_1totalTorque_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Bullet::btRigidBodyFloatData *arg1 = (Bullet::btRigidBodyFloatData *) 0 ;
  Bullet::btVector3FloatData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btRigidBodyFloatData **)&jarg1; 
  result = (Bullet::btVector3FloatData *)& ((arg1)->m_totalTorque);
  *(Bullet::btVector3FloatData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btRigidBodyFloatData_1inverseMass_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  Bullet::btRigidBodyFloatData *arg1 = (Bullet::btRigidBodyFloatData *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btRigidBodyFloatData **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->m_inverseMass = arg2;
}


SWIGEXPORT jfloat JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btRigidBodyFloatData_1inverseMass_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  Bullet::btRigidBodyFloatData *arg1 = (Bullet::btRigidBodyFloatData *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btRigidBodyFloatData **)&jarg1; 
  result = (float) ((arg1)->m_inverseMass);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btRigidBodyFloatData_1linearDamping_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  Bullet::btRigidBodyFloatData *arg1 = (Bullet::btRigidBodyFloatData *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btRigidBodyFloatData **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->m_linearDamping = arg2;
}


SWIGEXPORT jfloat JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btRigidBodyFloatData_1linearDamping_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  Bullet::btRigidBodyFloatData *arg1 = (Bullet::btRigidBodyFloatData *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btRigidBodyFloatData **)&jarg1; 
  result = (float) ((arg1)->m_linearDamping);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btRigidBodyFloatData_1angularDamping_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  Bullet::btRigidBodyFloatData *arg1 = (Bullet::btRigidBodyFloatData *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btRigidBodyFloatData **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->m_angularDamping = arg2;
}


SWIGEXPORT jfloat JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btRigidBodyFloatData_1angularDamping_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  Bullet::btRigidBodyFloatData *arg1 = (Bullet::btRigidBodyFloatData *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btRigidBodyFloatData **)&jarg1; 
  result = (float) ((arg1)->m_angularDamping);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btRigidBodyFloatData_1additionalDampingFactor_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  Bullet::btRigidBodyFloatData *arg1 = (Bullet::btRigidBodyFloatData *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btRigidBodyFloatData **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->m_additionalDampingFactor = arg2;
}


SWIGEXPORT jfloat JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btRigidBodyFloatData_1additionalDampingFactor_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  Bullet::btRigidBodyFloatData *arg1 = (Bullet::btRigidBodyFloatData *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btRigidBodyFloatData **)&jarg1; 
  result = (float) ((arg1)->m_additionalDampingFactor);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btRigidBodyFloatData_1additionalLinearDampingThresholdSqr_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  Bullet::btRigidBodyFloatData *arg1 = (Bullet::btRigidBodyFloatData *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btRigidBodyFloatData **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->m_additionalLinearDampingThresholdSqr = arg2;
}


SWIGEXPORT jfloat JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btRigidBodyFloatData_1additionalLinearDampingThresholdSqr_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  Bullet::btRigidBodyFloatData *arg1 = (Bullet::btRigidBodyFloatData *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btRigidBodyFloatData **)&jarg1; 
  result = (float) ((arg1)->m_additionalLinearDampingThresholdSqr);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btRigidBodyFloatData_1additionalAngularDampingThresholdSqr_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  Bullet::btRigidBodyFloatData *arg1 = (Bullet::btRigidBodyFloatData *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btRigidBodyFloatData **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->m_additionalAngularDampingThresholdSqr = arg2;
}


SWIGEXPORT jfloat JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btRigidBodyFloatData_1additionalAngularDampingThresholdSqr_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  Bullet::btRigidBodyFloatData *arg1 = (Bullet::btRigidBodyFloatData *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btRigidBodyFloatData **)&jarg1; 
  result = (float) ((arg1)->m_additionalAngularDampingThresholdSqr);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btRigidBodyFloatData_1additionalAngularDampingFactor_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  Bullet::btRigidBodyFloatData *arg1 = (Bullet::btRigidBodyFloatData *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btRigidBodyFloatData **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->m_additionalAngularDampingFactor = arg2;
}


SWIGEXPORT jfloat JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btRigidBodyFloatData_1additionalAngularDampingFactor_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  Bullet::btRigidBodyFloatData *arg1 = (Bullet::btRigidBodyFloatData *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btRigidBodyFloatData **)&jarg1; 
  result = (float) ((arg1)->m_additionalAngularDampingFactor);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btRigidBodyFloatData_1linearSleepingThreshold_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  Bullet::btRigidBodyFloatData *arg1 = (Bullet::btRigidBodyFloatData *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btRigidBodyFloatData **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->m_linearSleepingThreshold = arg2;
}


SWIGEXPORT jfloat JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btRigidBodyFloatData_1linearSleepingThreshold_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  Bullet::btRigidBodyFloatData *arg1 = (Bullet::btRigidBodyFloatData *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btRigidBodyFloatData **)&jarg1; 
  result = (float) ((arg1)->m_linearSleepingThreshold);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btRigidBodyFloatData_1angularSleepingThreshold_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  Bullet::btRigidBodyFloatData *arg1 = (Bullet::btRigidBodyFloatData *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btRigidBodyFloatData **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->m_angularSleepingThreshold = arg2;
}


SWIGEXPORT jfloat JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btRigidBodyFloatData_1angularSleepingThreshold_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  Bullet::btRigidBodyFloatData *arg1 = (Bullet::btRigidBodyFloatData *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btRigidBodyFloatData **)&jarg1; 
  result = (float) ((arg1)->m_angularSleepingThreshold);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btRigidBodyFloatData_1additionalDamping_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Bullet::btRigidBodyFloatData *arg1 = (Bullet::btRigidBodyFloatData *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btRigidBodyFloatData **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_additionalDamping = arg2;
}


SWIGEXPORT jint JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btRigidBodyFloatData_1additionalDamping_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Bullet::btRigidBodyFloatData *arg1 = (Bullet::btRigidBodyFloatData *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btRigidBodyFloatData **)&jarg1; 
  result = (int) ((arg1)->m_additionalDamping);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_new_1btRigidBodyFloatData(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Bullet::btRigidBodyFloatData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Bullet::btRigidBodyFloatData *)new Bullet::btRigidBodyFloatData();
  *(Bullet::btRigidBodyFloatData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_delete_1btRigidBodyFloatData(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Bullet::btRigidBodyFloatData *arg1 = (Bullet::btRigidBodyFloatData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Bullet::btRigidBodyFloatData **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btRigidBodyDoubleData_1collisionObjectData_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Bullet::btRigidBodyDoubleData *arg1 = (Bullet::btRigidBodyDoubleData *) 0 ;
  Bullet::btCollisionObjectDoubleData *arg2 = (Bullet::btCollisionObjectDoubleData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Bullet::btRigidBodyDoubleData **)&jarg1; 
  arg2 = *(Bullet::btCollisionObjectDoubleData **)&jarg2; 
  if (arg1) (arg1)->m_collisionObjectData = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btRigidBodyDoubleData_1collisionObjectData_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Bullet::btRigidBodyDoubleData *arg1 = (Bullet::btRigidBodyDoubleData *) 0 ;
  Bullet::btCollisionObjectDoubleData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btRigidBodyDoubleData **)&jarg1; 
  result = (Bullet::btCollisionObjectDoubleData *)& ((arg1)->m_collisionObjectData);
  *(Bullet::btCollisionObjectDoubleData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btRigidBodyDoubleData_1invInertiaTensorWorld_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Bullet::btRigidBodyDoubleData *arg1 = (Bullet::btRigidBodyDoubleData *) 0 ;
  Bullet::btMatrix3x3DoubleData *arg2 = (Bullet::btMatrix3x3DoubleData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Bullet::btRigidBodyDoubleData **)&jarg1; 
  arg2 = *(Bullet::btMatrix3x3DoubleData **)&jarg2; 
  if (arg1) (arg1)->m_invInertiaTensorWorld = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btRigidBodyDoubleData_1invInertiaTensorWorld_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Bullet::btRigidBodyDoubleData *arg1 = (Bullet::btRigidBodyDoubleData *) 0 ;
  Bullet::btMatrix3x3DoubleData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btRigidBodyDoubleData **)&jarg1; 
  result = (Bullet::btMatrix3x3DoubleData *)& ((arg1)->m_invInertiaTensorWorld);
  *(Bullet::btMatrix3x3DoubleData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btRigidBodyDoubleData_1linearVelocity_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Bullet::btRigidBodyDoubleData *arg1 = (Bullet::btRigidBodyDoubleData *) 0 ;
  Bullet::btVector3DoubleData *arg2 = (Bullet::btVector3DoubleData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Bullet::btRigidBodyDoubleData **)&jarg1; 
  arg2 = *(Bullet::btVector3DoubleData **)&jarg2; 
  if (arg1) (arg1)->m_linearVelocity = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btRigidBodyDoubleData_1linearVelocity_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Bullet::btRigidBodyDoubleData *arg1 = (Bullet::btRigidBodyDoubleData *) 0 ;
  Bullet::btVector3DoubleData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btRigidBodyDoubleData **)&jarg1; 
  result = (Bullet::btVector3DoubleData *)& ((arg1)->m_linearVelocity);
  *(Bullet::btVector3DoubleData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btRigidBodyDoubleData_1angularVelocity_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Bullet::btRigidBodyDoubleData *arg1 = (Bullet::btRigidBodyDoubleData *) 0 ;
  Bullet::btVector3DoubleData *arg2 = (Bullet::btVector3DoubleData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Bullet::btRigidBodyDoubleData **)&jarg1; 
  arg2 = *(Bullet::btVector3DoubleData **)&jarg2; 
  if (arg1) (arg1)->m_angularVelocity = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btRigidBodyDoubleData_1angularVelocity_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Bullet::btRigidBodyDoubleData *arg1 = (Bullet::btRigidBodyDoubleData *) 0 ;
  Bullet::btVector3DoubleData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btRigidBodyDoubleData **)&jarg1; 
  result = (Bullet::btVector3DoubleData *)& ((arg1)->m_angularVelocity);
  *(Bullet::btVector3DoubleData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btRigidBodyDoubleData_1angularFactor_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Bullet::btRigidBodyDoubleData *arg1 = (Bullet::btRigidBodyDoubleData *) 0 ;
  Bullet::btVector3DoubleData *arg2 = (Bullet::btVector3DoubleData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Bullet::btRigidBodyDoubleData **)&jarg1; 
  arg2 = *(Bullet::btVector3DoubleData **)&jarg2; 
  if (arg1) (arg1)->m_angularFactor = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btRigidBodyDoubleData_1angularFactor_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Bullet::btRigidBodyDoubleData *arg1 = (Bullet::btRigidBodyDoubleData *) 0 ;
  Bullet::btVector3DoubleData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btRigidBodyDoubleData **)&jarg1; 
  result = (Bullet::btVector3DoubleData *)& ((arg1)->m_angularFactor);
  *(Bullet::btVector3DoubleData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btRigidBodyDoubleData_1linearFactor_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Bullet::btRigidBodyDoubleData *arg1 = (Bullet::btRigidBodyDoubleData *) 0 ;
  Bullet::btVector3DoubleData *arg2 = (Bullet::btVector3DoubleData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Bullet::btRigidBodyDoubleData **)&jarg1; 
  arg2 = *(Bullet::btVector3DoubleData **)&jarg2; 
  if (arg1) (arg1)->m_linearFactor = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btRigidBodyDoubleData_1linearFactor_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Bullet::btRigidBodyDoubleData *arg1 = (Bullet::btRigidBodyDoubleData *) 0 ;
  Bullet::btVector3DoubleData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btRigidBodyDoubleData **)&jarg1; 
  result = (Bullet::btVector3DoubleData *)& ((arg1)->m_linearFactor);
  *(Bullet::btVector3DoubleData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btRigidBodyDoubleData_1gravity_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Bullet::btRigidBodyDoubleData *arg1 = (Bullet::btRigidBodyDoubleData *) 0 ;
  Bullet::btVector3DoubleData *arg2 = (Bullet::btVector3DoubleData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Bullet::btRigidBodyDoubleData **)&jarg1; 
  arg2 = *(Bullet::btVector3DoubleData **)&jarg2; 
  if (arg1) (arg1)->m_gravity = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btRigidBodyDoubleData_1gravity_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Bullet::btRigidBodyDoubleData *arg1 = (Bullet::btRigidBodyDoubleData *) 0 ;
  Bullet::btVector3DoubleData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btRigidBodyDoubleData **)&jarg1; 
  result = (Bullet::btVector3DoubleData *)& ((arg1)->m_gravity);
  *(Bullet::btVector3DoubleData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btRigidBodyDoubleData_1gravity_1acceleration_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Bullet::btRigidBodyDoubleData *arg1 = (Bullet::btRigidBodyDoubleData *) 0 ;
  Bullet::btVector3DoubleData *arg2 = (Bullet::btVector3DoubleData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Bullet::btRigidBodyDoubleData **)&jarg1; 
  arg2 = *(Bullet::btVector3DoubleData **)&jarg2; 
  if (arg1) (arg1)->m_gravity_acceleration = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btRigidBodyDoubleData_1gravity_1acceleration_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Bullet::btRigidBodyDoubleData *arg1 = (Bullet::btRigidBodyDoubleData *) 0 ;
  Bullet::btVector3DoubleData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btRigidBodyDoubleData **)&jarg1; 
  result = (Bullet::btVector3DoubleData *)& ((arg1)->m_gravity_acceleration);
  *(Bullet::btVector3DoubleData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btRigidBodyDoubleData_1invInertiaLocal_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Bullet::btRigidBodyDoubleData *arg1 = (Bullet::btRigidBodyDoubleData *) 0 ;
  Bullet::btVector3DoubleData *arg2 = (Bullet::btVector3DoubleData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Bullet::btRigidBodyDoubleData **)&jarg1; 
  arg2 = *(Bullet::btVector3DoubleData **)&jarg2; 
  if (arg1) (arg1)->m_invInertiaLocal = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btRigidBodyDoubleData_1invInertiaLocal_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Bullet::btRigidBodyDoubleData *arg1 = (Bullet::btRigidBodyDoubleData *) 0 ;
  Bullet::btVector3DoubleData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btRigidBodyDoubleData **)&jarg1; 
  result = (Bullet::btVector3DoubleData *)& ((arg1)->m_invInertiaLocal);
  *(Bullet::btVector3DoubleData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btRigidBodyDoubleData_1totalForce_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Bullet::btRigidBodyDoubleData *arg1 = (Bullet::btRigidBodyDoubleData *) 0 ;
  Bullet::btVector3DoubleData *arg2 = (Bullet::btVector3DoubleData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Bullet::btRigidBodyDoubleData **)&jarg1; 
  arg2 = *(Bullet::btVector3DoubleData **)&jarg2; 
  if (arg1) (arg1)->m_totalForce = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btRigidBodyDoubleData_1totalForce_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Bullet::btRigidBodyDoubleData *arg1 = (Bullet::btRigidBodyDoubleData *) 0 ;
  Bullet::btVector3DoubleData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btRigidBodyDoubleData **)&jarg1; 
  result = (Bullet::btVector3DoubleData *)& ((arg1)->m_totalForce);
  *(Bullet::btVector3DoubleData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btRigidBodyDoubleData_1totalTorque_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Bullet::btRigidBodyDoubleData *arg1 = (Bullet::btRigidBodyDoubleData *) 0 ;
  Bullet::btVector3DoubleData *arg2 = (Bullet::btVector3DoubleData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Bullet::btRigidBodyDoubleData **)&jarg1; 
  arg2 = *(Bullet::btVector3DoubleData **)&jarg2; 
  if (arg1) (arg1)->m_totalTorque = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btRigidBodyDoubleData_1totalTorque_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Bullet::btRigidBodyDoubleData *arg1 = (Bullet::btRigidBodyDoubleData *) 0 ;
  Bullet::btVector3DoubleData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btRigidBodyDoubleData **)&jarg1; 
  result = (Bullet::btVector3DoubleData *)& ((arg1)->m_totalTorque);
  *(Bullet::btVector3DoubleData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btRigidBodyDoubleData_1inverseMass_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  Bullet::btRigidBodyDoubleData *arg1 = (Bullet::btRigidBodyDoubleData *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btRigidBodyDoubleData **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->m_inverseMass = arg2;
}


SWIGEXPORT jdouble JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btRigidBodyDoubleData_1inverseMass_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  Bullet::btRigidBodyDoubleData *arg1 = (Bullet::btRigidBodyDoubleData *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btRigidBodyDoubleData **)&jarg1; 
  result = (double) ((arg1)->m_inverseMass);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btRigidBodyDoubleData_1linearDamping_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  Bullet::btRigidBodyDoubleData *arg1 = (Bullet::btRigidBodyDoubleData *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btRigidBodyDoubleData **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->m_linearDamping = arg2;
}


SWIGEXPORT jdouble JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btRigidBodyDoubleData_1linearDamping_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  Bullet::btRigidBodyDoubleData *arg1 = (Bullet::btRigidBodyDoubleData *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btRigidBodyDoubleData **)&jarg1; 
  result = (double) ((arg1)->m_linearDamping);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btRigidBodyDoubleData_1angularDamping_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  Bullet::btRigidBodyDoubleData *arg1 = (Bullet::btRigidBodyDoubleData *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btRigidBodyDoubleData **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->m_angularDamping = arg2;
}


SWIGEXPORT jdouble JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btRigidBodyDoubleData_1angularDamping_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  Bullet::btRigidBodyDoubleData *arg1 = (Bullet::btRigidBodyDoubleData *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btRigidBodyDoubleData **)&jarg1; 
  result = (double) ((arg1)->m_angularDamping);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btRigidBodyDoubleData_1additionalDampingFactor_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  Bullet::btRigidBodyDoubleData *arg1 = (Bullet::btRigidBodyDoubleData *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btRigidBodyDoubleData **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->m_additionalDampingFactor = arg2;
}


SWIGEXPORT jdouble JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btRigidBodyDoubleData_1additionalDampingFactor_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  Bullet::btRigidBodyDoubleData *arg1 = (Bullet::btRigidBodyDoubleData *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btRigidBodyDoubleData **)&jarg1; 
  result = (double) ((arg1)->m_additionalDampingFactor);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btRigidBodyDoubleData_1additionalLinearDampingThresholdSqr_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  Bullet::btRigidBodyDoubleData *arg1 = (Bullet::btRigidBodyDoubleData *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btRigidBodyDoubleData **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->m_additionalLinearDampingThresholdSqr = arg2;
}


SWIGEXPORT jdouble JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btRigidBodyDoubleData_1additionalLinearDampingThresholdSqr_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  Bullet::btRigidBodyDoubleData *arg1 = (Bullet::btRigidBodyDoubleData *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btRigidBodyDoubleData **)&jarg1; 
  result = (double) ((arg1)->m_additionalLinearDampingThresholdSqr);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btRigidBodyDoubleData_1additionalAngularDampingThresholdSqr_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  Bullet::btRigidBodyDoubleData *arg1 = (Bullet::btRigidBodyDoubleData *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btRigidBodyDoubleData **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->m_additionalAngularDampingThresholdSqr = arg2;
}


SWIGEXPORT jdouble JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btRigidBodyDoubleData_1additionalAngularDampingThresholdSqr_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  Bullet::btRigidBodyDoubleData *arg1 = (Bullet::btRigidBodyDoubleData *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btRigidBodyDoubleData **)&jarg1; 
  result = (double) ((arg1)->m_additionalAngularDampingThresholdSqr);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btRigidBodyDoubleData_1additionalAngularDampingFactor_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  Bullet::btRigidBodyDoubleData *arg1 = (Bullet::btRigidBodyDoubleData *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btRigidBodyDoubleData **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->m_additionalAngularDampingFactor = arg2;
}


SWIGEXPORT jdouble JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btRigidBodyDoubleData_1additionalAngularDampingFactor_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  Bullet::btRigidBodyDoubleData *arg1 = (Bullet::btRigidBodyDoubleData *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btRigidBodyDoubleData **)&jarg1; 
  result = (double) ((arg1)->m_additionalAngularDampingFactor);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btRigidBodyDoubleData_1linearSleepingThreshold_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  Bullet::btRigidBodyDoubleData *arg1 = (Bullet::btRigidBodyDoubleData *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btRigidBodyDoubleData **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->m_linearSleepingThreshold = arg2;
}


SWIGEXPORT jdouble JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btRigidBodyDoubleData_1linearSleepingThreshold_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  Bullet::btRigidBodyDoubleData *arg1 = (Bullet::btRigidBodyDoubleData *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btRigidBodyDoubleData **)&jarg1; 
  result = (double) ((arg1)->m_linearSleepingThreshold);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btRigidBodyDoubleData_1angularSleepingThreshold_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  Bullet::btRigidBodyDoubleData *arg1 = (Bullet::btRigidBodyDoubleData *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btRigidBodyDoubleData **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->m_angularSleepingThreshold = arg2;
}


SWIGEXPORT jdouble JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btRigidBodyDoubleData_1angularSleepingThreshold_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  Bullet::btRigidBodyDoubleData *arg1 = (Bullet::btRigidBodyDoubleData *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btRigidBodyDoubleData **)&jarg1; 
  result = (double) ((arg1)->m_angularSleepingThreshold);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btRigidBodyDoubleData_1additionalDamping_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Bullet::btRigidBodyDoubleData *arg1 = (Bullet::btRigidBodyDoubleData *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btRigidBodyDoubleData **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_additionalDamping = arg2;
}


SWIGEXPORT jint JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btRigidBodyDoubleData_1additionalDamping_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Bullet::btRigidBodyDoubleData *arg1 = (Bullet::btRigidBodyDoubleData *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btRigidBodyDoubleData **)&jarg1; 
  result = (int) ((arg1)->m_additionalDamping);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btRigidBodyDoubleData_1padding_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  Bullet::btRigidBodyDoubleData *arg1 = (Bullet::btRigidBodyDoubleData *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btRigidBodyDoubleData **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->m_padding, (const char *)arg2, 4-1);
      arg1->m_padding[4-1] = 0;
    } else {
      arg1->m_padding[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btRigidBodyDoubleData_1padding_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  Bullet::btRigidBodyDoubleData *arg1 = (Bullet::btRigidBodyDoubleData *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btRigidBodyDoubleData **)&jarg1; 
  result = (char *)(char *) ((arg1)->m_padding);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_new_1btRigidBodyDoubleData(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Bullet::btRigidBodyDoubleData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Bullet::btRigidBodyDoubleData *)new Bullet::btRigidBodyDoubleData();
  *(Bullet::btRigidBodyDoubleData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_delete_1btRigidBodyDoubleData(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Bullet::btRigidBodyDoubleData *arg1 = (Bullet::btRigidBodyDoubleData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Bullet::btRigidBodyDoubleData **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btConstraintInfo1_1numConstraintRows_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Bullet::btConstraintInfo1 *arg1 = (Bullet::btConstraintInfo1 *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btConstraintInfo1 **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_numConstraintRows = arg2;
}


SWIGEXPORT jint JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btConstraintInfo1_1numConstraintRows_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Bullet::btConstraintInfo1 *arg1 = (Bullet::btConstraintInfo1 *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btConstraintInfo1 **)&jarg1; 
  result = (int) ((arg1)->m_numConstraintRows);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btConstraintInfo1_1nub_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Bullet::btConstraintInfo1 *arg1 = (Bullet::btConstraintInfo1 *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btConstraintInfo1 **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->nub = arg2;
}


SWIGEXPORT jint JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btConstraintInfo1_1nub_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Bullet::btConstraintInfo1 *arg1 = (Bullet::btConstraintInfo1 *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btConstraintInfo1 **)&jarg1; 
  result = (int) ((arg1)->nub);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_new_1btConstraintInfo1(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Bullet::btConstraintInfo1 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Bullet::btConstraintInfo1 *)new Bullet::btConstraintInfo1();
  *(Bullet::btConstraintInfo1 **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_delete_1btConstraintInfo1(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Bullet::btConstraintInfo1 *arg1 = (Bullet::btConstraintInfo1 *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Bullet::btConstraintInfo1 **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btTypedConstraintFloatData_1rbA_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Bullet::btTypedConstraintFloatData *arg1 = (Bullet::btTypedConstraintFloatData *) 0 ;
  Bullet::btRigidBodyFloatData *arg2 = (Bullet::btRigidBodyFloatData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Bullet::btTypedConstraintFloatData **)&jarg1; 
  arg2 = *(Bullet::btRigidBodyFloatData **)&jarg2; 
  if (arg1) (arg1)->m_rbA = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btTypedConstraintFloatData_1rbA_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Bullet::btTypedConstraintFloatData *arg1 = (Bullet::btTypedConstraintFloatData *) 0 ;
  Bullet::btRigidBodyFloatData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btTypedConstraintFloatData **)&jarg1; 
  result = (Bullet::btRigidBodyFloatData *) ((arg1)->m_rbA);
  *(Bullet::btRigidBodyFloatData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btTypedConstraintFloatData_1rbB_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Bullet::btTypedConstraintFloatData *arg1 = (Bullet::btTypedConstraintFloatData *) 0 ;
  Bullet::btRigidBodyFloatData *arg2 = (Bullet::btRigidBodyFloatData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Bullet::btTypedConstraintFloatData **)&jarg1; 
  arg2 = *(Bullet::btRigidBodyFloatData **)&jarg2; 
  if (arg1) (arg1)->m_rbB = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btTypedConstraintFloatData_1rbB_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Bullet::btTypedConstraintFloatData *arg1 = (Bullet::btTypedConstraintFloatData *) 0 ;
  Bullet::btRigidBodyFloatData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btTypedConstraintFloatData **)&jarg1; 
  result = (Bullet::btRigidBodyFloatData *) ((arg1)->m_rbB);
  *(Bullet::btRigidBodyFloatData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btTypedConstraintFloatData_1name_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  Bullet::btTypedConstraintFloatData *arg1 = (Bullet::btTypedConstraintFloatData *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btTypedConstraintFloatData **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    delete [] arg1->m_name;
    if (arg2) {
      arg1->m_name = (char *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->m_name, (const char *)arg2);
    } else {
      arg1->m_name = 0;
    }
  }
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btTypedConstraintFloatData_1name_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  Bullet::btTypedConstraintFloatData *arg1 = (Bullet::btTypedConstraintFloatData *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btTypedConstraintFloatData **)&jarg1; 
  result = (char *) ((arg1)->m_name);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btTypedConstraintFloatData_1objectType_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Bullet::btTypedConstraintFloatData *arg1 = (Bullet::btTypedConstraintFloatData *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btTypedConstraintFloatData **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_objectType = arg2;
}


SWIGEXPORT jint JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btTypedConstraintFloatData_1objectType_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Bullet::btTypedConstraintFloatData *arg1 = (Bullet::btTypedConstraintFloatData *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btTypedConstraintFloatData **)&jarg1; 
  result = (int) ((arg1)->m_objectType);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btTypedConstraintFloatData_1userConstraintType_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Bullet::btTypedConstraintFloatData *arg1 = (Bullet::btTypedConstraintFloatData *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btTypedConstraintFloatData **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_userConstraintType = arg2;
}


SWIGEXPORT jint JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btTypedConstraintFloatData_1userConstraintType_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Bullet::btTypedConstraintFloatData *arg1 = (Bullet::btTypedConstraintFloatData *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btTypedConstraintFloatData **)&jarg1; 
  result = (int) ((arg1)->m_userConstraintType);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btTypedConstraintFloatData_1userConstraintId_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Bullet::btTypedConstraintFloatData *arg1 = (Bullet::btTypedConstraintFloatData *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btTypedConstraintFloatData **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_userConstraintId = arg2;
}


SWIGEXPORT jint JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btTypedConstraintFloatData_1userConstraintId_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Bullet::btTypedConstraintFloatData *arg1 = (Bullet::btTypedConstraintFloatData *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btTypedConstraintFloatData **)&jarg1; 
  result = (int) ((arg1)->m_userConstraintId);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btTypedConstraintFloatData_1needsFeedback_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Bullet::btTypedConstraintFloatData *arg1 = (Bullet::btTypedConstraintFloatData *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btTypedConstraintFloatData **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_needsFeedback = arg2;
}


SWIGEXPORT jint JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btTypedConstraintFloatData_1needsFeedback_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Bullet::btTypedConstraintFloatData *arg1 = (Bullet::btTypedConstraintFloatData *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btTypedConstraintFloatData **)&jarg1; 
  result = (int) ((arg1)->m_needsFeedback);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btTypedConstraintFloatData_1appliedImpulse_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  Bullet::btTypedConstraintFloatData *arg1 = (Bullet::btTypedConstraintFloatData *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btTypedConstraintFloatData **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->m_appliedImpulse = arg2;
}


SWIGEXPORT jfloat JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btTypedConstraintFloatData_1appliedImpulse_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  Bullet::btTypedConstraintFloatData *arg1 = (Bullet::btTypedConstraintFloatData *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btTypedConstraintFloatData **)&jarg1; 
  result = (float) ((arg1)->m_appliedImpulse);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btTypedConstraintFloatData_1dbgDrawSize_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  Bullet::btTypedConstraintFloatData *arg1 = (Bullet::btTypedConstraintFloatData *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btTypedConstraintFloatData **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->m_dbgDrawSize = arg2;
}


SWIGEXPORT jfloat JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btTypedConstraintFloatData_1dbgDrawSize_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  Bullet::btTypedConstraintFloatData *arg1 = (Bullet::btTypedConstraintFloatData *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btTypedConstraintFloatData **)&jarg1; 
  result = (float) ((arg1)->m_dbgDrawSize);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btTypedConstraintFloatData_1disableCollisionsBetweenLinkedBodies_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Bullet::btTypedConstraintFloatData *arg1 = (Bullet::btTypedConstraintFloatData *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btTypedConstraintFloatData **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_disableCollisionsBetweenLinkedBodies = arg2;
}


SWIGEXPORT jint JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btTypedConstraintFloatData_1disableCollisionsBetweenLinkedBodies_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Bullet::btTypedConstraintFloatData *arg1 = (Bullet::btTypedConstraintFloatData *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btTypedConstraintFloatData **)&jarg1; 
  result = (int) ((arg1)->m_disableCollisionsBetweenLinkedBodies);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btTypedConstraintFloatData_1overrideNumSolverIterations_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Bullet::btTypedConstraintFloatData *arg1 = (Bullet::btTypedConstraintFloatData *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btTypedConstraintFloatData **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_overrideNumSolverIterations = arg2;
}


SWIGEXPORT jint JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btTypedConstraintFloatData_1overrideNumSolverIterations_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Bullet::btTypedConstraintFloatData *arg1 = (Bullet::btTypedConstraintFloatData *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btTypedConstraintFloatData **)&jarg1; 
  result = (int) ((arg1)->m_overrideNumSolverIterations);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btTypedConstraintFloatData_1breakingImpulseThreshold_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  Bullet::btTypedConstraintFloatData *arg1 = (Bullet::btTypedConstraintFloatData *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btTypedConstraintFloatData **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->m_breakingImpulseThreshold = arg2;
}


SWIGEXPORT jfloat JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btTypedConstraintFloatData_1breakingImpulseThreshold_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  Bullet::btTypedConstraintFloatData *arg1 = (Bullet::btTypedConstraintFloatData *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btTypedConstraintFloatData **)&jarg1; 
  result = (float) ((arg1)->m_breakingImpulseThreshold);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btTypedConstraintFloatData_1isEnabled_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Bullet::btTypedConstraintFloatData *arg1 = (Bullet::btTypedConstraintFloatData *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btTypedConstraintFloatData **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_isEnabled = arg2;
}


SWIGEXPORT jint JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btTypedConstraintFloatData_1isEnabled_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Bullet::btTypedConstraintFloatData *arg1 = (Bullet::btTypedConstraintFloatData *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btTypedConstraintFloatData **)&jarg1; 
  result = (int) ((arg1)->m_isEnabled);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_new_1btTypedConstraintFloatData(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Bullet::btTypedConstraintFloatData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Bullet::btTypedConstraintFloatData *)new Bullet::btTypedConstraintFloatData();
  *(Bullet::btTypedConstraintFloatData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_delete_1btTypedConstraintFloatData(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Bullet::btTypedConstraintFloatData *arg1 = (Bullet::btTypedConstraintFloatData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Bullet::btTypedConstraintFloatData **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btTypedConstraintData_1rbA_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Bullet::btTypedConstraintData *arg1 = (Bullet::btTypedConstraintData *) 0 ;
  Bullet::bInvalidHandle *arg2 = (Bullet::bInvalidHandle *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Bullet::btTypedConstraintData **)&jarg1; 
  arg2 = *(Bullet::bInvalidHandle **)&jarg2; 
  if (arg1) (arg1)->m_rbA = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btTypedConstraintData_1rbA_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Bullet::btTypedConstraintData *arg1 = (Bullet::btTypedConstraintData *) 0 ;
  Bullet::bInvalidHandle *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btTypedConstraintData **)&jarg1; 
  result = (Bullet::bInvalidHandle *) ((arg1)->m_rbA);
  *(Bullet::bInvalidHandle **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btTypedConstraintData_1rbB_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Bullet::btTypedConstraintData *arg1 = (Bullet::btTypedConstraintData *) 0 ;
  Bullet::bInvalidHandle *arg2 = (Bullet::bInvalidHandle *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Bullet::btTypedConstraintData **)&jarg1; 
  arg2 = *(Bullet::bInvalidHandle **)&jarg2; 
  if (arg1) (arg1)->m_rbB = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btTypedConstraintData_1rbB_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Bullet::btTypedConstraintData *arg1 = (Bullet::btTypedConstraintData *) 0 ;
  Bullet::bInvalidHandle *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btTypedConstraintData **)&jarg1; 
  result = (Bullet::bInvalidHandle *) ((arg1)->m_rbB);
  *(Bullet::bInvalidHandle **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btTypedConstraintData_1name_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  Bullet::btTypedConstraintData *arg1 = (Bullet::btTypedConstraintData *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btTypedConstraintData **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    delete [] arg1->m_name;
    if (arg2) {
      arg1->m_name = (char *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->m_name, (const char *)arg2);
    } else {
      arg1->m_name = 0;
    }
  }
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btTypedConstraintData_1name_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  Bullet::btTypedConstraintData *arg1 = (Bullet::btTypedConstraintData *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btTypedConstraintData **)&jarg1; 
  result = (char *) ((arg1)->m_name);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btTypedConstraintData_1objectType_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Bullet::btTypedConstraintData *arg1 = (Bullet::btTypedConstraintData *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btTypedConstraintData **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_objectType = arg2;
}


SWIGEXPORT jint JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btTypedConstraintData_1objectType_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Bullet::btTypedConstraintData *arg1 = (Bullet::btTypedConstraintData *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btTypedConstraintData **)&jarg1; 
  result = (int) ((arg1)->m_objectType);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btTypedConstraintData_1userConstraintType_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Bullet::btTypedConstraintData *arg1 = (Bullet::btTypedConstraintData *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btTypedConstraintData **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_userConstraintType = arg2;
}


SWIGEXPORT jint JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btTypedConstraintData_1userConstraintType_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Bullet::btTypedConstraintData *arg1 = (Bullet::btTypedConstraintData *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btTypedConstraintData **)&jarg1; 
  result = (int) ((arg1)->m_userConstraintType);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btTypedConstraintData_1userConstraintId_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Bullet::btTypedConstraintData *arg1 = (Bullet::btTypedConstraintData *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btTypedConstraintData **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_userConstraintId = arg2;
}


SWIGEXPORT jint JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btTypedConstraintData_1userConstraintId_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Bullet::btTypedConstraintData *arg1 = (Bullet::btTypedConstraintData *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btTypedConstraintData **)&jarg1; 
  result = (int) ((arg1)->m_userConstraintId);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btTypedConstraintData_1needsFeedback_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Bullet::btTypedConstraintData *arg1 = (Bullet::btTypedConstraintData *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btTypedConstraintData **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_needsFeedback = arg2;
}


SWIGEXPORT jint JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btTypedConstraintData_1needsFeedback_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Bullet::btTypedConstraintData *arg1 = (Bullet::btTypedConstraintData *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btTypedConstraintData **)&jarg1; 
  result = (int) ((arg1)->m_needsFeedback);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btTypedConstraintData_1appliedImpulse_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  Bullet::btTypedConstraintData *arg1 = (Bullet::btTypedConstraintData *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btTypedConstraintData **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->m_appliedImpulse = arg2;
}


SWIGEXPORT jfloat JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btTypedConstraintData_1appliedImpulse_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  Bullet::btTypedConstraintData *arg1 = (Bullet::btTypedConstraintData *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btTypedConstraintData **)&jarg1; 
  result = (float) ((arg1)->m_appliedImpulse);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btTypedConstraintData_1dbgDrawSize_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  Bullet::btTypedConstraintData *arg1 = (Bullet::btTypedConstraintData *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btTypedConstraintData **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->m_dbgDrawSize = arg2;
}


SWIGEXPORT jfloat JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btTypedConstraintData_1dbgDrawSize_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  Bullet::btTypedConstraintData *arg1 = (Bullet::btTypedConstraintData *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btTypedConstraintData **)&jarg1; 
  result = (float) ((arg1)->m_dbgDrawSize);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btTypedConstraintData_1disableCollisionsBetweenLinkedBodies_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Bullet::btTypedConstraintData *arg1 = (Bullet::btTypedConstraintData *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btTypedConstraintData **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_disableCollisionsBetweenLinkedBodies = arg2;
}


SWIGEXPORT jint JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btTypedConstraintData_1disableCollisionsBetweenLinkedBodies_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Bullet::btTypedConstraintData *arg1 = (Bullet::btTypedConstraintData *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btTypedConstraintData **)&jarg1; 
  result = (int) ((arg1)->m_disableCollisionsBetweenLinkedBodies);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btTypedConstraintData_1overrideNumSolverIterations_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Bullet::btTypedConstraintData *arg1 = (Bullet::btTypedConstraintData *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btTypedConstraintData **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_overrideNumSolverIterations = arg2;
}


SWIGEXPORT jint JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btTypedConstraintData_1overrideNumSolverIterations_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Bullet::btTypedConstraintData *arg1 = (Bullet::btTypedConstraintData *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btTypedConstraintData **)&jarg1; 
  result = (int) ((arg1)->m_overrideNumSolverIterations);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btTypedConstraintData_1breakingImpulseThreshold_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  Bullet::btTypedConstraintData *arg1 = (Bullet::btTypedConstraintData *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btTypedConstraintData **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->m_breakingImpulseThreshold = arg2;
}


SWIGEXPORT jfloat JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btTypedConstraintData_1breakingImpulseThreshold_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  Bullet::btTypedConstraintData *arg1 = (Bullet::btTypedConstraintData *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btTypedConstraintData **)&jarg1; 
  result = (float) ((arg1)->m_breakingImpulseThreshold);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btTypedConstraintData_1isEnabled_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Bullet::btTypedConstraintData *arg1 = (Bullet::btTypedConstraintData *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btTypedConstraintData **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_isEnabled = arg2;
}


SWIGEXPORT jint JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btTypedConstraintData_1isEnabled_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Bullet::btTypedConstraintData *arg1 = (Bullet::btTypedConstraintData *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btTypedConstraintData **)&jarg1; 
  result = (int) ((arg1)->m_isEnabled);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_new_1btTypedConstraintData(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Bullet::btTypedConstraintData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Bullet::btTypedConstraintData *)new Bullet::btTypedConstraintData();
  *(Bullet::btTypedConstraintData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_delete_1btTypedConstraintData(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Bullet::btTypedConstraintData *arg1 = (Bullet::btTypedConstraintData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Bullet::btTypedConstraintData **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btTypedConstraintDoubleData_1rbA_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Bullet::btTypedConstraintDoubleData *arg1 = (Bullet::btTypedConstraintDoubleData *) 0 ;
  Bullet::btRigidBodyDoubleData *arg2 = (Bullet::btRigidBodyDoubleData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Bullet::btTypedConstraintDoubleData **)&jarg1; 
  arg2 = *(Bullet::btRigidBodyDoubleData **)&jarg2; 
  if (arg1) (arg1)->m_rbA = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btTypedConstraintDoubleData_1rbA_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Bullet::btTypedConstraintDoubleData *arg1 = (Bullet::btTypedConstraintDoubleData *) 0 ;
  Bullet::btRigidBodyDoubleData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btTypedConstraintDoubleData **)&jarg1; 
  result = (Bullet::btRigidBodyDoubleData *) ((arg1)->m_rbA);
  *(Bullet::btRigidBodyDoubleData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btTypedConstraintDoubleData_1rbB_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Bullet::btTypedConstraintDoubleData *arg1 = (Bullet::btTypedConstraintDoubleData *) 0 ;
  Bullet::btRigidBodyDoubleData *arg2 = (Bullet::btRigidBodyDoubleData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Bullet::btTypedConstraintDoubleData **)&jarg1; 
  arg2 = *(Bullet::btRigidBodyDoubleData **)&jarg2; 
  if (arg1) (arg1)->m_rbB = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btTypedConstraintDoubleData_1rbB_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Bullet::btTypedConstraintDoubleData *arg1 = (Bullet::btTypedConstraintDoubleData *) 0 ;
  Bullet::btRigidBodyDoubleData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btTypedConstraintDoubleData **)&jarg1; 
  result = (Bullet::btRigidBodyDoubleData *) ((arg1)->m_rbB);
  *(Bullet::btRigidBodyDoubleData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btTypedConstraintDoubleData_1name_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  Bullet::btTypedConstraintDoubleData *arg1 = (Bullet::btTypedConstraintDoubleData *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btTypedConstraintDoubleData **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    delete [] arg1->m_name;
    if (arg2) {
      arg1->m_name = (char *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->m_name, (const char *)arg2);
    } else {
      arg1->m_name = 0;
    }
  }
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btTypedConstraintDoubleData_1name_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  Bullet::btTypedConstraintDoubleData *arg1 = (Bullet::btTypedConstraintDoubleData *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btTypedConstraintDoubleData **)&jarg1; 
  result = (char *) ((arg1)->m_name);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btTypedConstraintDoubleData_1objectType_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Bullet::btTypedConstraintDoubleData *arg1 = (Bullet::btTypedConstraintDoubleData *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btTypedConstraintDoubleData **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_objectType = arg2;
}


SWIGEXPORT jint JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btTypedConstraintDoubleData_1objectType_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Bullet::btTypedConstraintDoubleData *arg1 = (Bullet::btTypedConstraintDoubleData *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btTypedConstraintDoubleData **)&jarg1; 
  result = (int) ((arg1)->m_objectType);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btTypedConstraintDoubleData_1userConstraintType_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Bullet::btTypedConstraintDoubleData *arg1 = (Bullet::btTypedConstraintDoubleData *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btTypedConstraintDoubleData **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_userConstraintType = arg2;
}


SWIGEXPORT jint JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btTypedConstraintDoubleData_1userConstraintType_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Bullet::btTypedConstraintDoubleData *arg1 = (Bullet::btTypedConstraintDoubleData *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btTypedConstraintDoubleData **)&jarg1; 
  result = (int) ((arg1)->m_userConstraintType);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btTypedConstraintDoubleData_1userConstraintId_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Bullet::btTypedConstraintDoubleData *arg1 = (Bullet::btTypedConstraintDoubleData *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btTypedConstraintDoubleData **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_userConstraintId = arg2;
}


SWIGEXPORT jint JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btTypedConstraintDoubleData_1userConstraintId_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Bullet::btTypedConstraintDoubleData *arg1 = (Bullet::btTypedConstraintDoubleData *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btTypedConstraintDoubleData **)&jarg1; 
  result = (int) ((arg1)->m_userConstraintId);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btTypedConstraintDoubleData_1needsFeedback_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Bullet::btTypedConstraintDoubleData *arg1 = (Bullet::btTypedConstraintDoubleData *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btTypedConstraintDoubleData **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_needsFeedback = arg2;
}


SWIGEXPORT jint JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btTypedConstraintDoubleData_1needsFeedback_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Bullet::btTypedConstraintDoubleData *arg1 = (Bullet::btTypedConstraintDoubleData *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btTypedConstraintDoubleData **)&jarg1; 
  result = (int) ((arg1)->m_needsFeedback);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btTypedConstraintDoubleData_1appliedImpulse_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  Bullet::btTypedConstraintDoubleData *arg1 = (Bullet::btTypedConstraintDoubleData *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btTypedConstraintDoubleData **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->m_appliedImpulse = arg2;
}


SWIGEXPORT jdouble JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btTypedConstraintDoubleData_1appliedImpulse_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  Bullet::btTypedConstraintDoubleData *arg1 = (Bullet::btTypedConstraintDoubleData *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btTypedConstraintDoubleData **)&jarg1; 
  result = (double) ((arg1)->m_appliedImpulse);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btTypedConstraintDoubleData_1dbgDrawSize_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  Bullet::btTypedConstraintDoubleData *arg1 = (Bullet::btTypedConstraintDoubleData *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btTypedConstraintDoubleData **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->m_dbgDrawSize = arg2;
}


SWIGEXPORT jdouble JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btTypedConstraintDoubleData_1dbgDrawSize_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  Bullet::btTypedConstraintDoubleData *arg1 = (Bullet::btTypedConstraintDoubleData *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btTypedConstraintDoubleData **)&jarg1; 
  result = (double) ((arg1)->m_dbgDrawSize);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btTypedConstraintDoubleData_1disableCollisionsBetweenLinkedBodies_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Bullet::btTypedConstraintDoubleData *arg1 = (Bullet::btTypedConstraintDoubleData *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btTypedConstraintDoubleData **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_disableCollisionsBetweenLinkedBodies = arg2;
}


SWIGEXPORT jint JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btTypedConstraintDoubleData_1disableCollisionsBetweenLinkedBodies_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Bullet::btTypedConstraintDoubleData *arg1 = (Bullet::btTypedConstraintDoubleData *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btTypedConstraintDoubleData **)&jarg1; 
  result = (int) ((arg1)->m_disableCollisionsBetweenLinkedBodies);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btTypedConstraintDoubleData_1overrideNumSolverIterations_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Bullet::btTypedConstraintDoubleData *arg1 = (Bullet::btTypedConstraintDoubleData *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btTypedConstraintDoubleData **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_overrideNumSolverIterations = arg2;
}


SWIGEXPORT jint JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btTypedConstraintDoubleData_1overrideNumSolverIterations_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Bullet::btTypedConstraintDoubleData *arg1 = (Bullet::btTypedConstraintDoubleData *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btTypedConstraintDoubleData **)&jarg1; 
  result = (int) ((arg1)->m_overrideNumSolverIterations);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btTypedConstraintDoubleData_1breakingImpulseThreshold_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  Bullet::btTypedConstraintDoubleData *arg1 = (Bullet::btTypedConstraintDoubleData *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btTypedConstraintDoubleData **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->m_breakingImpulseThreshold = arg2;
}


SWIGEXPORT jdouble JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btTypedConstraintDoubleData_1breakingImpulseThreshold_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  Bullet::btTypedConstraintDoubleData *arg1 = (Bullet::btTypedConstraintDoubleData *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btTypedConstraintDoubleData **)&jarg1; 
  result = (double) ((arg1)->m_breakingImpulseThreshold);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btTypedConstraintDoubleData_1isEnabled_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Bullet::btTypedConstraintDoubleData *arg1 = (Bullet::btTypedConstraintDoubleData *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btTypedConstraintDoubleData **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_isEnabled = arg2;
}


SWIGEXPORT jint JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btTypedConstraintDoubleData_1isEnabled_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Bullet::btTypedConstraintDoubleData *arg1 = (Bullet::btTypedConstraintDoubleData *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btTypedConstraintDoubleData **)&jarg1; 
  result = (int) ((arg1)->m_isEnabled);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btTypedConstraintDoubleData_1padding_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  Bullet::btTypedConstraintDoubleData *arg1 = (Bullet::btTypedConstraintDoubleData *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btTypedConstraintDoubleData **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->padding, (const char *)arg2, 4-1);
      arg1->padding[4-1] = 0;
    } else {
      arg1->padding[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btTypedConstraintDoubleData_1padding_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  Bullet::btTypedConstraintDoubleData *arg1 = (Bullet::btTypedConstraintDoubleData *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btTypedConstraintDoubleData **)&jarg1; 
  result = (char *)(char *) ((arg1)->padding);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_new_1btTypedConstraintDoubleData(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Bullet::btTypedConstraintDoubleData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Bullet::btTypedConstraintDoubleData *)new Bullet::btTypedConstraintDoubleData();
  *(Bullet::btTypedConstraintDoubleData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_delete_1btTypedConstraintDoubleData(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Bullet::btTypedConstraintDoubleData *arg1 = (Bullet::btTypedConstraintDoubleData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Bullet::btTypedConstraintDoubleData **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btPoint2PointConstraintFloatData_1typeConstraintData_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Bullet::btPoint2PointConstraintFloatData *arg1 = (Bullet::btPoint2PointConstraintFloatData *) 0 ;
  Bullet::btTypedConstraintData *arg2 = (Bullet::btTypedConstraintData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Bullet::btPoint2PointConstraintFloatData **)&jarg1; 
  arg2 = *(Bullet::btTypedConstraintData **)&jarg2; 
  if (arg1) (arg1)->m_typeConstraintData = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btPoint2PointConstraintFloatData_1typeConstraintData_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Bullet::btPoint2PointConstraintFloatData *arg1 = (Bullet::btPoint2PointConstraintFloatData *) 0 ;
  Bullet::btTypedConstraintData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btPoint2PointConstraintFloatData **)&jarg1; 
  result = (Bullet::btTypedConstraintData *)& ((arg1)->m_typeConstraintData);
  *(Bullet::btTypedConstraintData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btPoint2PointConstraintFloatData_1pivotInA_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Bullet::btPoint2PointConstraintFloatData *arg1 = (Bullet::btPoint2PointConstraintFloatData *) 0 ;
  Bullet::btVector3FloatData *arg2 = (Bullet::btVector3FloatData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Bullet::btPoint2PointConstraintFloatData **)&jarg1; 
  arg2 = *(Bullet::btVector3FloatData **)&jarg2; 
  if (arg1) (arg1)->m_pivotInA = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btPoint2PointConstraintFloatData_1pivotInA_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Bullet::btPoint2PointConstraintFloatData *arg1 = (Bullet::btPoint2PointConstraintFloatData *) 0 ;
  Bullet::btVector3FloatData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btPoint2PointConstraintFloatData **)&jarg1; 
  result = (Bullet::btVector3FloatData *)& ((arg1)->m_pivotInA);
  *(Bullet::btVector3FloatData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btPoint2PointConstraintFloatData_1pivotInB_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Bullet::btPoint2PointConstraintFloatData *arg1 = (Bullet::btPoint2PointConstraintFloatData *) 0 ;
  Bullet::btVector3FloatData *arg2 = (Bullet::btVector3FloatData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Bullet::btPoint2PointConstraintFloatData **)&jarg1; 
  arg2 = *(Bullet::btVector3FloatData **)&jarg2; 
  if (arg1) (arg1)->m_pivotInB = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btPoint2PointConstraintFloatData_1pivotInB_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Bullet::btPoint2PointConstraintFloatData *arg1 = (Bullet::btPoint2PointConstraintFloatData *) 0 ;
  Bullet::btVector3FloatData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btPoint2PointConstraintFloatData **)&jarg1; 
  result = (Bullet::btVector3FloatData *)& ((arg1)->m_pivotInB);
  *(Bullet::btVector3FloatData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_new_1btPoint2PointConstraintFloatData(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Bullet::btPoint2PointConstraintFloatData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Bullet::btPoint2PointConstraintFloatData *)new Bullet::btPoint2PointConstraintFloatData();
  *(Bullet::btPoint2PointConstraintFloatData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_delete_1btPoint2PointConstraintFloatData(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Bullet::btPoint2PointConstraintFloatData *arg1 = (Bullet::btPoint2PointConstraintFloatData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Bullet::btPoint2PointConstraintFloatData **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btPoint2PointConstraintDoubleData2_1typeConstraintData_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Bullet::btPoint2PointConstraintDoubleData2 *arg1 = (Bullet::btPoint2PointConstraintDoubleData2 *) 0 ;
  Bullet::btTypedConstraintDoubleData *arg2 = (Bullet::btTypedConstraintDoubleData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Bullet::btPoint2PointConstraintDoubleData2 **)&jarg1; 
  arg2 = *(Bullet::btTypedConstraintDoubleData **)&jarg2; 
  if (arg1) (arg1)->m_typeConstraintData = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btPoint2PointConstraintDoubleData2_1typeConstraintData_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Bullet::btPoint2PointConstraintDoubleData2 *arg1 = (Bullet::btPoint2PointConstraintDoubleData2 *) 0 ;
  Bullet::btTypedConstraintDoubleData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btPoint2PointConstraintDoubleData2 **)&jarg1; 
  result = (Bullet::btTypedConstraintDoubleData *)& ((arg1)->m_typeConstraintData);
  *(Bullet::btTypedConstraintDoubleData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btPoint2PointConstraintDoubleData2_1pivotInA_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Bullet::btPoint2PointConstraintDoubleData2 *arg1 = (Bullet::btPoint2PointConstraintDoubleData2 *) 0 ;
  Bullet::btVector3DoubleData *arg2 = (Bullet::btVector3DoubleData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Bullet::btPoint2PointConstraintDoubleData2 **)&jarg1; 
  arg2 = *(Bullet::btVector3DoubleData **)&jarg2; 
  if (arg1) (arg1)->m_pivotInA = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btPoint2PointConstraintDoubleData2_1pivotInA_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Bullet::btPoint2PointConstraintDoubleData2 *arg1 = (Bullet::btPoint2PointConstraintDoubleData2 *) 0 ;
  Bullet::btVector3DoubleData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btPoint2PointConstraintDoubleData2 **)&jarg1; 
  result = (Bullet::btVector3DoubleData *)& ((arg1)->m_pivotInA);
  *(Bullet::btVector3DoubleData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btPoint2PointConstraintDoubleData2_1pivotInB_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Bullet::btPoint2PointConstraintDoubleData2 *arg1 = (Bullet::btPoint2PointConstraintDoubleData2 *) 0 ;
  Bullet::btVector3DoubleData *arg2 = (Bullet::btVector3DoubleData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Bullet::btPoint2PointConstraintDoubleData2 **)&jarg1; 
  arg2 = *(Bullet::btVector3DoubleData **)&jarg2; 
  if (arg1) (arg1)->m_pivotInB = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btPoint2PointConstraintDoubleData2_1pivotInB_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Bullet::btPoint2PointConstraintDoubleData2 *arg1 = (Bullet::btPoint2PointConstraintDoubleData2 *) 0 ;
  Bullet::btVector3DoubleData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btPoint2PointConstraintDoubleData2 **)&jarg1; 
  result = (Bullet::btVector3DoubleData *)& ((arg1)->m_pivotInB);
  *(Bullet::btVector3DoubleData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_new_1btPoint2PointConstraintDoubleData2(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Bullet::btPoint2PointConstraintDoubleData2 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Bullet::btPoint2PointConstraintDoubleData2 *)new Bullet::btPoint2PointConstraintDoubleData2();
  *(Bullet::btPoint2PointConstraintDoubleData2 **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_delete_1btPoint2PointConstraintDoubleData2(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Bullet::btPoint2PointConstraintDoubleData2 *arg1 = (Bullet::btPoint2PointConstraintDoubleData2 *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Bullet::btPoint2PointConstraintDoubleData2 **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btPoint2PointConstraintDoubleData_1typeConstraintData_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Bullet::btPoint2PointConstraintDoubleData *arg1 = (Bullet::btPoint2PointConstraintDoubleData *) 0 ;
  Bullet::btTypedConstraintData *arg2 = (Bullet::btTypedConstraintData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Bullet::btPoint2PointConstraintDoubleData **)&jarg1; 
  arg2 = *(Bullet::btTypedConstraintData **)&jarg2; 
  if (arg1) (arg1)->m_typeConstraintData = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btPoint2PointConstraintDoubleData_1typeConstraintData_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Bullet::btPoint2PointConstraintDoubleData *arg1 = (Bullet::btPoint2PointConstraintDoubleData *) 0 ;
  Bullet::btTypedConstraintData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btPoint2PointConstraintDoubleData **)&jarg1; 
  result = (Bullet::btTypedConstraintData *)& ((arg1)->m_typeConstraintData);
  *(Bullet::btTypedConstraintData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btPoint2PointConstraintDoubleData_1pivotInA_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Bullet::btPoint2PointConstraintDoubleData *arg1 = (Bullet::btPoint2PointConstraintDoubleData *) 0 ;
  Bullet::btVector3DoubleData *arg2 = (Bullet::btVector3DoubleData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Bullet::btPoint2PointConstraintDoubleData **)&jarg1; 
  arg2 = *(Bullet::btVector3DoubleData **)&jarg2; 
  if (arg1) (arg1)->m_pivotInA = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btPoint2PointConstraintDoubleData_1pivotInA_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Bullet::btPoint2PointConstraintDoubleData *arg1 = (Bullet::btPoint2PointConstraintDoubleData *) 0 ;
  Bullet::btVector3DoubleData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btPoint2PointConstraintDoubleData **)&jarg1; 
  result = (Bullet::btVector3DoubleData *)& ((arg1)->m_pivotInA);
  *(Bullet::btVector3DoubleData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btPoint2PointConstraintDoubleData_1pivotInB_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Bullet::btPoint2PointConstraintDoubleData *arg1 = (Bullet::btPoint2PointConstraintDoubleData *) 0 ;
  Bullet::btVector3DoubleData *arg2 = (Bullet::btVector3DoubleData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Bullet::btPoint2PointConstraintDoubleData **)&jarg1; 
  arg2 = *(Bullet::btVector3DoubleData **)&jarg2; 
  if (arg1) (arg1)->m_pivotInB = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btPoint2PointConstraintDoubleData_1pivotInB_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Bullet::btPoint2PointConstraintDoubleData *arg1 = (Bullet::btPoint2PointConstraintDoubleData *) 0 ;
  Bullet::btVector3DoubleData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btPoint2PointConstraintDoubleData **)&jarg1; 
  result = (Bullet::btVector3DoubleData *)& ((arg1)->m_pivotInB);
  *(Bullet::btVector3DoubleData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_new_1btPoint2PointConstraintDoubleData(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Bullet::btPoint2PointConstraintDoubleData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Bullet::btPoint2PointConstraintDoubleData *)new Bullet::btPoint2PointConstraintDoubleData();
  *(Bullet::btPoint2PointConstraintDoubleData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_delete_1btPoint2PointConstraintDoubleData(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Bullet::btPoint2PointConstraintDoubleData *arg1 = (Bullet::btPoint2PointConstraintDoubleData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Bullet::btPoint2PointConstraintDoubleData **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btHingeConstraintDoubleData_1typeConstraintData_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Bullet::btHingeConstraintDoubleData *arg1 = (Bullet::btHingeConstraintDoubleData *) 0 ;
  Bullet::btTypedConstraintData *arg2 = (Bullet::btTypedConstraintData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Bullet::btHingeConstraintDoubleData **)&jarg1; 
  arg2 = *(Bullet::btTypedConstraintData **)&jarg2; 
  if (arg1) (arg1)->m_typeConstraintData = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btHingeConstraintDoubleData_1typeConstraintData_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Bullet::btHingeConstraintDoubleData *arg1 = (Bullet::btHingeConstraintDoubleData *) 0 ;
  Bullet::btTypedConstraintData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btHingeConstraintDoubleData **)&jarg1; 
  result = (Bullet::btTypedConstraintData *)& ((arg1)->m_typeConstraintData);
  *(Bullet::btTypedConstraintData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btHingeConstraintDoubleData_1rbAFrame_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Bullet::btHingeConstraintDoubleData *arg1 = (Bullet::btHingeConstraintDoubleData *) 0 ;
  Bullet::btTransformDoubleData *arg2 = (Bullet::btTransformDoubleData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Bullet::btHingeConstraintDoubleData **)&jarg1; 
  arg2 = *(Bullet::btTransformDoubleData **)&jarg2; 
  if (arg1) (arg1)->m_rbAFrame = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btHingeConstraintDoubleData_1rbAFrame_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Bullet::btHingeConstraintDoubleData *arg1 = (Bullet::btHingeConstraintDoubleData *) 0 ;
  Bullet::btTransformDoubleData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btHingeConstraintDoubleData **)&jarg1; 
  result = (Bullet::btTransformDoubleData *)& ((arg1)->m_rbAFrame);
  *(Bullet::btTransformDoubleData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btHingeConstraintDoubleData_1rbBFrame_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Bullet::btHingeConstraintDoubleData *arg1 = (Bullet::btHingeConstraintDoubleData *) 0 ;
  Bullet::btTransformDoubleData *arg2 = (Bullet::btTransformDoubleData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Bullet::btHingeConstraintDoubleData **)&jarg1; 
  arg2 = *(Bullet::btTransformDoubleData **)&jarg2; 
  if (arg1) (arg1)->m_rbBFrame = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btHingeConstraintDoubleData_1rbBFrame_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Bullet::btHingeConstraintDoubleData *arg1 = (Bullet::btHingeConstraintDoubleData *) 0 ;
  Bullet::btTransformDoubleData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btHingeConstraintDoubleData **)&jarg1; 
  result = (Bullet::btTransformDoubleData *)& ((arg1)->m_rbBFrame);
  *(Bullet::btTransformDoubleData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btHingeConstraintDoubleData_1useReferenceFrameA_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Bullet::btHingeConstraintDoubleData *arg1 = (Bullet::btHingeConstraintDoubleData *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btHingeConstraintDoubleData **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_useReferenceFrameA = arg2;
}


SWIGEXPORT jint JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btHingeConstraintDoubleData_1useReferenceFrameA_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Bullet::btHingeConstraintDoubleData *arg1 = (Bullet::btHingeConstraintDoubleData *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btHingeConstraintDoubleData **)&jarg1; 
  result = (int) ((arg1)->m_useReferenceFrameA);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btHingeConstraintDoubleData_1angularOnly_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Bullet::btHingeConstraintDoubleData *arg1 = (Bullet::btHingeConstraintDoubleData *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btHingeConstraintDoubleData **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_angularOnly = arg2;
}


SWIGEXPORT jint JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btHingeConstraintDoubleData_1angularOnly_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Bullet::btHingeConstraintDoubleData *arg1 = (Bullet::btHingeConstraintDoubleData *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btHingeConstraintDoubleData **)&jarg1; 
  result = (int) ((arg1)->m_angularOnly);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btHingeConstraintDoubleData_1enableAngularMotor_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Bullet::btHingeConstraintDoubleData *arg1 = (Bullet::btHingeConstraintDoubleData *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btHingeConstraintDoubleData **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_enableAngularMotor = arg2;
}


SWIGEXPORT jint JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btHingeConstraintDoubleData_1enableAngularMotor_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Bullet::btHingeConstraintDoubleData *arg1 = (Bullet::btHingeConstraintDoubleData *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btHingeConstraintDoubleData **)&jarg1; 
  result = (int) ((arg1)->m_enableAngularMotor);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btHingeConstraintDoubleData_1motorTargetVelocity_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  Bullet::btHingeConstraintDoubleData *arg1 = (Bullet::btHingeConstraintDoubleData *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btHingeConstraintDoubleData **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->m_motorTargetVelocity = arg2;
}


SWIGEXPORT jfloat JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btHingeConstraintDoubleData_1motorTargetVelocity_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  Bullet::btHingeConstraintDoubleData *arg1 = (Bullet::btHingeConstraintDoubleData *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btHingeConstraintDoubleData **)&jarg1; 
  result = (float) ((arg1)->m_motorTargetVelocity);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btHingeConstraintDoubleData_1maxMotorImpulse_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  Bullet::btHingeConstraintDoubleData *arg1 = (Bullet::btHingeConstraintDoubleData *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btHingeConstraintDoubleData **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->m_maxMotorImpulse = arg2;
}


SWIGEXPORT jfloat JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btHingeConstraintDoubleData_1maxMotorImpulse_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  Bullet::btHingeConstraintDoubleData *arg1 = (Bullet::btHingeConstraintDoubleData *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btHingeConstraintDoubleData **)&jarg1; 
  result = (float) ((arg1)->m_maxMotorImpulse);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btHingeConstraintDoubleData_1lowerLimit_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  Bullet::btHingeConstraintDoubleData *arg1 = (Bullet::btHingeConstraintDoubleData *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btHingeConstraintDoubleData **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->m_lowerLimit = arg2;
}


SWIGEXPORT jfloat JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btHingeConstraintDoubleData_1lowerLimit_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  Bullet::btHingeConstraintDoubleData *arg1 = (Bullet::btHingeConstraintDoubleData *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btHingeConstraintDoubleData **)&jarg1; 
  result = (float) ((arg1)->m_lowerLimit);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btHingeConstraintDoubleData_1upperLimit_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  Bullet::btHingeConstraintDoubleData *arg1 = (Bullet::btHingeConstraintDoubleData *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btHingeConstraintDoubleData **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->m_upperLimit = arg2;
}


SWIGEXPORT jfloat JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btHingeConstraintDoubleData_1upperLimit_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  Bullet::btHingeConstraintDoubleData *arg1 = (Bullet::btHingeConstraintDoubleData *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btHingeConstraintDoubleData **)&jarg1; 
  result = (float) ((arg1)->m_upperLimit);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btHingeConstraintDoubleData_1limitSoftness_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  Bullet::btHingeConstraintDoubleData *arg1 = (Bullet::btHingeConstraintDoubleData *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btHingeConstraintDoubleData **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->m_limitSoftness = arg2;
}


SWIGEXPORT jfloat JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btHingeConstraintDoubleData_1limitSoftness_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  Bullet::btHingeConstraintDoubleData *arg1 = (Bullet::btHingeConstraintDoubleData *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btHingeConstraintDoubleData **)&jarg1; 
  result = (float) ((arg1)->m_limitSoftness);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btHingeConstraintDoubleData_1biasFactor_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  Bullet::btHingeConstraintDoubleData *arg1 = (Bullet::btHingeConstraintDoubleData *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btHingeConstraintDoubleData **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->m_biasFactor = arg2;
}


SWIGEXPORT jfloat JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btHingeConstraintDoubleData_1biasFactor_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  Bullet::btHingeConstraintDoubleData *arg1 = (Bullet::btHingeConstraintDoubleData *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btHingeConstraintDoubleData **)&jarg1; 
  result = (float) ((arg1)->m_biasFactor);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btHingeConstraintDoubleData_1relaxationFactor_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  Bullet::btHingeConstraintDoubleData *arg1 = (Bullet::btHingeConstraintDoubleData *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btHingeConstraintDoubleData **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->m_relaxationFactor = arg2;
}


SWIGEXPORT jfloat JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btHingeConstraintDoubleData_1relaxationFactor_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  Bullet::btHingeConstraintDoubleData *arg1 = (Bullet::btHingeConstraintDoubleData *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btHingeConstraintDoubleData **)&jarg1; 
  result = (float) ((arg1)->m_relaxationFactor);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_new_1btHingeConstraintDoubleData(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Bullet::btHingeConstraintDoubleData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Bullet::btHingeConstraintDoubleData *)new Bullet::btHingeConstraintDoubleData();
  *(Bullet::btHingeConstraintDoubleData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_delete_1btHingeConstraintDoubleData(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Bullet::btHingeConstraintDoubleData *arg1 = (Bullet::btHingeConstraintDoubleData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Bullet::btHingeConstraintDoubleData **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btHingeConstraintFloatData_1typeConstraintData_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Bullet::btHingeConstraintFloatData *arg1 = (Bullet::btHingeConstraintFloatData *) 0 ;
  Bullet::btTypedConstraintData *arg2 = (Bullet::btTypedConstraintData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Bullet::btHingeConstraintFloatData **)&jarg1; 
  arg2 = *(Bullet::btTypedConstraintData **)&jarg2; 
  if (arg1) (arg1)->m_typeConstraintData = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btHingeConstraintFloatData_1typeConstraintData_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Bullet::btHingeConstraintFloatData *arg1 = (Bullet::btHingeConstraintFloatData *) 0 ;
  Bullet::btTypedConstraintData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btHingeConstraintFloatData **)&jarg1; 
  result = (Bullet::btTypedConstraintData *)& ((arg1)->m_typeConstraintData);
  *(Bullet::btTypedConstraintData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btHingeConstraintFloatData_1rbAFrame_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Bullet::btHingeConstraintFloatData *arg1 = (Bullet::btHingeConstraintFloatData *) 0 ;
  Bullet::btTransformFloatData *arg2 = (Bullet::btTransformFloatData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Bullet::btHingeConstraintFloatData **)&jarg1; 
  arg2 = *(Bullet::btTransformFloatData **)&jarg2; 
  if (arg1) (arg1)->m_rbAFrame = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btHingeConstraintFloatData_1rbAFrame_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Bullet::btHingeConstraintFloatData *arg1 = (Bullet::btHingeConstraintFloatData *) 0 ;
  Bullet::btTransformFloatData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btHingeConstraintFloatData **)&jarg1; 
  result = (Bullet::btTransformFloatData *)& ((arg1)->m_rbAFrame);
  *(Bullet::btTransformFloatData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btHingeConstraintFloatData_1rbBFrame_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Bullet::btHingeConstraintFloatData *arg1 = (Bullet::btHingeConstraintFloatData *) 0 ;
  Bullet::btTransformFloatData *arg2 = (Bullet::btTransformFloatData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Bullet::btHingeConstraintFloatData **)&jarg1; 
  arg2 = *(Bullet::btTransformFloatData **)&jarg2; 
  if (arg1) (arg1)->m_rbBFrame = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btHingeConstraintFloatData_1rbBFrame_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Bullet::btHingeConstraintFloatData *arg1 = (Bullet::btHingeConstraintFloatData *) 0 ;
  Bullet::btTransformFloatData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btHingeConstraintFloatData **)&jarg1; 
  result = (Bullet::btTransformFloatData *)& ((arg1)->m_rbBFrame);
  *(Bullet::btTransformFloatData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btHingeConstraintFloatData_1useReferenceFrameA_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Bullet::btHingeConstraintFloatData *arg1 = (Bullet::btHingeConstraintFloatData *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btHingeConstraintFloatData **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_useReferenceFrameA = arg2;
}


SWIGEXPORT jint JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btHingeConstraintFloatData_1useReferenceFrameA_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Bullet::btHingeConstraintFloatData *arg1 = (Bullet::btHingeConstraintFloatData *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btHingeConstraintFloatData **)&jarg1; 
  result = (int) ((arg1)->m_useReferenceFrameA);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btHingeConstraintFloatData_1angularOnly_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Bullet::btHingeConstraintFloatData *arg1 = (Bullet::btHingeConstraintFloatData *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btHingeConstraintFloatData **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_angularOnly = arg2;
}


SWIGEXPORT jint JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btHingeConstraintFloatData_1angularOnly_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Bullet::btHingeConstraintFloatData *arg1 = (Bullet::btHingeConstraintFloatData *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btHingeConstraintFloatData **)&jarg1; 
  result = (int) ((arg1)->m_angularOnly);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btHingeConstraintFloatData_1enableAngularMotor_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Bullet::btHingeConstraintFloatData *arg1 = (Bullet::btHingeConstraintFloatData *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btHingeConstraintFloatData **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_enableAngularMotor = arg2;
}


SWIGEXPORT jint JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btHingeConstraintFloatData_1enableAngularMotor_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Bullet::btHingeConstraintFloatData *arg1 = (Bullet::btHingeConstraintFloatData *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btHingeConstraintFloatData **)&jarg1; 
  result = (int) ((arg1)->m_enableAngularMotor);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btHingeConstraintFloatData_1motorTargetVelocity_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  Bullet::btHingeConstraintFloatData *arg1 = (Bullet::btHingeConstraintFloatData *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btHingeConstraintFloatData **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->m_motorTargetVelocity = arg2;
}


SWIGEXPORT jfloat JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btHingeConstraintFloatData_1motorTargetVelocity_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  Bullet::btHingeConstraintFloatData *arg1 = (Bullet::btHingeConstraintFloatData *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btHingeConstraintFloatData **)&jarg1; 
  result = (float) ((arg1)->m_motorTargetVelocity);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btHingeConstraintFloatData_1maxMotorImpulse_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  Bullet::btHingeConstraintFloatData *arg1 = (Bullet::btHingeConstraintFloatData *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btHingeConstraintFloatData **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->m_maxMotorImpulse = arg2;
}


SWIGEXPORT jfloat JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btHingeConstraintFloatData_1maxMotorImpulse_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  Bullet::btHingeConstraintFloatData *arg1 = (Bullet::btHingeConstraintFloatData *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btHingeConstraintFloatData **)&jarg1; 
  result = (float) ((arg1)->m_maxMotorImpulse);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btHingeConstraintFloatData_1lowerLimit_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  Bullet::btHingeConstraintFloatData *arg1 = (Bullet::btHingeConstraintFloatData *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btHingeConstraintFloatData **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->m_lowerLimit = arg2;
}


SWIGEXPORT jfloat JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btHingeConstraintFloatData_1lowerLimit_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  Bullet::btHingeConstraintFloatData *arg1 = (Bullet::btHingeConstraintFloatData *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btHingeConstraintFloatData **)&jarg1; 
  result = (float) ((arg1)->m_lowerLimit);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btHingeConstraintFloatData_1upperLimit_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  Bullet::btHingeConstraintFloatData *arg1 = (Bullet::btHingeConstraintFloatData *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btHingeConstraintFloatData **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->m_upperLimit = arg2;
}


SWIGEXPORT jfloat JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btHingeConstraintFloatData_1upperLimit_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  Bullet::btHingeConstraintFloatData *arg1 = (Bullet::btHingeConstraintFloatData *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btHingeConstraintFloatData **)&jarg1; 
  result = (float) ((arg1)->m_upperLimit);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btHingeConstraintFloatData_1limitSoftness_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  Bullet::btHingeConstraintFloatData *arg1 = (Bullet::btHingeConstraintFloatData *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btHingeConstraintFloatData **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->m_limitSoftness = arg2;
}


SWIGEXPORT jfloat JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btHingeConstraintFloatData_1limitSoftness_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  Bullet::btHingeConstraintFloatData *arg1 = (Bullet::btHingeConstraintFloatData *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btHingeConstraintFloatData **)&jarg1; 
  result = (float) ((arg1)->m_limitSoftness);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btHingeConstraintFloatData_1biasFactor_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  Bullet::btHingeConstraintFloatData *arg1 = (Bullet::btHingeConstraintFloatData *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btHingeConstraintFloatData **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->m_biasFactor = arg2;
}


SWIGEXPORT jfloat JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btHingeConstraintFloatData_1biasFactor_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  Bullet::btHingeConstraintFloatData *arg1 = (Bullet::btHingeConstraintFloatData *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btHingeConstraintFloatData **)&jarg1; 
  result = (float) ((arg1)->m_biasFactor);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btHingeConstraintFloatData_1relaxationFactor_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  Bullet::btHingeConstraintFloatData *arg1 = (Bullet::btHingeConstraintFloatData *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btHingeConstraintFloatData **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->m_relaxationFactor = arg2;
}


SWIGEXPORT jfloat JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btHingeConstraintFloatData_1relaxationFactor_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  Bullet::btHingeConstraintFloatData *arg1 = (Bullet::btHingeConstraintFloatData *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btHingeConstraintFloatData **)&jarg1; 
  result = (float) ((arg1)->m_relaxationFactor);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_new_1btHingeConstraintFloatData(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Bullet::btHingeConstraintFloatData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Bullet::btHingeConstraintFloatData *)new Bullet::btHingeConstraintFloatData();
  *(Bullet::btHingeConstraintFloatData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_delete_1btHingeConstraintFloatData(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Bullet::btHingeConstraintFloatData *arg1 = (Bullet::btHingeConstraintFloatData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Bullet::btHingeConstraintFloatData **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btHingeConstraintDoubleData2_1typeConstraintData_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Bullet::btHingeConstraintDoubleData2 *arg1 = (Bullet::btHingeConstraintDoubleData2 *) 0 ;
  Bullet::btTypedConstraintDoubleData *arg2 = (Bullet::btTypedConstraintDoubleData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Bullet::btHingeConstraintDoubleData2 **)&jarg1; 
  arg2 = *(Bullet::btTypedConstraintDoubleData **)&jarg2; 
  if (arg1) (arg1)->m_typeConstraintData = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btHingeConstraintDoubleData2_1typeConstraintData_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Bullet::btHingeConstraintDoubleData2 *arg1 = (Bullet::btHingeConstraintDoubleData2 *) 0 ;
  Bullet::btTypedConstraintDoubleData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btHingeConstraintDoubleData2 **)&jarg1; 
  result = (Bullet::btTypedConstraintDoubleData *)& ((arg1)->m_typeConstraintData);
  *(Bullet::btTypedConstraintDoubleData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btHingeConstraintDoubleData2_1rbAFrame_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Bullet::btHingeConstraintDoubleData2 *arg1 = (Bullet::btHingeConstraintDoubleData2 *) 0 ;
  Bullet::btTransformDoubleData *arg2 = (Bullet::btTransformDoubleData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Bullet::btHingeConstraintDoubleData2 **)&jarg1; 
  arg2 = *(Bullet::btTransformDoubleData **)&jarg2; 
  if (arg1) (arg1)->m_rbAFrame = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btHingeConstraintDoubleData2_1rbAFrame_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Bullet::btHingeConstraintDoubleData2 *arg1 = (Bullet::btHingeConstraintDoubleData2 *) 0 ;
  Bullet::btTransformDoubleData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btHingeConstraintDoubleData2 **)&jarg1; 
  result = (Bullet::btTransformDoubleData *)& ((arg1)->m_rbAFrame);
  *(Bullet::btTransformDoubleData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btHingeConstraintDoubleData2_1rbBFrame_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Bullet::btHingeConstraintDoubleData2 *arg1 = (Bullet::btHingeConstraintDoubleData2 *) 0 ;
  Bullet::btTransformDoubleData *arg2 = (Bullet::btTransformDoubleData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Bullet::btHingeConstraintDoubleData2 **)&jarg1; 
  arg2 = *(Bullet::btTransformDoubleData **)&jarg2; 
  if (arg1) (arg1)->m_rbBFrame = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btHingeConstraintDoubleData2_1rbBFrame_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Bullet::btHingeConstraintDoubleData2 *arg1 = (Bullet::btHingeConstraintDoubleData2 *) 0 ;
  Bullet::btTransformDoubleData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btHingeConstraintDoubleData2 **)&jarg1; 
  result = (Bullet::btTransformDoubleData *)& ((arg1)->m_rbBFrame);
  *(Bullet::btTransformDoubleData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btHingeConstraintDoubleData2_1useReferenceFrameA_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Bullet::btHingeConstraintDoubleData2 *arg1 = (Bullet::btHingeConstraintDoubleData2 *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btHingeConstraintDoubleData2 **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_useReferenceFrameA = arg2;
}


SWIGEXPORT jint JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btHingeConstraintDoubleData2_1useReferenceFrameA_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Bullet::btHingeConstraintDoubleData2 *arg1 = (Bullet::btHingeConstraintDoubleData2 *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btHingeConstraintDoubleData2 **)&jarg1; 
  result = (int) ((arg1)->m_useReferenceFrameA);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btHingeConstraintDoubleData2_1angularOnly_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Bullet::btHingeConstraintDoubleData2 *arg1 = (Bullet::btHingeConstraintDoubleData2 *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btHingeConstraintDoubleData2 **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_angularOnly = arg2;
}


SWIGEXPORT jint JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btHingeConstraintDoubleData2_1angularOnly_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Bullet::btHingeConstraintDoubleData2 *arg1 = (Bullet::btHingeConstraintDoubleData2 *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btHingeConstraintDoubleData2 **)&jarg1; 
  result = (int) ((arg1)->m_angularOnly);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btHingeConstraintDoubleData2_1enableAngularMotor_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Bullet::btHingeConstraintDoubleData2 *arg1 = (Bullet::btHingeConstraintDoubleData2 *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btHingeConstraintDoubleData2 **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_enableAngularMotor = arg2;
}


SWIGEXPORT jint JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btHingeConstraintDoubleData2_1enableAngularMotor_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Bullet::btHingeConstraintDoubleData2 *arg1 = (Bullet::btHingeConstraintDoubleData2 *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btHingeConstraintDoubleData2 **)&jarg1; 
  result = (int) ((arg1)->m_enableAngularMotor);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btHingeConstraintDoubleData2_1motorTargetVelocity_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  Bullet::btHingeConstraintDoubleData2 *arg1 = (Bullet::btHingeConstraintDoubleData2 *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btHingeConstraintDoubleData2 **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->m_motorTargetVelocity = arg2;
}


SWIGEXPORT jdouble JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btHingeConstraintDoubleData2_1motorTargetVelocity_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  Bullet::btHingeConstraintDoubleData2 *arg1 = (Bullet::btHingeConstraintDoubleData2 *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btHingeConstraintDoubleData2 **)&jarg1; 
  result = (double) ((arg1)->m_motorTargetVelocity);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btHingeConstraintDoubleData2_1maxMotorImpulse_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  Bullet::btHingeConstraintDoubleData2 *arg1 = (Bullet::btHingeConstraintDoubleData2 *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btHingeConstraintDoubleData2 **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->m_maxMotorImpulse = arg2;
}


SWIGEXPORT jdouble JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btHingeConstraintDoubleData2_1maxMotorImpulse_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  Bullet::btHingeConstraintDoubleData2 *arg1 = (Bullet::btHingeConstraintDoubleData2 *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btHingeConstraintDoubleData2 **)&jarg1; 
  result = (double) ((arg1)->m_maxMotorImpulse);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btHingeConstraintDoubleData2_1lowerLimit_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  Bullet::btHingeConstraintDoubleData2 *arg1 = (Bullet::btHingeConstraintDoubleData2 *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btHingeConstraintDoubleData2 **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->m_lowerLimit = arg2;
}


SWIGEXPORT jdouble JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btHingeConstraintDoubleData2_1lowerLimit_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  Bullet::btHingeConstraintDoubleData2 *arg1 = (Bullet::btHingeConstraintDoubleData2 *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btHingeConstraintDoubleData2 **)&jarg1; 
  result = (double) ((arg1)->m_lowerLimit);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btHingeConstraintDoubleData2_1upperLimit_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  Bullet::btHingeConstraintDoubleData2 *arg1 = (Bullet::btHingeConstraintDoubleData2 *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btHingeConstraintDoubleData2 **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->m_upperLimit = arg2;
}


SWIGEXPORT jdouble JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btHingeConstraintDoubleData2_1upperLimit_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  Bullet::btHingeConstraintDoubleData2 *arg1 = (Bullet::btHingeConstraintDoubleData2 *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btHingeConstraintDoubleData2 **)&jarg1; 
  result = (double) ((arg1)->m_upperLimit);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btHingeConstraintDoubleData2_1limitSoftness_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  Bullet::btHingeConstraintDoubleData2 *arg1 = (Bullet::btHingeConstraintDoubleData2 *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btHingeConstraintDoubleData2 **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->m_limitSoftness = arg2;
}


SWIGEXPORT jdouble JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btHingeConstraintDoubleData2_1limitSoftness_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  Bullet::btHingeConstraintDoubleData2 *arg1 = (Bullet::btHingeConstraintDoubleData2 *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btHingeConstraintDoubleData2 **)&jarg1; 
  result = (double) ((arg1)->m_limitSoftness);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btHingeConstraintDoubleData2_1biasFactor_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  Bullet::btHingeConstraintDoubleData2 *arg1 = (Bullet::btHingeConstraintDoubleData2 *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btHingeConstraintDoubleData2 **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->m_biasFactor = arg2;
}


SWIGEXPORT jdouble JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btHingeConstraintDoubleData2_1biasFactor_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  Bullet::btHingeConstraintDoubleData2 *arg1 = (Bullet::btHingeConstraintDoubleData2 *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btHingeConstraintDoubleData2 **)&jarg1; 
  result = (double) ((arg1)->m_biasFactor);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btHingeConstraintDoubleData2_1relaxationFactor_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  Bullet::btHingeConstraintDoubleData2 *arg1 = (Bullet::btHingeConstraintDoubleData2 *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btHingeConstraintDoubleData2 **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->m_relaxationFactor = arg2;
}


SWIGEXPORT jdouble JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btHingeConstraintDoubleData2_1relaxationFactor_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  Bullet::btHingeConstraintDoubleData2 *arg1 = (Bullet::btHingeConstraintDoubleData2 *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btHingeConstraintDoubleData2 **)&jarg1; 
  result = (double) ((arg1)->m_relaxationFactor);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btHingeConstraintDoubleData2_1padding1_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  Bullet::btHingeConstraintDoubleData2 *arg1 = (Bullet::btHingeConstraintDoubleData2 *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btHingeConstraintDoubleData2 **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->m_padding1, (const char *)arg2, 4-1);
      arg1->m_padding1[4-1] = 0;
    } else {
      arg1->m_padding1[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btHingeConstraintDoubleData2_1padding1_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  Bullet::btHingeConstraintDoubleData2 *arg1 = (Bullet::btHingeConstraintDoubleData2 *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btHingeConstraintDoubleData2 **)&jarg1; 
  result = (char *)(char *) ((arg1)->m_padding1);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_new_1btHingeConstraintDoubleData2(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Bullet::btHingeConstraintDoubleData2 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Bullet::btHingeConstraintDoubleData2 *)new Bullet::btHingeConstraintDoubleData2();
  *(Bullet::btHingeConstraintDoubleData2 **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_delete_1btHingeConstraintDoubleData2(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Bullet::btHingeConstraintDoubleData2 *arg1 = (Bullet::btHingeConstraintDoubleData2 *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Bullet::btHingeConstraintDoubleData2 **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btConeTwistConstraintDoubleData_1typeConstraintData_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Bullet::btConeTwistConstraintDoubleData *arg1 = (Bullet::btConeTwistConstraintDoubleData *) 0 ;
  Bullet::btTypedConstraintDoubleData *arg2 = (Bullet::btTypedConstraintDoubleData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Bullet::btConeTwistConstraintDoubleData **)&jarg1; 
  arg2 = *(Bullet::btTypedConstraintDoubleData **)&jarg2; 
  if (arg1) (arg1)->m_typeConstraintData = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btConeTwistConstraintDoubleData_1typeConstraintData_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Bullet::btConeTwistConstraintDoubleData *arg1 = (Bullet::btConeTwistConstraintDoubleData *) 0 ;
  Bullet::btTypedConstraintDoubleData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btConeTwistConstraintDoubleData **)&jarg1; 
  result = (Bullet::btTypedConstraintDoubleData *)& ((arg1)->m_typeConstraintData);
  *(Bullet::btTypedConstraintDoubleData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btConeTwistConstraintDoubleData_1rbAFrame_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Bullet::btConeTwistConstraintDoubleData *arg1 = (Bullet::btConeTwistConstraintDoubleData *) 0 ;
  Bullet::btTransformDoubleData *arg2 = (Bullet::btTransformDoubleData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Bullet::btConeTwistConstraintDoubleData **)&jarg1; 
  arg2 = *(Bullet::btTransformDoubleData **)&jarg2; 
  if (arg1) (arg1)->m_rbAFrame = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btConeTwistConstraintDoubleData_1rbAFrame_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Bullet::btConeTwistConstraintDoubleData *arg1 = (Bullet::btConeTwistConstraintDoubleData *) 0 ;
  Bullet::btTransformDoubleData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btConeTwistConstraintDoubleData **)&jarg1; 
  result = (Bullet::btTransformDoubleData *)& ((arg1)->m_rbAFrame);
  *(Bullet::btTransformDoubleData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btConeTwistConstraintDoubleData_1rbBFrame_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Bullet::btConeTwistConstraintDoubleData *arg1 = (Bullet::btConeTwistConstraintDoubleData *) 0 ;
  Bullet::btTransformDoubleData *arg2 = (Bullet::btTransformDoubleData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Bullet::btConeTwistConstraintDoubleData **)&jarg1; 
  arg2 = *(Bullet::btTransformDoubleData **)&jarg2; 
  if (arg1) (arg1)->m_rbBFrame = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btConeTwistConstraintDoubleData_1rbBFrame_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Bullet::btConeTwistConstraintDoubleData *arg1 = (Bullet::btConeTwistConstraintDoubleData *) 0 ;
  Bullet::btTransformDoubleData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btConeTwistConstraintDoubleData **)&jarg1; 
  result = (Bullet::btTransformDoubleData *)& ((arg1)->m_rbBFrame);
  *(Bullet::btTransformDoubleData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btConeTwistConstraintDoubleData_1swingSpan1_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  Bullet::btConeTwistConstraintDoubleData *arg1 = (Bullet::btConeTwistConstraintDoubleData *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btConeTwistConstraintDoubleData **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->m_swingSpan1 = arg2;
}


SWIGEXPORT jdouble JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btConeTwistConstraintDoubleData_1swingSpan1_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  Bullet::btConeTwistConstraintDoubleData *arg1 = (Bullet::btConeTwistConstraintDoubleData *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btConeTwistConstraintDoubleData **)&jarg1; 
  result = (double) ((arg1)->m_swingSpan1);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btConeTwistConstraintDoubleData_1swingSpan2_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  Bullet::btConeTwistConstraintDoubleData *arg1 = (Bullet::btConeTwistConstraintDoubleData *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btConeTwistConstraintDoubleData **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->m_swingSpan2 = arg2;
}


SWIGEXPORT jdouble JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btConeTwistConstraintDoubleData_1swingSpan2_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  Bullet::btConeTwistConstraintDoubleData *arg1 = (Bullet::btConeTwistConstraintDoubleData *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btConeTwistConstraintDoubleData **)&jarg1; 
  result = (double) ((arg1)->m_swingSpan2);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btConeTwistConstraintDoubleData_1twistSpan_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  Bullet::btConeTwistConstraintDoubleData *arg1 = (Bullet::btConeTwistConstraintDoubleData *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btConeTwistConstraintDoubleData **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->m_twistSpan = arg2;
}


SWIGEXPORT jdouble JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btConeTwistConstraintDoubleData_1twistSpan_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  Bullet::btConeTwistConstraintDoubleData *arg1 = (Bullet::btConeTwistConstraintDoubleData *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btConeTwistConstraintDoubleData **)&jarg1; 
  result = (double) ((arg1)->m_twistSpan);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btConeTwistConstraintDoubleData_1limitSoftness_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  Bullet::btConeTwistConstraintDoubleData *arg1 = (Bullet::btConeTwistConstraintDoubleData *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btConeTwistConstraintDoubleData **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->m_limitSoftness = arg2;
}


SWIGEXPORT jdouble JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btConeTwistConstraintDoubleData_1limitSoftness_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  Bullet::btConeTwistConstraintDoubleData *arg1 = (Bullet::btConeTwistConstraintDoubleData *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btConeTwistConstraintDoubleData **)&jarg1; 
  result = (double) ((arg1)->m_limitSoftness);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btConeTwistConstraintDoubleData_1biasFactor_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  Bullet::btConeTwistConstraintDoubleData *arg1 = (Bullet::btConeTwistConstraintDoubleData *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btConeTwistConstraintDoubleData **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->m_biasFactor = arg2;
}


SWIGEXPORT jdouble JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btConeTwistConstraintDoubleData_1biasFactor_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  Bullet::btConeTwistConstraintDoubleData *arg1 = (Bullet::btConeTwistConstraintDoubleData *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btConeTwistConstraintDoubleData **)&jarg1; 
  result = (double) ((arg1)->m_biasFactor);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btConeTwistConstraintDoubleData_1relaxationFactor_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  Bullet::btConeTwistConstraintDoubleData *arg1 = (Bullet::btConeTwistConstraintDoubleData *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btConeTwistConstraintDoubleData **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->m_relaxationFactor = arg2;
}


SWIGEXPORT jdouble JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btConeTwistConstraintDoubleData_1relaxationFactor_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  Bullet::btConeTwistConstraintDoubleData *arg1 = (Bullet::btConeTwistConstraintDoubleData *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btConeTwistConstraintDoubleData **)&jarg1; 
  result = (double) ((arg1)->m_relaxationFactor);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btConeTwistConstraintDoubleData_1damping_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  Bullet::btConeTwistConstraintDoubleData *arg1 = (Bullet::btConeTwistConstraintDoubleData *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btConeTwistConstraintDoubleData **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->m_damping = arg2;
}


SWIGEXPORT jdouble JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btConeTwistConstraintDoubleData_1damping_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  Bullet::btConeTwistConstraintDoubleData *arg1 = (Bullet::btConeTwistConstraintDoubleData *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btConeTwistConstraintDoubleData **)&jarg1; 
  result = (double) ((arg1)->m_damping);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_new_1btConeTwistConstraintDoubleData(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Bullet::btConeTwistConstraintDoubleData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Bullet::btConeTwistConstraintDoubleData *)new Bullet::btConeTwistConstraintDoubleData();
  *(Bullet::btConeTwistConstraintDoubleData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_delete_1btConeTwistConstraintDoubleData(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Bullet::btConeTwistConstraintDoubleData *arg1 = (Bullet::btConeTwistConstraintDoubleData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Bullet::btConeTwistConstraintDoubleData **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btConeTwistConstraintData_1typeConstraintData_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Bullet::btConeTwistConstraintData *arg1 = (Bullet::btConeTwistConstraintData *) 0 ;
  Bullet::btTypedConstraintData *arg2 = (Bullet::btTypedConstraintData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Bullet::btConeTwistConstraintData **)&jarg1; 
  arg2 = *(Bullet::btTypedConstraintData **)&jarg2; 
  if (arg1) (arg1)->m_typeConstraintData = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btConeTwistConstraintData_1typeConstraintData_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Bullet::btConeTwistConstraintData *arg1 = (Bullet::btConeTwistConstraintData *) 0 ;
  Bullet::btTypedConstraintData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btConeTwistConstraintData **)&jarg1; 
  result = (Bullet::btTypedConstraintData *)& ((arg1)->m_typeConstraintData);
  *(Bullet::btTypedConstraintData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btConeTwistConstraintData_1rbAFrame_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Bullet::btConeTwistConstraintData *arg1 = (Bullet::btConeTwistConstraintData *) 0 ;
  Bullet::btTransformFloatData *arg2 = (Bullet::btTransformFloatData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Bullet::btConeTwistConstraintData **)&jarg1; 
  arg2 = *(Bullet::btTransformFloatData **)&jarg2; 
  if (arg1) (arg1)->m_rbAFrame = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btConeTwistConstraintData_1rbAFrame_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Bullet::btConeTwistConstraintData *arg1 = (Bullet::btConeTwistConstraintData *) 0 ;
  Bullet::btTransformFloatData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btConeTwistConstraintData **)&jarg1; 
  result = (Bullet::btTransformFloatData *)& ((arg1)->m_rbAFrame);
  *(Bullet::btTransformFloatData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btConeTwistConstraintData_1rbBFrame_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Bullet::btConeTwistConstraintData *arg1 = (Bullet::btConeTwistConstraintData *) 0 ;
  Bullet::btTransformFloatData *arg2 = (Bullet::btTransformFloatData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Bullet::btConeTwistConstraintData **)&jarg1; 
  arg2 = *(Bullet::btTransformFloatData **)&jarg2; 
  if (arg1) (arg1)->m_rbBFrame = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btConeTwistConstraintData_1rbBFrame_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Bullet::btConeTwistConstraintData *arg1 = (Bullet::btConeTwistConstraintData *) 0 ;
  Bullet::btTransformFloatData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btConeTwistConstraintData **)&jarg1; 
  result = (Bullet::btTransformFloatData *)& ((arg1)->m_rbBFrame);
  *(Bullet::btTransformFloatData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btConeTwistConstraintData_1swingSpan1_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  Bullet::btConeTwistConstraintData *arg1 = (Bullet::btConeTwistConstraintData *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btConeTwistConstraintData **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->m_swingSpan1 = arg2;
}


SWIGEXPORT jfloat JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btConeTwistConstraintData_1swingSpan1_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  Bullet::btConeTwistConstraintData *arg1 = (Bullet::btConeTwistConstraintData *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btConeTwistConstraintData **)&jarg1; 
  result = (float) ((arg1)->m_swingSpan1);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btConeTwistConstraintData_1swingSpan2_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  Bullet::btConeTwistConstraintData *arg1 = (Bullet::btConeTwistConstraintData *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btConeTwistConstraintData **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->m_swingSpan2 = arg2;
}


SWIGEXPORT jfloat JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btConeTwistConstraintData_1swingSpan2_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  Bullet::btConeTwistConstraintData *arg1 = (Bullet::btConeTwistConstraintData *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btConeTwistConstraintData **)&jarg1; 
  result = (float) ((arg1)->m_swingSpan2);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btConeTwistConstraintData_1twistSpan_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  Bullet::btConeTwistConstraintData *arg1 = (Bullet::btConeTwistConstraintData *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btConeTwistConstraintData **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->m_twistSpan = arg2;
}


SWIGEXPORT jfloat JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btConeTwistConstraintData_1twistSpan_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  Bullet::btConeTwistConstraintData *arg1 = (Bullet::btConeTwistConstraintData *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btConeTwistConstraintData **)&jarg1; 
  result = (float) ((arg1)->m_twistSpan);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btConeTwistConstraintData_1limitSoftness_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  Bullet::btConeTwistConstraintData *arg1 = (Bullet::btConeTwistConstraintData *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btConeTwistConstraintData **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->m_limitSoftness = arg2;
}


SWIGEXPORT jfloat JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btConeTwistConstraintData_1limitSoftness_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  Bullet::btConeTwistConstraintData *arg1 = (Bullet::btConeTwistConstraintData *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btConeTwistConstraintData **)&jarg1; 
  result = (float) ((arg1)->m_limitSoftness);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btConeTwistConstraintData_1biasFactor_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  Bullet::btConeTwistConstraintData *arg1 = (Bullet::btConeTwistConstraintData *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btConeTwistConstraintData **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->m_biasFactor = arg2;
}


SWIGEXPORT jfloat JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btConeTwistConstraintData_1biasFactor_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  Bullet::btConeTwistConstraintData *arg1 = (Bullet::btConeTwistConstraintData *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btConeTwistConstraintData **)&jarg1; 
  result = (float) ((arg1)->m_biasFactor);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btConeTwistConstraintData_1relaxationFactor_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  Bullet::btConeTwistConstraintData *arg1 = (Bullet::btConeTwistConstraintData *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btConeTwistConstraintData **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->m_relaxationFactor = arg2;
}


SWIGEXPORT jfloat JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btConeTwistConstraintData_1relaxationFactor_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  Bullet::btConeTwistConstraintData *arg1 = (Bullet::btConeTwistConstraintData *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btConeTwistConstraintData **)&jarg1; 
  result = (float) ((arg1)->m_relaxationFactor);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btConeTwistConstraintData_1damping_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  Bullet::btConeTwistConstraintData *arg1 = (Bullet::btConeTwistConstraintData *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btConeTwistConstraintData **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->m_damping = arg2;
}


SWIGEXPORT jfloat JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btConeTwistConstraintData_1damping_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  Bullet::btConeTwistConstraintData *arg1 = (Bullet::btConeTwistConstraintData *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btConeTwistConstraintData **)&jarg1; 
  result = (float) ((arg1)->m_damping);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btConeTwistConstraintData_1pad_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  Bullet::btConeTwistConstraintData *arg1 = (Bullet::btConeTwistConstraintData *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btConeTwistConstraintData **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->m_pad, (const char *)arg2, 4-1);
      arg1->m_pad[4-1] = 0;
    } else {
      arg1->m_pad[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btConeTwistConstraintData_1pad_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  Bullet::btConeTwistConstraintData *arg1 = (Bullet::btConeTwistConstraintData *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btConeTwistConstraintData **)&jarg1; 
  result = (char *)(char *) ((arg1)->m_pad);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_new_1btConeTwistConstraintData(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Bullet::btConeTwistConstraintData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Bullet::btConeTwistConstraintData *)new Bullet::btConeTwistConstraintData();
  *(Bullet::btConeTwistConstraintData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_delete_1btConeTwistConstraintData(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Bullet::btConeTwistConstraintData *arg1 = (Bullet::btConeTwistConstraintData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Bullet::btConeTwistConstraintData **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btGeneric6DofConstraintData_1typeConstraintData_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Bullet::btGeneric6DofConstraintData *arg1 = (Bullet::btGeneric6DofConstraintData *) 0 ;
  Bullet::btTypedConstraintData *arg2 = (Bullet::btTypedConstraintData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Bullet::btGeneric6DofConstraintData **)&jarg1; 
  arg2 = *(Bullet::btTypedConstraintData **)&jarg2; 
  if (arg1) (arg1)->m_typeConstraintData = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btGeneric6DofConstraintData_1typeConstraintData_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Bullet::btGeneric6DofConstraintData *arg1 = (Bullet::btGeneric6DofConstraintData *) 0 ;
  Bullet::btTypedConstraintData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btGeneric6DofConstraintData **)&jarg1; 
  result = (Bullet::btTypedConstraintData *)& ((arg1)->m_typeConstraintData);
  *(Bullet::btTypedConstraintData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btGeneric6DofConstraintData_1rbAFrame_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Bullet::btGeneric6DofConstraintData *arg1 = (Bullet::btGeneric6DofConstraintData *) 0 ;
  Bullet::btTransformFloatData *arg2 = (Bullet::btTransformFloatData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Bullet::btGeneric6DofConstraintData **)&jarg1; 
  arg2 = *(Bullet::btTransformFloatData **)&jarg2; 
  if (arg1) (arg1)->m_rbAFrame = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btGeneric6DofConstraintData_1rbAFrame_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Bullet::btGeneric6DofConstraintData *arg1 = (Bullet::btGeneric6DofConstraintData *) 0 ;
  Bullet::btTransformFloatData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btGeneric6DofConstraintData **)&jarg1; 
  result = (Bullet::btTransformFloatData *)& ((arg1)->m_rbAFrame);
  *(Bullet::btTransformFloatData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btGeneric6DofConstraintData_1rbBFrame_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Bullet::btGeneric6DofConstraintData *arg1 = (Bullet::btGeneric6DofConstraintData *) 0 ;
  Bullet::btTransformFloatData *arg2 = (Bullet::btTransformFloatData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Bullet::btGeneric6DofConstraintData **)&jarg1; 
  arg2 = *(Bullet::btTransformFloatData **)&jarg2; 
  if (arg1) (arg1)->m_rbBFrame = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btGeneric6DofConstraintData_1rbBFrame_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Bullet::btGeneric6DofConstraintData *arg1 = (Bullet::btGeneric6DofConstraintData *) 0 ;
  Bullet::btTransformFloatData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btGeneric6DofConstraintData **)&jarg1; 
  result = (Bullet::btTransformFloatData *)& ((arg1)->m_rbBFrame);
  *(Bullet::btTransformFloatData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btGeneric6DofConstraintData_1linearUpperLimit_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Bullet::btGeneric6DofConstraintData *arg1 = (Bullet::btGeneric6DofConstraintData *) 0 ;
  Bullet::btVector3FloatData *arg2 = (Bullet::btVector3FloatData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Bullet::btGeneric6DofConstraintData **)&jarg1; 
  arg2 = *(Bullet::btVector3FloatData **)&jarg2; 
  if (arg1) (arg1)->m_linearUpperLimit = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btGeneric6DofConstraintData_1linearUpperLimit_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Bullet::btGeneric6DofConstraintData *arg1 = (Bullet::btGeneric6DofConstraintData *) 0 ;
  Bullet::btVector3FloatData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btGeneric6DofConstraintData **)&jarg1; 
  result = (Bullet::btVector3FloatData *)& ((arg1)->m_linearUpperLimit);
  *(Bullet::btVector3FloatData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btGeneric6DofConstraintData_1linearLowerLimit_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Bullet::btGeneric6DofConstraintData *arg1 = (Bullet::btGeneric6DofConstraintData *) 0 ;
  Bullet::btVector3FloatData *arg2 = (Bullet::btVector3FloatData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Bullet::btGeneric6DofConstraintData **)&jarg1; 
  arg2 = *(Bullet::btVector3FloatData **)&jarg2; 
  if (arg1) (arg1)->m_linearLowerLimit = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btGeneric6DofConstraintData_1linearLowerLimit_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Bullet::btGeneric6DofConstraintData *arg1 = (Bullet::btGeneric6DofConstraintData *) 0 ;
  Bullet::btVector3FloatData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btGeneric6DofConstraintData **)&jarg1; 
  result = (Bullet::btVector3FloatData *)& ((arg1)->m_linearLowerLimit);
  *(Bullet::btVector3FloatData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btGeneric6DofConstraintData_1angularUpperLimit_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Bullet::btGeneric6DofConstraintData *arg1 = (Bullet::btGeneric6DofConstraintData *) 0 ;
  Bullet::btVector3FloatData *arg2 = (Bullet::btVector3FloatData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Bullet::btGeneric6DofConstraintData **)&jarg1; 
  arg2 = *(Bullet::btVector3FloatData **)&jarg2; 
  if (arg1) (arg1)->m_angularUpperLimit = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btGeneric6DofConstraintData_1angularUpperLimit_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Bullet::btGeneric6DofConstraintData *arg1 = (Bullet::btGeneric6DofConstraintData *) 0 ;
  Bullet::btVector3FloatData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btGeneric6DofConstraintData **)&jarg1; 
  result = (Bullet::btVector3FloatData *)& ((arg1)->m_angularUpperLimit);
  *(Bullet::btVector3FloatData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btGeneric6DofConstraintData_1angularLowerLimit_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Bullet::btGeneric6DofConstraintData *arg1 = (Bullet::btGeneric6DofConstraintData *) 0 ;
  Bullet::btVector3FloatData *arg2 = (Bullet::btVector3FloatData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Bullet::btGeneric6DofConstraintData **)&jarg1; 
  arg2 = *(Bullet::btVector3FloatData **)&jarg2; 
  if (arg1) (arg1)->m_angularLowerLimit = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btGeneric6DofConstraintData_1angularLowerLimit_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Bullet::btGeneric6DofConstraintData *arg1 = (Bullet::btGeneric6DofConstraintData *) 0 ;
  Bullet::btVector3FloatData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btGeneric6DofConstraintData **)&jarg1; 
  result = (Bullet::btVector3FloatData *)& ((arg1)->m_angularLowerLimit);
  *(Bullet::btVector3FloatData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btGeneric6DofConstraintData_1useLinearReferenceFrameA_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Bullet::btGeneric6DofConstraintData *arg1 = (Bullet::btGeneric6DofConstraintData *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btGeneric6DofConstraintData **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_useLinearReferenceFrameA = arg2;
}


SWIGEXPORT jint JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btGeneric6DofConstraintData_1useLinearReferenceFrameA_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Bullet::btGeneric6DofConstraintData *arg1 = (Bullet::btGeneric6DofConstraintData *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btGeneric6DofConstraintData **)&jarg1; 
  result = (int) ((arg1)->m_useLinearReferenceFrameA);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btGeneric6DofConstraintData_1useOffsetForConstraintFrame_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Bullet::btGeneric6DofConstraintData *arg1 = (Bullet::btGeneric6DofConstraintData *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btGeneric6DofConstraintData **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_useOffsetForConstraintFrame = arg2;
}


SWIGEXPORT jint JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btGeneric6DofConstraintData_1useOffsetForConstraintFrame_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Bullet::btGeneric6DofConstraintData *arg1 = (Bullet::btGeneric6DofConstraintData *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btGeneric6DofConstraintData **)&jarg1; 
  result = (int) ((arg1)->m_useOffsetForConstraintFrame);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_new_1btGeneric6DofConstraintData(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Bullet::btGeneric6DofConstraintData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Bullet::btGeneric6DofConstraintData *)new Bullet::btGeneric6DofConstraintData();
  *(Bullet::btGeneric6DofConstraintData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_delete_1btGeneric6DofConstraintData(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Bullet::btGeneric6DofConstraintData *arg1 = (Bullet::btGeneric6DofConstraintData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Bullet::btGeneric6DofConstraintData **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btGeneric6DofConstraintDoubleData2_1typeConstraintData_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Bullet::btGeneric6DofConstraintDoubleData2 *arg1 = (Bullet::btGeneric6DofConstraintDoubleData2 *) 0 ;
  Bullet::btTypedConstraintDoubleData *arg2 = (Bullet::btTypedConstraintDoubleData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Bullet::btGeneric6DofConstraintDoubleData2 **)&jarg1; 
  arg2 = *(Bullet::btTypedConstraintDoubleData **)&jarg2; 
  if (arg1) (arg1)->m_typeConstraintData = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btGeneric6DofConstraintDoubleData2_1typeConstraintData_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Bullet::btGeneric6DofConstraintDoubleData2 *arg1 = (Bullet::btGeneric6DofConstraintDoubleData2 *) 0 ;
  Bullet::btTypedConstraintDoubleData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btGeneric6DofConstraintDoubleData2 **)&jarg1; 
  result = (Bullet::btTypedConstraintDoubleData *)& ((arg1)->m_typeConstraintData);
  *(Bullet::btTypedConstraintDoubleData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btGeneric6DofConstraintDoubleData2_1rbAFrame_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Bullet::btGeneric6DofConstraintDoubleData2 *arg1 = (Bullet::btGeneric6DofConstraintDoubleData2 *) 0 ;
  Bullet::btTransformDoubleData *arg2 = (Bullet::btTransformDoubleData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Bullet::btGeneric6DofConstraintDoubleData2 **)&jarg1; 
  arg2 = *(Bullet::btTransformDoubleData **)&jarg2; 
  if (arg1) (arg1)->m_rbAFrame = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btGeneric6DofConstraintDoubleData2_1rbAFrame_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Bullet::btGeneric6DofConstraintDoubleData2 *arg1 = (Bullet::btGeneric6DofConstraintDoubleData2 *) 0 ;
  Bullet::btTransformDoubleData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btGeneric6DofConstraintDoubleData2 **)&jarg1; 
  result = (Bullet::btTransformDoubleData *)& ((arg1)->m_rbAFrame);
  *(Bullet::btTransformDoubleData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btGeneric6DofConstraintDoubleData2_1rbBFrame_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Bullet::btGeneric6DofConstraintDoubleData2 *arg1 = (Bullet::btGeneric6DofConstraintDoubleData2 *) 0 ;
  Bullet::btTransformDoubleData *arg2 = (Bullet::btTransformDoubleData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Bullet::btGeneric6DofConstraintDoubleData2 **)&jarg1; 
  arg2 = *(Bullet::btTransformDoubleData **)&jarg2; 
  if (arg1) (arg1)->m_rbBFrame = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btGeneric6DofConstraintDoubleData2_1rbBFrame_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Bullet::btGeneric6DofConstraintDoubleData2 *arg1 = (Bullet::btGeneric6DofConstraintDoubleData2 *) 0 ;
  Bullet::btTransformDoubleData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btGeneric6DofConstraintDoubleData2 **)&jarg1; 
  result = (Bullet::btTransformDoubleData *)& ((arg1)->m_rbBFrame);
  *(Bullet::btTransformDoubleData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btGeneric6DofConstraintDoubleData2_1linearUpperLimit_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Bullet::btGeneric6DofConstraintDoubleData2 *arg1 = (Bullet::btGeneric6DofConstraintDoubleData2 *) 0 ;
  Bullet::btVector3DoubleData *arg2 = (Bullet::btVector3DoubleData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Bullet::btGeneric6DofConstraintDoubleData2 **)&jarg1; 
  arg2 = *(Bullet::btVector3DoubleData **)&jarg2; 
  if (arg1) (arg1)->m_linearUpperLimit = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btGeneric6DofConstraintDoubleData2_1linearUpperLimit_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Bullet::btGeneric6DofConstraintDoubleData2 *arg1 = (Bullet::btGeneric6DofConstraintDoubleData2 *) 0 ;
  Bullet::btVector3DoubleData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btGeneric6DofConstraintDoubleData2 **)&jarg1; 
  result = (Bullet::btVector3DoubleData *)& ((arg1)->m_linearUpperLimit);
  *(Bullet::btVector3DoubleData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btGeneric6DofConstraintDoubleData2_1linearLowerLimit_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Bullet::btGeneric6DofConstraintDoubleData2 *arg1 = (Bullet::btGeneric6DofConstraintDoubleData2 *) 0 ;
  Bullet::btVector3DoubleData *arg2 = (Bullet::btVector3DoubleData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Bullet::btGeneric6DofConstraintDoubleData2 **)&jarg1; 
  arg2 = *(Bullet::btVector3DoubleData **)&jarg2; 
  if (arg1) (arg1)->m_linearLowerLimit = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btGeneric6DofConstraintDoubleData2_1linearLowerLimit_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Bullet::btGeneric6DofConstraintDoubleData2 *arg1 = (Bullet::btGeneric6DofConstraintDoubleData2 *) 0 ;
  Bullet::btVector3DoubleData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btGeneric6DofConstraintDoubleData2 **)&jarg1; 
  result = (Bullet::btVector3DoubleData *)& ((arg1)->m_linearLowerLimit);
  *(Bullet::btVector3DoubleData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btGeneric6DofConstraintDoubleData2_1angularUpperLimit_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Bullet::btGeneric6DofConstraintDoubleData2 *arg1 = (Bullet::btGeneric6DofConstraintDoubleData2 *) 0 ;
  Bullet::btVector3DoubleData *arg2 = (Bullet::btVector3DoubleData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Bullet::btGeneric6DofConstraintDoubleData2 **)&jarg1; 
  arg2 = *(Bullet::btVector3DoubleData **)&jarg2; 
  if (arg1) (arg1)->m_angularUpperLimit = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btGeneric6DofConstraintDoubleData2_1angularUpperLimit_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Bullet::btGeneric6DofConstraintDoubleData2 *arg1 = (Bullet::btGeneric6DofConstraintDoubleData2 *) 0 ;
  Bullet::btVector3DoubleData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btGeneric6DofConstraintDoubleData2 **)&jarg1; 
  result = (Bullet::btVector3DoubleData *)& ((arg1)->m_angularUpperLimit);
  *(Bullet::btVector3DoubleData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btGeneric6DofConstraintDoubleData2_1angularLowerLimit_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Bullet::btGeneric6DofConstraintDoubleData2 *arg1 = (Bullet::btGeneric6DofConstraintDoubleData2 *) 0 ;
  Bullet::btVector3DoubleData *arg2 = (Bullet::btVector3DoubleData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Bullet::btGeneric6DofConstraintDoubleData2 **)&jarg1; 
  arg2 = *(Bullet::btVector3DoubleData **)&jarg2; 
  if (arg1) (arg1)->m_angularLowerLimit = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btGeneric6DofConstraintDoubleData2_1angularLowerLimit_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Bullet::btGeneric6DofConstraintDoubleData2 *arg1 = (Bullet::btGeneric6DofConstraintDoubleData2 *) 0 ;
  Bullet::btVector3DoubleData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btGeneric6DofConstraintDoubleData2 **)&jarg1; 
  result = (Bullet::btVector3DoubleData *)& ((arg1)->m_angularLowerLimit);
  *(Bullet::btVector3DoubleData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btGeneric6DofConstraintDoubleData2_1useLinearReferenceFrameA_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Bullet::btGeneric6DofConstraintDoubleData2 *arg1 = (Bullet::btGeneric6DofConstraintDoubleData2 *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btGeneric6DofConstraintDoubleData2 **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_useLinearReferenceFrameA = arg2;
}


SWIGEXPORT jint JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btGeneric6DofConstraintDoubleData2_1useLinearReferenceFrameA_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Bullet::btGeneric6DofConstraintDoubleData2 *arg1 = (Bullet::btGeneric6DofConstraintDoubleData2 *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btGeneric6DofConstraintDoubleData2 **)&jarg1; 
  result = (int) ((arg1)->m_useLinearReferenceFrameA);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btGeneric6DofConstraintDoubleData2_1useOffsetForConstraintFrame_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Bullet::btGeneric6DofConstraintDoubleData2 *arg1 = (Bullet::btGeneric6DofConstraintDoubleData2 *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btGeneric6DofConstraintDoubleData2 **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_useOffsetForConstraintFrame = arg2;
}


SWIGEXPORT jint JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btGeneric6DofConstraintDoubleData2_1useOffsetForConstraintFrame_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Bullet::btGeneric6DofConstraintDoubleData2 *arg1 = (Bullet::btGeneric6DofConstraintDoubleData2 *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btGeneric6DofConstraintDoubleData2 **)&jarg1; 
  result = (int) ((arg1)->m_useOffsetForConstraintFrame);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_new_1btGeneric6DofConstraintDoubleData2(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Bullet::btGeneric6DofConstraintDoubleData2 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Bullet::btGeneric6DofConstraintDoubleData2 *)new Bullet::btGeneric6DofConstraintDoubleData2();
  *(Bullet::btGeneric6DofConstraintDoubleData2 **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_delete_1btGeneric6DofConstraintDoubleData2(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Bullet::btGeneric6DofConstraintDoubleData2 *arg1 = (Bullet::btGeneric6DofConstraintDoubleData2 *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Bullet::btGeneric6DofConstraintDoubleData2 **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btGeneric6DofSpringConstraintData_16dofData_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Bullet::btGeneric6DofSpringConstraintData *arg1 = (Bullet::btGeneric6DofSpringConstraintData *) 0 ;
  Bullet::btGeneric6DofConstraintData *arg2 = (Bullet::btGeneric6DofConstraintData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Bullet::btGeneric6DofSpringConstraintData **)&jarg1; 
  arg2 = *(Bullet::btGeneric6DofConstraintData **)&jarg2; 
  if (arg1) (arg1)->m_6dofData = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btGeneric6DofSpringConstraintData_16dofData_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Bullet::btGeneric6DofSpringConstraintData *arg1 = (Bullet::btGeneric6DofSpringConstraintData *) 0 ;
  Bullet::btGeneric6DofConstraintData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btGeneric6DofSpringConstraintData **)&jarg1; 
  result = (Bullet::btGeneric6DofConstraintData *)& ((arg1)->m_6dofData);
  *(Bullet::btGeneric6DofConstraintData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btGeneric6DofSpringConstraintData_1springEnabled_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jintArray jarg2) {
  Bullet::btGeneric6DofSpringConstraintData *arg1 = (Bullet::btGeneric6DofSpringConstraintData *) 0 ;
  int *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btGeneric6DofSpringConstraintData **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != 6) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  arg2 = (int *)jenv->GetPrimitiveArrayCritical(jarg2, 0); 
  {
    size_t ii;
    int *b = (int *) arg1->m_springEnabled;
    for (ii = 0; ii < (size_t)6; ii++) b[ii] = *((int *) arg2 + ii);
  }
  jenv->ReleasePrimitiveArrayCritical(jarg2, (int *)arg2, 0); 
}


SWIGEXPORT jintArray JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btGeneric6DofSpringConstraintData_1springEnabled_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jintArray jresult = 0 ;
  Bullet::btGeneric6DofSpringConstraintData *arg1 = (Bullet::btGeneric6DofSpringConstraintData *) 0 ;
  int *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btGeneric6DofSpringConstraintData **)&jarg1; 
  result = (int *)(int *) ((arg1)->m_springEnabled);
  /*jresult = SWIG_JavaArrayOut##Int(jenv, (int *)result, 6);*/ 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btGeneric6DofSpringConstraintData_1equilibriumPoint_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloatArray jarg2) {
  Bullet::btGeneric6DofSpringConstraintData *arg1 = (Bullet::btGeneric6DofSpringConstraintData *) 0 ;
  float *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btGeneric6DofSpringConstraintData **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != 6) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  arg2 = (float *)jenv->GetPrimitiveArrayCritical(jarg2, 0); 
  {
    size_t ii;
    float *b = (float *) arg1->m_equilibriumPoint;
    for (ii = 0; ii < (size_t)6; ii++) b[ii] = *((float *) arg2 + ii);
  }
  jenv->ReleasePrimitiveArrayCritical(jarg2, (float *)arg2, 0); 
}


SWIGEXPORT jfloatArray JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btGeneric6DofSpringConstraintData_1equilibriumPoint_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloatArray jresult = 0 ;
  Bullet::btGeneric6DofSpringConstraintData *arg1 = (Bullet::btGeneric6DofSpringConstraintData *) 0 ;
  float *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btGeneric6DofSpringConstraintData **)&jarg1; 
  result = (float *)(float *) ((arg1)->m_equilibriumPoint);
  /*jresult = SWIG_JavaArrayOut##Float(jenv, (float *)result, 6);*/ 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btGeneric6DofSpringConstraintData_1springStiffness_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloatArray jarg2) {
  Bullet::btGeneric6DofSpringConstraintData *arg1 = (Bullet::btGeneric6DofSpringConstraintData *) 0 ;
  float *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btGeneric6DofSpringConstraintData **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != 6) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  arg2 = (float *)jenv->GetPrimitiveArrayCritical(jarg2, 0); 
  {
    size_t ii;
    float *b = (float *) arg1->m_springStiffness;
    for (ii = 0; ii < (size_t)6; ii++) b[ii] = *((float *) arg2 + ii);
  }
  jenv->ReleasePrimitiveArrayCritical(jarg2, (float *)arg2, 0); 
}


SWIGEXPORT jfloatArray JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btGeneric6DofSpringConstraintData_1springStiffness_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloatArray jresult = 0 ;
  Bullet::btGeneric6DofSpringConstraintData *arg1 = (Bullet::btGeneric6DofSpringConstraintData *) 0 ;
  float *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btGeneric6DofSpringConstraintData **)&jarg1; 
  result = (float *)(float *) ((arg1)->m_springStiffness);
  /*jresult = SWIG_JavaArrayOut##Float(jenv, (float *)result, 6);*/ 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btGeneric6DofSpringConstraintData_1springDamping_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloatArray jarg2) {
  Bullet::btGeneric6DofSpringConstraintData *arg1 = (Bullet::btGeneric6DofSpringConstraintData *) 0 ;
  float *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btGeneric6DofSpringConstraintData **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != 6) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  arg2 = (float *)jenv->GetPrimitiveArrayCritical(jarg2, 0); 
  {
    size_t ii;
    float *b = (float *) arg1->m_springDamping;
    for (ii = 0; ii < (size_t)6; ii++) b[ii] = *((float *) arg2 + ii);
  }
  jenv->ReleasePrimitiveArrayCritical(jarg2, (float *)arg2, 0); 
}


SWIGEXPORT jfloatArray JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btGeneric6DofSpringConstraintData_1springDamping_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloatArray jresult = 0 ;
  Bullet::btGeneric6DofSpringConstraintData *arg1 = (Bullet::btGeneric6DofSpringConstraintData *) 0 ;
  float *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btGeneric6DofSpringConstraintData **)&jarg1; 
  result = (float *)(float *) ((arg1)->m_springDamping);
  /*jresult = SWIG_JavaArrayOut##Float(jenv, (float *)result, 6);*/ 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_new_1btGeneric6DofSpringConstraintData(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Bullet::btGeneric6DofSpringConstraintData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Bullet::btGeneric6DofSpringConstraintData *)new Bullet::btGeneric6DofSpringConstraintData();
  *(Bullet::btGeneric6DofSpringConstraintData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_delete_1btGeneric6DofSpringConstraintData(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Bullet::btGeneric6DofSpringConstraintData *arg1 = (Bullet::btGeneric6DofSpringConstraintData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Bullet::btGeneric6DofSpringConstraintData **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btGeneric6DofSpringConstraintDoubleData2_16dofData_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Bullet::btGeneric6DofSpringConstraintDoubleData2 *arg1 = (Bullet::btGeneric6DofSpringConstraintDoubleData2 *) 0 ;
  Bullet::btGeneric6DofConstraintDoubleData2 *arg2 = (Bullet::btGeneric6DofConstraintDoubleData2 *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Bullet::btGeneric6DofSpringConstraintDoubleData2 **)&jarg1; 
  arg2 = *(Bullet::btGeneric6DofConstraintDoubleData2 **)&jarg2; 
  if (arg1) (arg1)->m_6dofData = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btGeneric6DofSpringConstraintDoubleData2_16dofData_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Bullet::btGeneric6DofSpringConstraintDoubleData2 *arg1 = (Bullet::btGeneric6DofSpringConstraintDoubleData2 *) 0 ;
  Bullet::btGeneric6DofConstraintDoubleData2 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btGeneric6DofSpringConstraintDoubleData2 **)&jarg1; 
  result = (Bullet::btGeneric6DofConstraintDoubleData2 *)& ((arg1)->m_6dofData);
  *(Bullet::btGeneric6DofConstraintDoubleData2 **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btGeneric6DofSpringConstraintDoubleData2_1springEnabled_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jintArray jarg2) {
  Bullet::btGeneric6DofSpringConstraintDoubleData2 *arg1 = (Bullet::btGeneric6DofSpringConstraintDoubleData2 *) 0 ;
  int *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btGeneric6DofSpringConstraintDoubleData2 **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != 6) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  arg2 = (int *)jenv->GetPrimitiveArrayCritical(jarg2, 0); 
  {
    size_t ii;
    int *b = (int *) arg1->m_springEnabled;
    for (ii = 0; ii < (size_t)6; ii++) b[ii] = *((int *) arg2 + ii);
  }
  jenv->ReleasePrimitiveArrayCritical(jarg2, (int *)arg2, 0); 
}


SWIGEXPORT jintArray JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btGeneric6DofSpringConstraintDoubleData2_1springEnabled_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jintArray jresult = 0 ;
  Bullet::btGeneric6DofSpringConstraintDoubleData2 *arg1 = (Bullet::btGeneric6DofSpringConstraintDoubleData2 *) 0 ;
  int *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btGeneric6DofSpringConstraintDoubleData2 **)&jarg1; 
  result = (int *)(int *) ((arg1)->m_springEnabled);
  /*jresult = SWIG_JavaArrayOut##Int(jenv, (int *)result, 6);*/ 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btGeneric6DofSpringConstraintDoubleData2_1equilibriumPoint_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  Bullet::btGeneric6DofSpringConstraintDoubleData2 *arg1 = (Bullet::btGeneric6DofSpringConstraintDoubleData2 *) 0 ;
  double *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btGeneric6DofSpringConstraintDoubleData2 **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != 6) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  arg2 = (double *)jenv->GetPrimitiveArrayCritical(jarg2, 0); 
  {
    size_t ii;
    double *b = (double *) arg1->m_equilibriumPoint;
    for (ii = 0; ii < (size_t)6; ii++) b[ii] = *((double *) arg2 + ii);
  }
  jenv->ReleasePrimitiveArrayCritical(jarg2, (double *)arg2, 0); 
}


SWIGEXPORT jdoubleArray JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btGeneric6DofSpringConstraintDoubleData2_1equilibriumPoint_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdoubleArray jresult = 0 ;
  Bullet::btGeneric6DofSpringConstraintDoubleData2 *arg1 = (Bullet::btGeneric6DofSpringConstraintDoubleData2 *) 0 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btGeneric6DofSpringConstraintDoubleData2 **)&jarg1; 
  result = (double *)(double *) ((arg1)->m_equilibriumPoint);
  /*jresult = SWIG_JavaArrayOut##Double(jenv, (double *)result, 6);*/ 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btGeneric6DofSpringConstraintDoubleData2_1springStiffness_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  Bullet::btGeneric6DofSpringConstraintDoubleData2 *arg1 = (Bullet::btGeneric6DofSpringConstraintDoubleData2 *) 0 ;
  double *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btGeneric6DofSpringConstraintDoubleData2 **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != 6) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  arg2 = (double *)jenv->GetPrimitiveArrayCritical(jarg2, 0); 
  {
    size_t ii;
    double *b = (double *) arg1->m_springStiffness;
    for (ii = 0; ii < (size_t)6; ii++) b[ii] = *((double *) arg2 + ii);
  }
  jenv->ReleasePrimitiveArrayCritical(jarg2, (double *)arg2, 0); 
}


SWIGEXPORT jdoubleArray JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btGeneric6DofSpringConstraintDoubleData2_1springStiffness_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdoubleArray jresult = 0 ;
  Bullet::btGeneric6DofSpringConstraintDoubleData2 *arg1 = (Bullet::btGeneric6DofSpringConstraintDoubleData2 *) 0 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btGeneric6DofSpringConstraintDoubleData2 **)&jarg1; 
  result = (double *)(double *) ((arg1)->m_springStiffness);
  /*jresult = SWIG_JavaArrayOut##Double(jenv, (double *)result, 6);*/ 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btGeneric6DofSpringConstraintDoubleData2_1springDamping_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  Bullet::btGeneric6DofSpringConstraintDoubleData2 *arg1 = (Bullet::btGeneric6DofSpringConstraintDoubleData2 *) 0 ;
  double *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btGeneric6DofSpringConstraintDoubleData2 **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != 6) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  arg2 = (double *)jenv->GetPrimitiveArrayCritical(jarg2, 0); 
  {
    size_t ii;
    double *b = (double *) arg1->m_springDamping;
    for (ii = 0; ii < (size_t)6; ii++) b[ii] = *((double *) arg2 + ii);
  }
  jenv->ReleasePrimitiveArrayCritical(jarg2, (double *)arg2, 0); 
}


SWIGEXPORT jdoubleArray JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btGeneric6DofSpringConstraintDoubleData2_1springDamping_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdoubleArray jresult = 0 ;
  Bullet::btGeneric6DofSpringConstraintDoubleData2 *arg1 = (Bullet::btGeneric6DofSpringConstraintDoubleData2 *) 0 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btGeneric6DofSpringConstraintDoubleData2 **)&jarg1; 
  result = (double *)(double *) ((arg1)->m_springDamping);
  /*jresult = SWIG_JavaArrayOut##Double(jenv, (double *)result, 6);*/ 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_new_1btGeneric6DofSpringConstraintDoubleData2(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Bullet::btGeneric6DofSpringConstraintDoubleData2 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Bullet::btGeneric6DofSpringConstraintDoubleData2 *)new Bullet::btGeneric6DofSpringConstraintDoubleData2();
  *(Bullet::btGeneric6DofSpringConstraintDoubleData2 **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_delete_1btGeneric6DofSpringConstraintDoubleData2(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Bullet::btGeneric6DofSpringConstraintDoubleData2 *arg1 = (Bullet::btGeneric6DofSpringConstraintDoubleData2 *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Bullet::btGeneric6DofSpringConstraintDoubleData2 **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btGeneric6DofSpring2ConstraintData_1typeConstraintData_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Bullet::btGeneric6DofSpring2ConstraintData *arg1 = (Bullet::btGeneric6DofSpring2ConstraintData *) 0 ;
  Bullet::btTypedConstraintData *arg2 = (Bullet::btTypedConstraintData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Bullet::btGeneric6DofSpring2ConstraintData **)&jarg1; 
  arg2 = *(Bullet::btTypedConstraintData **)&jarg2; 
  if (arg1) (arg1)->m_typeConstraintData = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btGeneric6DofSpring2ConstraintData_1typeConstraintData_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Bullet::btGeneric6DofSpring2ConstraintData *arg1 = (Bullet::btGeneric6DofSpring2ConstraintData *) 0 ;
  Bullet::btTypedConstraintData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btGeneric6DofSpring2ConstraintData **)&jarg1; 
  result = (Bullet::btTypedConstraintData *)& ((arg1)->m_typeConstraintData);
  *(Bullet::btTypedConstraintData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btGeneric6DofSpring2ConstraintData_1rbAFrame_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Bullet::btGeneric6DofSpring2ConstraintData *arg1 = (Bullet::btGeneric6DofSpring2ConstraintData *) 0 ;
  Bullet::btTransformFloatData *arg2 = (Bullet::btTransformFloatData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Bullet::btGeneric6DofSpring2ConstraintData **)&jarg1; 
  arg2 = *(Bullet::btTransformFloatData **)&jarg2; 
  if (arg1) (arg1)->m_rbAFrame = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btGeneric6DofSpring2ConstraintData_1rbAFrame_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Bullet::btGeneric6DofSpring2ConstraintData *arg1 = (Bullet::btGeneric6DofSpring2ConstraintData *) 0 ;
  Bullet::btTransformFloatData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btGeneric6DofSpring2ConstraintData **)&jarg1; 
  result = (Bullet::btTransformFloatData *)& ((arg1)->m_rbAFrame);
  *(Bullet::btTransformFloatData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btGeneric6DofSpring2ConstraintData_1rbBFrame_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Bullet::btGeneric6DofSpring2ConstraintData *arg1 = (Bullet::btGeneric6DofSpring2ConstraintData *) 0 ;
  Bullet::btTransformFloatData *arg2 = (Bullet::btTransformFloatData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Bullet::btGeneric6DofSpring2ConstraintData **)&jarg1; 
  arg2 = *(Bullet::btTransformFloatData **)&jarg2; 
  if (arg1) (arg1)->m_rbBFrame = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btGeneric6DofSpring2ConstraintData_1rbBFrame_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Bullet::btGeneric6DofSpring2ConstraintData *arg1 = (Bullet::btGeneric6DofSpring2ConstraintData *) 0 ;
  Bullet::btTransformFloatData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btGeneric6DofSpring2ConstraintData **)&jarg1; 
  result = (Bullet::btTransformFloatData *)& ((arg1)->m_rbBFrame);
  *(Bullet::btTransformFloatData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btGeneric6DofSpring2ConstraintData_1linearUpperLimit_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Bullet::btGeneric6DofSpring2ConstraintData *arg1 = (Bullet::btGeneric6DofSpring2ConstraintData *) 0 ;
  Bullet::btVector3FloatData *arg2 = (Bullet::btVector3FloatData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Bullet::btGeneric6DofSpring2ConstraintData **)&jarg1; 
  arg2 = *(Bullet::btVector3FloatData **)&jarg2; 
  if (arg1) (arg1)->m_linearUpperLimit = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btGeneric6DofSpring2ConstraintData_1linearUpperLimit_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Bullet::btGeneric6DofSpring2ConstraintData *arg1 = (Bullet::btGeneric6DofSpring2ConstraintData *) 0 ;
  Bullet::btVector3FloatData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btGeneric6DofSpring2ConstraintData **)&jarg1; 
  result = (Bullet::btVector3FloatData *)& ((arg1)->m_linearUpperLimit);
  *(Bullet::btVector3FloatData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btGeneric6DofSpring2ConstraintData_1linearLowerLimit_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Bullet::btGeneric6DofSpring2ConstraintData *arg1 = (Bullet::btGeneric6DofSpring2ConstraintData *) 0 ;
  Bullet::btVector3FloatData *arg2 = (Bullet::btVector3FloatData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Bullet::btGeneric6DofSpring2ConstraintData **)&jarg1; 
  arg2 = *(Bullet::btVector3FloatData **)&jarg2; 
  if (arg1) (arg1)->m_linearLowerLimit = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btGeneric6DofSpring2ConstraintData_1linearLowerLimit_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Bullet::btGeneric6DofSpring2ConstraintData *arg1 = (Bullet::btGeneric6DofSpring2ConstraintData *) 0 ;
  Bullet::btVector3FloatData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btGeneric6DofSpring2ConstraintData **)&jarg1; 
  result = (Bullet::btVector3FloatData *)& ((arg1)->m_linearLowerLimit);
  *(Bullet::btVector3FloatData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btGeneric6DofSpring2ConstraintData_1linearBounce_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Bullet::btGeneric6DofSpring2ConstraintData *arg1 = (Bullet::btGeneric6DofSpring2ConstraintData *) 0 ;
  Bullet::btVector3FloatData *arg2 = (Bullet::btVector3FloatData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Bullet::btGeneric6DofSpring2ConstraintData **)&jarg1; 
  arg2 = *(Bullet::btVector3FloatData **)&jarg2; 
  if (arg1) (arg1)->m_linearBounce = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btGeneric6DofSpring2ConstraintData_1linearBounce_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Bullet::btGeneric6DofSpring2ConstraintData *arg1 = (Bullet::btGeneric6DofSpring2ConstraintData *) 0 ;
  Bullet::btVector3FloatData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btGeneric6DofSpring2ConstraintData **)&jarg1; 
  result = (Bullet::btVector3FloatData *)& ((arg1)->m_linearBounce);
  *(Bullet::btVector3FloatData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btGeneric6DofSpring2ConstraintData_1linearStopERP_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Bullet::btGeneric6DofSpring2ConstraintData *arg1 = (Bullet::btGeneric6DofSpring2ConstraintData *) 0 ;
  Bullet::btVector3FloatData *arg2 = (Bullet::btVector3FloatData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Bullet::btGeneric6DofSpring2ConstraintData **)&jarg1; 
  arg2 = *(Bullet::btVector3FloatData **)&jarg2; 
  if (arg1) (arg1)->m_linearStopERP = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btGeneric6DofSpring2ConstraintData_1linearStopERP_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Bullet::btGeneric6DofSpring2ConstraintData *arg1 = (Bullet::btGeneric6DofSpring2ConstraintData *) 0 ;
  Bullet::btVector3FloatData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btGeneric6DofSpring2ConstraintData **)&jarg1; 
  result = (Bullet::btVector3FloatData *)& ((arg1)->m_linearStopERP);
  *(Bullet::btVector3FloatData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btGeneric6DofSpring2ConstraintData_1linearStopCFM_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Bullet::btGeneric6DofSpring2ConstraintData *arg1 = (Bullet::btGeneric6DofSpring2ConstraintData *) 0 ;
  Bullet::btVector3FloatData *arg2 = (Bullet::btVector3FloatData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Bullet::btGeneric6DofSpring2ConstraintData **)&jarg1; 
  arg2 = *(Bullet::btVector3FloatData **)&jarg2; 
  if (arg1) (arg1)->m_linearStopCFM = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btGeneric6DofSpring2ConstraintData_1linearStopCFM_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Bullet::btGeneric6DofSpring2ConstraintData *arg1 = (Bullet::btGeneric6DofSpring2ConstraintData *) 0 ;
  Bullet::btVector3FloatData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btGeneric6DofSpring2ConstraintData **)&jarg1; 
  result = (Bullet::btVector3FloatData *)& ((arg1)->m_linearStopCFM);
  *(Bullet::btVector3FloatData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btGeneric6DofSpring2ConstraintData_1linearMotorERP_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Bullet::btGeneric6DofSpring2ConstraintData *arg1 = (Bullet::btGeneric6DofSpring2ConstraintData *) 0 ;
  Bullet::btVector3FloatData *arg2 = (Bullet::btVector3FloatData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Bullet::btGeneric6DofSpring2ConstraintData **)&jarg1; 
  arg2 = *(Bullet::btVector3FloatData **)&jarg2; 
  if (arg1) (arg1)->m_linearMotorERP = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btGeneric6DofSpring2ConstraintData_1linearMotorERP_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Bullet::btGeneric6DofSpring2ConstraintData *arg1 = (Bullet::btGeneric6DofSpring2ConstraintData *) 0 ;
  Bullet::btVector3FloatData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btGeneric6DofSpring2ConstraintData **)&jarg1; 
  result = (Bullet::btVector3FloatData *)& ((arg1)->m_linearMotorERP);
  *(Bullet::btVector3FloatData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btGeneric6DofSpring2ConstraintData_1linearMotorCFM_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Bullet::btGeneric6DofSpring2ConstraintData *arg1 = (Bullet::btGeneric6DofSpring2ConstraintData *) 0 ;
  Bullet::btVector3FloatData *arg2 = (Bullet::btVector3FloatData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Bullet::btGeneric6DofSpring2ConstraintData **)&jarg1; 
  arg2 = *(Bullet::btVector3FloatData **)&jarg2; 
  if (arg1) (arg1)->m_linearMotorCFM = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btGeneric6DofSpring2ConstraintData_1linearMotorCFM_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Bullet::btGeneric6DofSpring2ConstraintData *arg1 = (Bullet::btGeneric6DofSpring2ConstraintData *) 0 ;
  Bullet::btVector3FloatData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btGeneric6DofSpring2ConstraintData **)&jarg1; 
  result = (Bullet::btVector3FloatData *)& ((arg1)->m_linearMotorCFM);
  *(Bullet::btVector3FloatData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btGeneric6DofSpring2ConstraintData_1linearTargetVelocity_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Bullet::btGeneric6DofSpring2ConstraintData *arg1 = (Bullet::btGeneric6DofSpring2ConstraintData *) 0 ;
  Bullet::btVector3FloatData *arg2 = (Bullet::btVector3FloatData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Bullet::btGeneric6DofSpring2ConstraintData **)&jarg1; 
  arg2 = *(Bullet::btVector3FloatData **)&jarg2; 
  if (arg1) (arg1)->m_linearTargetVelocity = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btGeneric6DofSpring2ConstraintData_1linearTargetVelocity_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Bullet::btGeneric6DofSpring2ConstraintData *arg1 = (Bullet::btGeneric6DofSpring2ConstraintData *) 0 ;
  Bullet::btVector3FloatData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btGeneric6DofSpring2ConstraintData **)&jarg1; 
  result = (Bullet::btVector3FloatData *)& ((arg1)->m_linearTargetVelocity);
  *(Bullet::btVector3FloatData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btGeneric6DofSpring2ConstraintData_1linearMaxMotorForce_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Bullet::btGeneric6DofSpring2ConstraintData *arg1 = (Bullet::btGeneric6DofSpring2ConstraintData *) 0 ;
  Bullet::btVector3FloatData *arg2 = (Bullet::btVector3FloatData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Bullet::btGeneric6DofSpring2ConstraintData **)&jarg1; 
  arg2 = *(Bullet::btVector3FloatData **)&jarg2; 
  if (arg1) (arg1)->m_linearMaxMotorForce = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btGeneric6DofSpring2ConstraintData_1linearMaxMotorForce_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Bullet::btGeneric6DofSpring2ConstraintData *arg1 = (Bullet::btGeneric6DofSpring2ConstraintData *) 0 ;
  Bullet::btVector3FloatData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btGeneric6DofSpring2ConstraintData **)&jarg1; 
  result = (Bullet::btVector3FloatData *)& ((arg1)->m_linearMaxMotorForce);
  *(Bullet::btVector3FloatData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btGeneric6DofSpring2ConstraintData_1linearServoTarget_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Bullet::btGeneric6DofSpring2ConstraintData *arg1 = (Bullet::btGeneric6DofSpring2ConstraintData *) 0 ;
  Bullet::btVector3FloatData *arg2 = (Bullet::btVector3FloatData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Bullet::btGeneric6DofSpring2ConstraintData **)&jarg1; 
  arg2 = *(Bullet::btVector3FloatData **)&jarg2; 
  if (arg1) (arg1)->m_linearServoTarget = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btGeneric6DofSpring2ConstraintData_1linearServoTarget_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Bullet::btGeneric6DofSpring2ConstraintData *arg1 = (Bullet::btGeneric6DofSpring2ConstraintData *) 0 ;
  Bullet::btVector3FloatData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btGeneric6DofSpring2ConstraintData **)&jarg1; 
  result = (Bullet::btVector3FloatData *)& ((arg1)->m_linearServoTarget);
  *(Bullet::btVector3FloatData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btGeneric6DofSpring2ConstraintData_1linearSpringStiffness_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Bullet::btGeneric6DofSpring2ConstraintData *arg1 = (Bullet::btGeneric6DofSpring2ConstraintData *) 0 ;
  Bullet::btVector3FloatData *arg2 = (Bullet::btVector3FloatData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Bullet::btGeneric6DofSpring2ConstraintData **)&jarg1; 
  arg2 = *(Bullet::btVector3FloatData **)&jarg2; 
  if (arg1) (arg1)->m_linearSpringStiffness = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btGeneric6DofSpring2ConstraintData_1linearSpringStiffness_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Bullet::btGeneric6DofSpring2ConstraintData *arg1 = (Bullet::btGeneric6DofSpring2ConstraintData *) 0 ;
  Bullet::btVector3FloatData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btGeneric6DofSpring2ConstraintData **)&jarg1; 
  result = (Bullet::btVector3FloatData *)& ((arg1)->m_linearSpringStiffness);
  *(Bullet::btVector3FloatData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btGeneric6DofSpring2ConstraintData_1linearSpringDamping_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Bullet::btGeneric6DofSpring2ConstraintData *arg1 = (Bullet::btGeneric6DofSpring2ConstraintData *) 0 ;
  Bullet::btVector3FloatData *arg2 = (Bullet::btVector3FloatData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Bullet::btGeneric6DofSpring2ConstraintData **)&jarg1; 
  arg2 = *(Bullet::btVector3FloatData **)&jarg2; 
  if (arg1) (arg1)->m_linearSpringDamping = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btGeneric6DofSpring2ConstraintData_1linearSpringDamping_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Bullet::btGeneric6DofSpring2ConstraintData *arg1 = (Bullet::btGeneric6DofSpring2ConstraintData *) 0 ;
  Bullet::btVector3FloatData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btGeneric6DofSpring2ConstraintData **)&jarg1; 
  result = (Bullet::btVector3FloatData *)& ((arg1)->m_linearSpringDamping);
  *(Bullet::btVector3FloatData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btGeneric6DofSpring2ConstraintData_1linearEquilibriumPoint_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Bullet::btGeneric6DofSpring2ConstraintData *arg1 = (Bullet::btGeneric6DofSpring2ConstraintData *) 0 ;
  Bullet::btVector3FloatData *arg2 = (Bullet::btVector3FloatData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Bullet::btGeneric6DofSpring2ConstraintData **)&jarg1; 
  arg2 = *(Bullet::btVector3FloatData **)&jarg2; 
  if (arg1) (arg1)->m_linearEquilibriumPoint = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btGeneric6DofSpring2ConstraintData_1linearEquilibriumPoint_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Bullet::btGeneric6DofSpring2ConstraintData *arg1 = (Bullet::btGeneric6DofSpring2ConstraintData *) 0 ;
  Bullet::btVector3FloatData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btGeneric6DofSpring2ConstraintData **)&jarg1; 
  result = (Bullet::btVector3FloatData *)& ((arg1)->m_linearEquilibriumPoint);
  *(Bullet::btVector3FloatData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btGeneric6DofSpring2ConstraintData_1linearEnableMotor_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  Bullet::btGeneric6DofSpring2ConstraintData *arg1 = (Bullet::btGeneric6DofSpring2ConstraintData *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btGeneric6DofSpring2ConstraintData **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->m_linearEnableMotor, (const char *)arg2, 4-1);
      arg1->m_linearEnableMotor[4-1] = 0;
    } else {
      arg1->m_linearEnableMotor[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btGeneric6DofSpring2ConstraintData_1linearEnableMotor_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  Bullet::btGeneric6DofSpring2ConstraintData *arg1 = (Bullet::btGeneric6DofSpring2ConstraintData *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btGeneric6DofSpring2ConstraintData **)&jarg1; 
  result = (char *)(char *) ((arg1)->m_linearEnableMotor);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btGeneric6DofSpring2ConstraintData_1linearServoMotor_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  Bullet::btGeneric6DofSpring2ConstraintData *arg1 = (Bullet::btGeneric6DofSpring2ConstraintData *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btGeneric6DofSpring2ConstraintData **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->m_linearServoMotor, (const char *)arg2, 4-1);
      arg1->m_linearServoMotor[4-1] = 0;
    } else {
      arg1->m_linearServoMotor[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btGeneric6DofSpring2ConstraintData_1linearServoMotor_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  Bullet::btGeneric6DofSpring2ConstraintData *arg1 = (Bullet::btGeneric6DofSpring2ConstraintData *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btGeneric6DofSpring2ConstraintData **)&jarg1; 
  result = (char *)(char *) ((arg1)->m_linearServoMotor);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btGeneric6DofSpring2ConstraintData_1linearEnableSpring_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  Bullet::btGeneric6DofSpring2ConstraintData *arg1 = (Bullet::btGeneric6DofSpring2ConstraintData *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btGeneric6DofSpring2ConstraintData **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->m_linearEnableSpring, (const char *)arg2, 4-1);
      arg1->m_linearEnableSpring[4-1] = 0;
    } else {
      arg1->m_linearEnableSpring[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btGeneric6DofSpring2ConstraintData_1linearEnableSpring_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  Bullet::btGeneric6DofSpring2ConstraintData *arg1 = (Bullet::btGeneric6DofSpring2ConstraintData *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btGeneric6DofSpring2ConstraintData **)&jarg1; 
  result = (char *)(char *) ((arg1)->m_linearEnableSpring);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btGeneric6DofSpring2ConstraintData_1linearSpringStiffnessLimited_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  Bullet::btGeneric6DofSpring2ConstraintData *arg1 = (Bullet::btGeneric6DofSpring2ConstraintData *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btGeneric6DofSpring2ConstraintData **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->m_linearSpringStiffnessLimited, (const char *)arg2, 4-1);
      arg1->m_linearSpringStiffnessLimited[4-1] = 0;
    } else {
      arg1->m_linearSpringStiffnessLimited[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btGeneric6DofSpring2ConstraintData_1linearSpringStiffnessLimited_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  Bullet::btGeneric6DofSpring2ConstraintData *arg1 = (Bullet::btGeneric6DofSpring2ConstraintData *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btGeneric6DofSpring2ConstraintData **)&jarg1; 
  result = (char *)(char *) ((arg1)->m_linearSpringStiffnessLimited);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btGeneric6DofSpring2ConstraintData_1linearSpringDampingLimited_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  Bullet::btGeneric6DofSpring2ConstraintData *arg1 = (Bullet::btGeneric6DofSpring2ConstraintData *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btGeneric6DofSpring2ConstraintData **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->m_linearSpringDampingLimited, (const char *)arg2, 4-1);
      arg1->m_linearSpringDampingLimited[4-1] = 0;
    } else {
      arg1->m_linearSpringDampingLimited[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btGeneric6DofSpring2ConstraintData_1linearSpringDampingLimited_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  Bullet::btGeneric6DofSpring2ConstraintData *arg1 = (Bullet::btGeneric6DofSpring2ConstraintData *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btGeneric6DofSpring2ConstraintData **)&jarg1; 
  result = (char *)(char *) ((arg1)->m_linearSpringDampingLimited);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btGeneric6DofSpring2ConstraintData_1padding1_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  Bullet::btGeneric6DofSpring2ConstraintData *arg1 = (Bullet::btGeneric6DofSpring2ConstraintData *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btGeneric6DofSpring2ConstraintData **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->m_padding1, (const char *)arg2, 4-1);
      arg1->m_padding1[4-1] = 0;
    } else {
      arg1->m_padding1[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btGeneric6DofSpring2ConstraintData_1padding1_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  Bullet::btGeneric6DofSpring2ConstraintData *arg1 = (Bullet::btGeneric6DofSpring2ConstraintData *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btGeneric6DofSpring2ConstraintData **)&jarg1; 
  result = (char *)(char *) ((arg1)->m_padding1);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btGeneric6DofSpring2ConstraintData_1angularUpperLimit_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Bullet::btGeneric6DofSpring2ConstraintData *arg1 = (Bullet::btGeneric6DofSpring2ConstraintData *) 0 ;
  Bullet::btVector3FloatData *arg2 = (Bullet::btVector3FloatData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Bullet::btGeneric6DofSpring2ConstraintData **)&jarg1; 
  arg2 = *(Bullet::btVector3FloatData **)&jarg2; 
  if (arg1) (arg1)->m_angularUpperLimit = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btGeneric6DofSpring2ConstraintData_1angularUpperLimit_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Bullet::btGeneric6DofSpring2ConstraintData *arg1 = (Bullet::btGeneric6DofSpring2ConstraintData *) 0 ;
  Bullet::btVector3FloatData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btGeneric6DofSpring2ConstraintData **)&jarg1; 
  result = (Bullet::btVector3FloatData *)& ((arg1)->m_angularUpperLimit);
  *(Bullet::btVector3FloatData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btGeneric6DofSpring2ConstraintData_1angularLowerLimit_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Bullet::btGeneric6DofSpring2ConstraintData *arg1 = (Bullet::btGeneric6DofSpring2ConstraintData *) 0 ;
  Bullet::btVector3FloatData *arg2 = (Bullet::btVector3FloatData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Bullet::btGeneric6DofSpring2ConstraintData **)&jarg1; 
  arg2 = *(Bullet::btVector3FloatData **)&jarg2; 
  if (arg1) (arg1)->m_angularLowerLimit = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btGeneric6DofSpring2ConstraintData_1angularLowerLimit_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Bullet::btGeneric6DofSpring2ConstraintData *arg1 = (Bullet::btGeneric6DofSpring2ConstraintData *) 0 ;
  Bullet::btVector3FloatData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btGeneric6DofSpring2ConstraintData **)&jarg1; 
  result = (Bullet::btVector3FloatData *)& ((arg1)->m_angularLowerLimit);
  *(Bullet::btVector3FloatData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btGeneric6DofSpring2ConstraintData_1angularBounce_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Bullet::btGeneric6DofSpring2ConstraintData *arg1 = (Bullet::btGeneric6DofSpring2ConstraintData *) 0 ;
  Bullet::btVector3FloatData *arg2 = (Bullet::btVector3FloatData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Bullet::btGeneric6DofSpring2ConstraintData **)&jarg1; 
  arg2 = *(Bullet::btVector3FloatData **)&jarg2; 
  if (arg1) (arg1)->m_angularBounce = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btGeneric6DofSpring2ConstraintData_1angularBounce_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Bullet::btGeneric6DofSpring2ConstraintData *arg1 = (Bullet::btGeneric6DofSpring2ConstraintData *) 0 ;
  Bullet::btVector3FloatData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btGeneric6DofSpring2ConstraintData **)&jarg1; 
  result = (Bullet::btVector3FloatData *)& ((arg1)->m_angularBounce);
  *(Bullet::btVector3FloatData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btGeneric6DofSpring2ConstraintData_1angularStopERP_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Bullet::btGeneric6DofSpring2ConstraintData *arg1 = (Bullet::btGeneric6DofSpring2ConstraintData *) 0 ;
  Bullet::btVector3FloatData *arg2 = (Bullet::btVector3FloatData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Bullet::btGeneric6DofSpring2ConstraintData **)&jarg1; 
  arg2 = *(Bullet::btVector3FloatData **)&jarg2; 
  if (arg1) (arg1)->m_angularStopERP = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btGeneric6DofSpring2ConstraintData_1angularStopERP_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Bullet::btGeneric6DofSpring2ConstraintData *arg1 = (Bullet::btGeneric6DofSpring2ConstraintData *) 0 ;
  Bullet::btVector3FloatData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btGeneric6DofSpring2ConstraintData **)&jarg1; 
  result = (Bullet::btVector3FloatData *)& ((arg1)->m_angularStopERP);
  *(Bullet::btVector3FloatData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btGeneric6DofSpring2ConstraintData_1angularStopCFM_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Bullet::btGeneric6DofSpring2ConstraintData *arg1 = (Bullet::btGeneric6DofSpring2ConstraintData *) 0 ;
  Bullet::btVector3FloatData *arg2 = (Bullet::btVector3FloatData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Bullet::btGeneric6DofSpring2ConstraintData **)&jarg1; 
  arg2 = *(Bullet::btVector3FloatData **)&jarg2; 
  if (arg1) (arg1)->m_angularStopCFM = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btGeneric6DofSpring2ConstraintData_1angularStopCFM_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Bullet::btGeneric6DofSpring2ConstraintData *arg1 = (Bullet::btGeneric6DofSpring2ConstraintData *) 0 ;
  Bullet::btVector3FloatData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btGeneric6DofSpring2ConstraintData **)&jarg1; 
  result = (Bullet::btVector3FloatData *)& ((arg1)->m_angularStopCFM);
  *(Bullet::btVector3FloatData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btGeneric6DofSpring2ConstraintData_1angularMotorERP_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Bullet::btGeneric6DofSpring2ConstraintData *arg1 = (Bullet::btGeneric6DofSpring2ConstraintData *) 0 ;
  Bullet::btVector3FloatData *arg2 = (Bullet::btVector3FloatData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Bullet::btGeneric6DofSpring2ConstraintData **)&jarg1; 
  arg2 = *(Bullet::btVector3FloatData **)&jarg2; 
  if (arg1) (arg1)->m_angularMotorERP = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btGeneric6DofSpring2ConstraintData_1angularMotorERP_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Bullet::btGeneric6DofSpring2ConstraintData *arg1 = (Bullet::btGeneric6DofSpring2ConstraintData *) 0 ;
  Bullet::btVector3FloatData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btGeneric6DofSpring2ConstraintData **)&jarg1; 
  result = (Bullet::btVector3FloatData *)& ((arg1)->m_angularMotorERP);
  *(Bullet::btVector3FloatData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btGeneric6DofSpring2ConstraintData_1angularMotorCFM_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Bullet::btGeneric6DofSpring2ConstraintData *arg1 = (Bullet::btGeneric6DofSpring2ConstraintData *) 0 ;
  Bullet::btVector3FloatData *arg2 = (Bullet::btVector3FloatData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Bullet::btGeneric6DofSpring2ConstraintData **)&jarg1; 
  arg2 = *(Bullet::btVector3FloatData **)&jarg2; 
  if (arg1) (arg1)->m_angularMotorCFM = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btGeneric6DofSpring2ConstraintData_1angularMotorCFM_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Bullet::btGeneric6DofSpring2ConstraintData *arg1 = (Bullet::btGeneric6DofSpring2ConstraintData *) 0 ;
  Bullet::btVector3FloatData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btGeneric6DofSpring2ConstraintData **)&jarg1; 
  result = (Bullet::btVector3FloatData *)& ((arg1)->m_angularMotorCFM);
  *(Bullet::btVector3FloatData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btGeneric6DofSpring2ConstraintData_1angularTargetVelocity_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Bullet::btGeneric6DofSpring2ConstraintData *arg1 = (Bullet::btGeneric6DofSpring2ConstraintData *) 0 ;
  Bullet::btVector3FloatData *arg2 = (Bullet::btVector3FloatData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Bullet::btGeneric6DofSpring2ConstraintData **)&jarg1; 
  arg2 = *(Bullet::btVector3FloatData **)&jarg2; 
  if (arg1) (arg1)->m_angularTargetVelocity = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btGeneric6DofSpring2ConstraintData_1angularTargetVelocity_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Bullet::btGeneric6DofSpring2ConstraintData *arg1 = (Bullet::btGeneric6DofSpring2ConstraintData *) 0 ;
  Bullet::btVector3FloatData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btGeneric6DofSpring2ConstraintData **)&jarg1; 
  result = (Bullet::btVector3FloatData *)& ((arg1)->m_angularTargetVelocity);
  *(Bullet::btVector3FloatData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btGeneric6DofSpring2ConstraintData_1angularMaxMotorForce_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Bullet::btGeneric6DofSpring2ConstraintData *arg1 = (Bullet::btGeneric6DofSpring2ConstraintData *) 0 ;
  Bullet::btVector3FloatData *arg2 = (Bullet::btVector3FloatData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Bullet::btGeneric6DofSpring2ConstraintData **)&jarg1; 
  arg2 = *(Bullet::btVector3FloatData **)&jarg2; 
  if (arg1) (arg1)->m_angularMaxMotorForce = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btGeneric6DofSpring2ConstraintData_1angularMaxMotorForce_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Bullet::btGeneric6DofSpring2ConstraintData *arg1 = (Bullet::btGeneric6DofSpring2ConstraintData *) 0 ;
  Bullet::btVector3FloatData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btGeneric6DofSpring2ConstraintData **)&jarg1; 
  result = (Bullet::btVector3FloatData *)& ((arg1)->m_angularMaxMotorForce);
  *(Bullet::btVector3FloatData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btGeneric6DofSpring2ConstraintData_1angularServoTarget_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Bullet::btGeneric6DofSpring2ConstraintData *arg1 = (Bullet::btGeneric6DofSpring2ConstraintData *) 0 ;
  Bullet::btVector3FloatData *arg2 = (Bullet::btVector3FloatData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Bullet::btGeneric6DofSpring2ConstraintData **)&jarg1; 
  arg2 = *(Bullet::btVector3FloatData **)&jarg2; 
  if (arg1) (arg1)->m_angularServoTarget = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btGeneric6DofSpring2ConstraintData_1angularServoTarget_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Bullet::btGeneric6DofSpring2ConstraintData *arg1 = (Bullet::btGeneric6DofSpring2ConstraintData *) 0 ;
  Bullet::btVector3FloatData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btGeneric6DofSpring2ConstraintData **)&jarg1; 
  result = (Bullet::btVector3FloatData *)& ((arg1)->m_angularServoTarget);
  *(Bullet::btVector3FloatData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btGeneric6DofSpring2ConstraintData_1angularSpringStiffness_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Bullet::btGeneric6DofSpring2ConstraintData *arg1 = (Bullet::btGeneric6DofSpring2ConstraintData *) 0 ;
  Bullet::btVector3FloatData *arg2 = (Bullet::btVector3FloatData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Bullet::btGeneric6DofSpring2ConstraintData **)&jarg1; 
  arg2 = *(Bullet::btVector3FloatData **)&jarg2; 
  if (arg1) (arg1)->m_angularSpringStiffness = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btGeneric6DofSpring2ConstraintData_1angularSpringStiffness_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Bullet::btGeneric6DofSpring2ConstraintData *arg1 = (Bullet::btGeneric6DofSpring2ConstraintData *) 0 ;
  Bullet::btVector3FloatData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btGeneric6DofSpring2ConstraintData **)&jarg1; 
  result = (Bullet::btVector3FloatData *)& ((arg1)->m_angularSpringStiffness);
  *(Bullet::btVector3FloatData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btGeneric6DofSpring2ConstraintData_1angularSpringDamping_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Bullet::btGeneric6DofSpring2ConstraintData *arg1 = (Bullet::btGeneric6DofSpring2ConstraintData *) 0 ;
  Bullet::btVector3FloatData *arg2 = (Bullet::btVector3FloatData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Bullet::btGeneric6DofSpring2ConstraintData **)&jarg1; 
  arg2 = *(Bullet::btVector3FloatData **)&jarg2; 
  if (arg1) (arg1)->m_angularSpringDamping = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btGeneric6DofSpring2ConstraintData_1angularSpringDamping_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Bullet::btGeneric6DofSpring2ConstraintData *arg1 = (Bullet::btGeneric6DofSpring2ConstraintData *) 0 ;
  Bullet::btVector3FloatData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btGeneric6DofSpring2ConstraintData **)&jarg1; 
  result = (Bullet::btVector3FloatData *)& ((arg1)->m_angularSpringDamping);
  *(Bullet::btVector3FloatData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btGeneric6DofSpring2ConstraintData_1angularEquilibriumPoint_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Bullet::btGeneric6DofSpring2ConstraintData *arg1 = (Bullet::btGeneric6DofSpring2ConstraintData *) 0 ;
  Bullet::btVector3FloatData *arg2 = (Bullet::btVector3FloatData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Bullet::btGeneric6DofSpring2ConstraintData **)&jarg1; 
  arg2 = *(Bullet::btVector3FloatData **)&jarg2; 
  if (arg1) (arg1)->m_angularEquilibriumPoint = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btGeneric6DofSpring2ConstraintData_1angularEquilibriumPoint_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Bullet::btGeneric6DofSpring2ConstraintData *arg1 = (Bullet::btGeneric6DofSpring2ConstraintData *) 0 ;
  Bullet::btVector3FloatData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btGeneric6DofSpring2ConstraintData **)&jarg1; 
  result = (Bullet::btVector3FloatData *)& ((arg1)->m_angularEquilibriumPoint);
  *(Bullet::btVector3FloatData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btGeneric6DofSpring2ConstraintData_1angularEnableMotor_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  Bullet::btGeneric6DofSpring2ConstraintData *arg1 = (Bullet::btGeneric6DofSpring2ConstraintData *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btGeneric6DofSpring2ConstraintData **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->m_angularEnableMotor, (const char *)arg2, 4-1);
      arg1->m_angularEnableMotor[4-1] = 0;
    } else {
      arg1->m_angularEnableMotor[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btGeneric6DofSpring2ConstraintData_1angularEnableMotor_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  Bullet::btGeneric6DofSpring2ConstraintData *arg1 = (Bullet::btGeneric6DofSpring2ConstraintData *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btGeneric6DofSpring2ConstraintData **)&jarg1; 
  result = (char *)(char *) ((arg1)->m_angularEnableMotor);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btGeneric6DofSpring2ConstraintData_1angularServoMotor_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  Bullet::btGeneric6DofSpring2ConstraintData *arg1 = (Bullet::btGeneric6DofSpring2ConstraintData *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btGeneric6DofSpring2ConstraintData **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->m_angularServoMotor, (const char *)arg2, 4-1);
      arg1->m_angularServoMotor[4-1] = 0;
    } else {
      arg1->m_angularServoMotor[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btGeneric6DofSpring2ConstraintData_1angularServoMotor_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  Bullet::btGeneric6DofSpring2ConstraintData *arg1 = (Bullet::btGeneric6DofSpring2ConstraintData *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btGeneric6DofSpring2ConstraintData **)&jarg1; 
  result = (char *)(char *) ((arg1)->m_angularServoMotor);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btGeneric6DofSpring2ConstraintData_1angularEnableSpring_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  Bullet::btGeneric6DofSpring2ConstraintData *arg1 = (Bullet::btGeneric6DofSpring2ConstraintData *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btGeneric6DofSpring2ConstraintData **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->m_angularEnableSpring, (const char *)arg2, 4-1);
      arg1->m_angularEnableSpring[4-1] = 0;
    } else {
      arg1->m_angularEnableSpring[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btGeneric6DofSpring2ConstraintData_1angularEnableSpring_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  Bullet::btGeneric6DofSpring2ConstraintData *arg1 = (Bullet::btGeneric6DofSpring2ConstraintData *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btGeneric6DofSpring2ConstraintData **)&jarg1; 
  result = (char *)(char *) ((arg1)->m_angularEnableSpring);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btGeneric6DofSpring2ConstraintData_1angularSpringStiffnessLimited_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  Bullet::btGeneric6DofSpring2ConstraintData *arg1 = (Bullet::btGeneric6DofSpring2ConstraintData *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btGeneric6DofSpring2ConstraintData **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->m_angularSpringStiffnessLimited, (const char *)arg2, 4-1);
      arg1->m_angularSpringStiffnessLimited[4-1] = 0;
    } else {
      arg1->m_angularSpringStiffnessLimited[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btGeneric6DofSpring2ConstraintData_1angularSpringStiffnessLimited_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  Bullet::btGeneric6DofSpring2ConstraintData *arg1 = (Bullet::btGeneric6DofSpring2ConstraintData *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btGeneric6DofSpring2ConstraintData **)&jarg1; 
  result = (char *)(char *) ((arg1)->m_angularSpringStiffnessLimited);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btGeneric6DofSpring2ConstraintData_1angularSpringDampingLimited_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  Bullet::btGeneric6DofSpring2ConstraintData *arg1 = (Bullet::btGeneric6DofSpring2ConstraintData *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btGeneric6DofSpring2ConstraintData **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->m_angularSpringDampingLimited, (const char *)arg2, 4-1);
      arg1->m_angularSpringDampingLimited[4-1] = 0;
    } else {
      arg1->m_angularSpringDampingLimited[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btGeneric6DofSpring2ConstraintData_1angularSpringDampingLimited_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  Bullet::btGeneric6DofSpring2ConstraintData *arg1 = (Bullet::btGeneric6DofSpring2ConstraintData *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btGeneric6DofSpring2ConstraintData **)&jarg1; 
  result = (char *)(char *) ((arg1)->m_angularSpringDampingLimited);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btGeneric6DofSpring2ConstraintData_1rotateOrder_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Bullet::btGeneric6DofSpring2ConstraintData *arg1 = (Bullet::btGeneric6DofSpring2ConstraintData *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btGeneric6DofSpring2ConstraintData **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_rotateOrder = arg2;
}


SWIGEXPORT jint JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btGeneric6DofSpring2ConstraintData_1rotateOrder_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Bullet::btGeneric6DofSpring2ConstraintData *arg1 = (Bullet::btGeneric6DofSpring2ConstraintData *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btGeneric6DofSpring2ConstraintData **)&jarg1; 
  result = (int) ((arg1)->m_rotateOrder);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_new_1btGeneric6DofSpring2ConstraintData(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Bullet::btGeneric6DofSpring2ConstraintData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Bullet::btGeneric6DofSpring2ConstraintData *)new Bullet::btGeneric6DofSpring2ConstraintData();
  *(Bullet::btGeneric6DofSpring2ConstraintData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_delete_1btGeneric6DofSpring2ConstraintData(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Bullet::btGeneric6DofSpring2ConstraintData *arg1 = (Bullet::btGeneric6DofSpring2ConstraintData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Bullet::btGeneric6DofSpring2ConstraintData **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btGeneric6DofSpring2ConstraintDoubleData2_1typeConstraintData_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Bullet::btGeneric6DofSpring2ConstraintDoubleData2 *arg1 = (Bullet::btGeneric6DofSpring2ConstraintDoubleData2 *) 0 ;
  Bullet::btTypedConstraintDoubleData *arg2 = (Bullet::btTypedConstraintDoubleData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Bullet::btGeneric6DofSpring2ConstraintDoubleData2 **)&jarg1; 
  arg2 = *(Bullet::btTypedConstraintDoubleData **)&jarg2; 
  if (arg1) (arg1)->m_typeConstraintData = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btGeneric6DofSpring2ConstraintDoubleData2_1typeConstraintData_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Bullet::btGeneric6DofSpring2ConstraintDoubleData2 *arg1 = (Bullet::btGeneric6DofSpring2ConstraintDoubleData2 *) 0 ;
  Bullet::btTypedConstraintDoubleData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btGeneric6DofSpring2ConstraintDoubleData2 **)&jarg1; 
  result = (Bullet::btTypedConstraintDoubleData *)& ((arg1)->m_typeConstraintData);
  *(Bullet::btTypedConstraintDoubleData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btGeneric6DofSpring2ConstraintDoubleData2_1rbAFrame_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Bullet::btGeneric6DofSpring2ConstraintDoubleData2 *arg1 = (Bullet::btGeneric6DofSpring2ConstraintDoubleData2 *) 0 ;
  Bullet::btTransformDoubleData *arg2 = (Bullet::btTransformDoubleData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Bullet::btGeneric6DofSpring2ConstraintDoubleData2 **)&jarg1; 
  arg2 = *(Bullet::btTransformDoubleData **)&jarg2; 
  if (arg1) (arg1)->m_rbAFrame = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btGeneric6DofSpring2ConstraintDoubleData2_1rbAFrame_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Bullet::btGeneric6DofSpring2ConstraintDoubleData2 *arg1 = (Bullet::btGeneric6DofSpring2ConstraintDoubleData2 *) 0 ;
  Bullet::btTransformDoubleData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btGeneric6DofSpring2ConstraintDoubleData2 **)&jarg1; 
  result = (Bullet::btTransformDoubleData *)& ((arg1)->m_rbAFrame);
  *(Bullet::btTransformDoubleData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btGeneric6DofSpring2ConstraintDoubleData2_1rbBFrame_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Bullet::btGeneric6DofSpring2ConstraintDoubleData2 *arg1 = (Bullet::btGeneric6DofSpring2ConstraintDoubleData2 *) 0 ;
  Bullet::btTransformDoubleData *arg2 = (Bullet::btTransformDoubleData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Bullet::btGeneric6DofSpring2ConstraintDoubleData2 **)&jarg1; 
  arg2 = *(Bullet::btTransformDoubleData **)&jarg2; 
  if (arg1) (arg1)->m_rbBFrame = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btGeneric6DofSpring2ConstraintDoubleData2_1rbBFrame_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Bullet::btGeneric6DofSpring2ConstraintDoubleData2 *arg1 = (Bullet::btGeneric6DofSpring2ConstraintDoubleData2 *) 0 ;
  Bullet::btTransformDoubleData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btGeneric6DofSpring2ConstraintDoubleData2 **)&jarg1; 
  result = (Bullet::btTransformDoubleData *)& ((arg1)->m_rbBFrame);
  *(Bullet::btTransformDoubleData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btGeneric6DofSpring2ConstraintDoubleData2_1linearUpperLimit_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Bullet::btGeneric6DofSpring2ConstraintDoubleData2 *arg1 = (Bullet::btGeneric6DofSpring2ConstraintDoubleData2 *) 0 ;
  Bullet::btVector3DoubleData *arg2 = (Bullet::btVector3DoubleData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Bullet::btGeneric6DofSpring2ConstraintDoubleData2 **)&jarg1; 
  arg2 = *(Bullet::btVector3DoubleData **)&jarg2; 
  if (arg1) (arg1)->m_linearUpperLimit = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btGeneric6DofSpring2ConstraintDoubleData2_1linearUpperLimit_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Bullet::btGeneric6DofSpring2ConstraintDoubleData2 *arg1 = (Bullet::btGeneric6DofSpring2ConstraintDoubleData2 *) 0 ;
  Bullet::btVector3DoubleData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btGeneric6DofSpring2ConstraintDoubleData2 **)&jarg1; 
  result = (Bullet::btVector3DoubleData *)& ((arg1)->m_linearUpperLimit);
  *(Bullet::btVector3DoubleData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btGeneric6DofSpring2ConstraintDoubleData2_1linearLowerLimit_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Bullet::btGeneric6DofSpring2ConstraintDoubleData2 *arg1 = (Bullet::btGeneric6DofSpring2ConstraintDoubleData2 *) 0 ;
  Bullet::btVector3DoubleData *arg2 = (Bullet::btVector3DoubleData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Bullet::btGeneric6DofSpring2ConstraintDoubleData2 **)&jarg1; 
  arg2 = *(Bullet::btVector3DoubleData **)&jarg2; 
  if (arg1) (arg1)->m_linearLowerLimit = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btGeneric6DofSpring2ConstraintDoubleData2_1linearLowerLimit_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Bullet::btGeneric6DofSpring2ConstraintDoubleData2 *arg1 = (Bullet::btGeneric6DofSpring2ConstraintDoubleData2 *) 0 ;
  Bullet::btVector3DoubleData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btGeneric6DofSpring2ConstraintDoubleData2 **)&jarg1; 
  result = (Bullet::btVector3DoubleData *)& ((arg1)->m_linearLowerLimit);
  *(Bullet::btVector3DoubleData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btGeneric6DofSpring2ConstraintDoubleData2_1linearBounce_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Bullet::btGeneric6DofSpring2ConstraintDoubleData2 *arg1 = (Bullet::btGeneric6DofSpring2ConstraintDoubleData2 *) 0 ;
  Bullet::btVector3DoubleData *arg2 = (Bullet::btVector3DoubleData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Bullet::btGeneric6DofSpring2ConstraintDoubleData2 **)&jarg1; 
  arg2 = *(Bullet::btVector3DoubleData **)&jarg2; 
  if (arg1) (arg1)->m_linearBounce = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btGeneric6DofSpring2ConstraintDoubleData2_1linearBounce_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Bullet::btGeneric6DofSpring2ConstraintDoubleData2 *arg1 = (Bullet::btGeneric6DofSpring2ConstraintDoubleData2 *) 0 ;
  Bullet::btVector3DoubleData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btGeneric6DofSpring2ConstraintDoubleData2 **)&jarg1; 
  result = (Bullet::btVector3DoubleData *)& ((arg1)->m_linearBounce);
  *(Bullet::btVector3DoubleData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btGeneric6DofSpring2ConstraintDoubleData2_1linearStopERP_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Bullet::btGeneric6DofSpring2ConstraintDoubleData2 *arg1 = (Bullet::btGeneric6DofSpring2ConstraintDoubleData2 *) 0 ;
  Bullet::btVector3DoubleData *arg2 = (Bullet::btVector3DoubleData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Bullet::btGeneric6DofSpring2ConstraintDoubleData2 **)&jarg1; 
  arg2 = *(Bullet::btVector3DoubleData **)&jarg2; 
  if (arg1) (arg1)->m_linearStopERP = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btGeneric6DofSpring2ConstraintDoubleData2_1linearStopERP_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Bullet::btGeneric6DofSpring2ConstraintDoubleData2 *arg1 = (Bullet::btGeneric6DofSpring2ConstraintDoubleData2 *) 0 ;
  Bullet::btVector3DoubleData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btGeneric6DofSpring2ConstraintDoubleData2 **)&jarg1; 
  result = (Bullet::btVector3DoubleData *)& ((arg1)->m_linearStopERP);
  *(Bullet::btVector3DoubleData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btGeneric6DofSpring2ConstraintDoubleData2_1linearStopCFM_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Bullet::btGeneric6DofSpring2ConstraintDoubleData2 *arg1 = (Bullet::btGeneric6DofSpring2ConstraintDoubleData2 *) 0 ;
  Bullet::btVector3DoubleData *arg2 = (Bullet::btVector3DoubleData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Bullet::btGeneric6DofSpring2ConstraintDoubleData2 **)&jarg1; 
  arg2 = *(Bullet::btVector3DoubleData **)&jarg2; 
  if (arg1) (arg1)->m_linearStopCFM = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btGeneric6DofSpring2ConstraintDoubleData2_1linearStopCFM_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Bullet::btGeneric6DofSpring2ConstraintDoubleData2 *arg1 = (Bullet::btGeneric6DofSpring2ConstraintDoubleData2 *) 0 ;
  Bullet::btVector3DoubleData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btGeneric6DofSpring2ConstraintDoubleData2 **)&jarg1; 
  result = (Bullet::btVector3DoubleData *)& ((arg1)->m_linearStopCFM);
  *(Bullet::btVector3DoubleData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btGeneric6DofSpring2ConstraintDoubleData2_1linearMotorERP_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Bullet::btGeneric6DofSpring2ConstraintDoubleData2 *arg1 = (Bullet::btGeneric6DofSpring2ConstraintDoubleData2 *) 0 ;
  Bullet::btVector3DoubleData *arg2 = (Bullet::btVector3DoubleData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Bullet::btGeneric6DofSpring2ConstraintDoubleData2 **)&jarg1; 
  arg2 = *(Bullet::btVector3DoubleData **)&jarg2; 
  if (arg1) (arg1)->m_linearMotorERP = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btGeneric6DofSpring2ConstraintDoubleData2_1linearMotorERP_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Bullet::btGeneric6DofSpring2ConstraintDoubleData2 *arg1 = (Bullet::btGeneric6DofSpring2ConstraintDoubleData2 *) 0 ;
  Bullet::btVector3DoubleData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btGeneric6DofSpring2ConstraintDoubleData2 **)&jarg1; 
  result = (Bullet::btVector3DoubleData *)& ((arg1)->m_linearMotorERP);
  *(Bullet::btVector3DoubleData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btGeneric6DofSpring2ConstraintDoubleData2_1linearMotorCFM_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Bullet::btGeneric6DofSpring2ConstraintDoubleData2 *arg1 = (Bullet::btGeneric6DofSpring2ConstraintDoubleData2 *) 0 ;
  Bullet::btVector3DoubleData *arg2 = (Bullet::btVector3DoubleData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Bullet::btGeneric6DofSpring2ConstraintDoubleData2 **)&jarg1; 
  arg2 = *(Bullet::btVector3DoubleData **)&jarg2; 
  if (arg1) (arg1)->m_linearMotorCFM = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btGeneric6DofSpring2ConstraintDoubleData2_1linearMotorCFM_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Bullet::btGeneric6DofSpring2ConstraintDoubleData2 *arg1 = (Bullet::btGeneric6DofSpring2ConstraintDoubleData2 *) 0 ;
  Bullet::btVector3DoubleData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btGeneric6DofSpring2ConstraintDoubleData2 **)&jarg1; 
  result = (Bullet::btVector3DoubleData *)& ((arg1)->m_linearMotorCFM);
  *(Bullet::btVector3DoubleData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btGeneric6DofSpring2ConstraintDoubleData2_1linearTargetVelocity_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Bullet::btGeneric6DofSpring2ConstraintDoubleData2 *arg1 = (Bullet::btGeneric6DofSpring2ConstraintDoubleData2 *) 0 ;
  Bullet::btVector3DoubleData *arg2 = (Bullet::btVector3DoubleData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Bullet::btGeneric6DofSpring2ConstraintDoubleData2 **)&jarg1; 
  arg2 = *(Bullet::btVector3DoubleData **)&jarg2; 
  if (arg1) (arg1)->m_linearTargetVelocity = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btGeneric6DofSpring2ConstraintDoubleData2_1linearTargetVelocity_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Bullet::btGeneric6DofSpring2ConstraintDoubleData2 *arg1 = (Bullet::btGeneric6DofSpring2ConstraintDoubleData2 *) 0 ;
  Bullet::btVector3DoubleData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btGeneric6DofSpring2ConstraintDoubleData2 **)&jarg1; 
  result = (Bullet::btVector3DoubleData *)& ((arg1)->m_linearTargetVelocity);
  *(Bullet::btVector3DoubleData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btGeneric6DofSpring2ConstraintDoubleData2_1linearMaxMotorForce_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Bullet::btGeneric6DofSpring2ConstraintDoubleData2 *arg1 = (Bullet::btGeneric6DofSpring2ConstraintDoubleData2 *) 0 ;
  Bullet::btVector3DoubleData *arg2 = (Bullet::btVector3DoubleData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Bullet::btGeneric6DofSpring2ConstraintDoubleData2 **)&jarg1; 
  arg2 = *(Bullet::btVector3DoubleData **)&jarg2; 
  if (arg1) (arg1)->m_linearMaxMotorForce = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btGeneric6DofSpring2ConstraintDoubleData2_1linearMaxMotorForce_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Bullet::btGeneric6DofSpring2ConstraintDoubleData2 *arg1 = (Bullet::btGeneric6DofSpring2ConstraintDoubleData2 *) 0 ;
  Bullet::btVector3DoubleData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btGeneric6DofSpring2ConstraintDoubleData2 **)&jarg1; 
  result = (Bullet::btVector3DoubleData *)& ((arg1)->m_linearMaxMotorForce);
  *(Bullet::btVector3DoubleData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btGeneric6DofSpring2ConstraintDoubleData2_1linearServoTarget_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Bullet::btGeneric6DofSpring2ConstraintDoubleData2 *arg1 = (Bullet::btGeneric6DofSpring2ConstraintDoubleData2 *) 0 ;
  Bullet::btVector3DoubleData *arg2 = (Bullet::btVector3DoubleData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Bullet::btGeneric6DofSpring2ConstraintDoubleData2 **)&jarg1; 
  arg2 = *(Bullet::btVector3DoubleData **)&jarg2; 
  if (arg1) (arg1)->m_linearServoTarget = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btGeneric6DofSpring2ConstraintDoubleData2_1linearServoTarget_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Bullet::btGeneric6DofSpring2ConstraintDoubleData2 *arg1 = (Bullet::btGeneric6DofSpring2ConstraintDoubleData2 *) 0 ;
  Bullet::btVector3DoubleData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btGeneric6DofSpring2ConstraintDoubleData2 **)&jarg1; 
  result = (Bullet::btVector3DoubleData *)& ((arg1)->m_linearServoTarget);
  *(Bullet::btVector3DoubleData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btGeneric6DofSpring2ConstraintDoubleData2_1linearSpringStiffness_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Bullet::btGeneric6DofSpring2ConstraintDoubleData2 *arg1 = (Bullet::btGeneric6DofSpring2ConstraintDoubleData2 *) 0 ;
  Bullet::btVector3DoubleData *arg2 = (Bullet::btVector3DoubleData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Bullet::btGeneric6DofSpring2ConstraintDoubleData2 **)&jarg1; 
  arg2 = *(Bullet::btVector3DoubleData **)&jarg2; 
  if (arg1) (arg1)->m_linearSpringStiffness = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btGeneric6DofSpring2ConstraintDoubleData2_1linearSpringStiffness_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Bullet::btGeneric6DofSpring2ConstraintDoubleData2 *arg1 = (Bullet::btGeneric6DofSpring2ConstraintDoubleData2 *) 0 ;
  Bullet::btVector3DoubleData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btGeneric6DofSpring2ConstraintDoubleData2 **)&jarg1; 
  result = (Bullet::btVector3DoubleData *)& ((arg1)->m_linearSpringStiffness);
  *(Bullet::btVector3DoubleData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btGeneric6DofSpring2ConstraintDoubleData2_1linearSpringDamping_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Bullet::btGeneric6DofSpring2ConstraintDoubleData2 *arg1 = (Bullet::btGeneric6DofSpring2ConstraintDoubleData2 *) 0 ;
  Bullet::btVector3DoubleData *arg2 = (Bullet::btVector3DoubleData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Bullet::btGeneric6DofSpring2ConstraintDoubleData2 **)&jarg1; 
  arg2 = *(Bullet::btVector3DoubleData **)&jarg2; 
  if (arg1) (arg1)->m_linearSpringDamping = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btGeneric6DofSpring2ConstraintDoubleData2_1linearSpringDamping_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Bullet::btGeneric6DofSpring2ConstraintDoubleData2 *arg1 = (Bullet::btGeneric6DofSpring2ConstraintDoubleData2 *) 0 ;
  Bullet::btVector3DoubleData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btGeneric6DofSpring2ConstraintDoubleData2 **)&jarg1; 
  result = (Bullet::btVector3DoubleData *)& ((arg1)->m_linearSpringDamping);
  *(Bullet::btVector3DoubleData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btGeneric6DofSpring2ConstraintDoubleData2_1linearEquilibriumPoint_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Bullet::btGeneric6DofSpring2ConstraintDoubleData2 *arg1 = (Bullet::btGeneric6DofSpring2ConstraintDoubleData2 *) 0 ;
  Bullet::btVector3DoubleData *arg2 = (Bullet::btVector3DoubleData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Bullet::btGeneric6DofSpring2ConstraintDoubleData2 **)&jarg1; 
  arg2 = *(Bullet::btVector3DoubleData **)&jarg2; 
  if (arg1) (arg1)->m_linearEquilibriumPoint = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btGeneric6DofSpring2ConstraintDoubleData2_1linearEquilibriumPoint_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Bullet::btGeneric6DofSpring2ConstraintDoubleData2 *arg1 = (Bullet::btGeneric6DofSpring2ConstraintDoubleData2 *) 0 ;
  Bullet::btVector3DoubleData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btGeneric6DofSpring2ConstraintDoubleData2 **)&jarg1; 
  result = (Bullet::btVector3DoubleData *)& ((arg1)->m_linearEquilibriumPoint);
  *(Bullet::btVector3DoubleData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btGeneric6DofSpring2ConstraintDoubleData2_1linearEnableMotor_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  Bullet::btGeneric6DofSpring2ConstraintDoubleData2 *arg1 = (Bullet::btGeneric6DofSpring2ConstraintDoubleData2 *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btGeneric6DofSpring2ConstraintDoubleData2 **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->m_linearEnableMotor, (const char *)arg2, 4-1);
      arg1->m_linearEnableMotor[4-1] = 0;
    } else {
      arg1->m_linearEnableMotor[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btGeneric6DofSpring2ConstraintDoubleData2_1linearEnableMotor_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  Bullet::btGeneric6DofSpring2ConstraintDoubleData2 *arg1 = (Bullet::btGeneric6DofSpring2ConstraintDoubleData2 *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btGeneric6DofSpring2ConstraintDoubleData2 **)&jarg1; 
  result = (char *)(char *) ((arg1)->m_linearEnableMotor);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btGeneric6DofSpring2ConstraintDoubleData2_1linearServoMotor_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  Bullet::btGeneric6DofSpring2ConstraintDoubleData2 *arg1 = (Bullet::btGeneric6DofSpring2ConstraintDoubleData2 *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btGeneric6DofSpring2ConstraintDoubleData2 **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->m_linearServoMotor, (const char *)arg2, 4-1);
      arg1->m_linearServoMotor[4-1] = 0;
    } else {
      arg1->m_linearServoMotor[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btGeneric6DofSpring2ConstraintDoubleData2_1linearServoMotor_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  Bullet::btGeneric6DofSpring2ConstraintDoubleData2 *arg1 = (Bullet::btGeneric6DofSpring2ConstraintDoubleData2 *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btGeneric6DofSpring2ConstraintDoubleData2 **)&jarg1; 
  result = (char *)(char *) ((arg1)->m_linearServoMotor);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btGeneric6DofSpring2ConstraintDoubleData2_1linearEnableSpring_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  Bullet::btGeneric6DofSpring2ConstraintDoubleData2 *arg1 = (Bullet::btGeneric6DofSpring2ConstraintDoubleData2 *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btGeneric6DofSpring2ConstraintDoubleData2 **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->m_linearEnableSpring, (const char *)arg2, 4-1);
      arg1->m_linearEnableSpring[4-1] = 0;
    } else {
      arg1->m_linearEnableSpring[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btGeneric6DofSpring2ConstraintDoubleData2_1linearEnableSpring_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  Bullet::btGeneric6DofSpring2ConstraintDoubleData2 *arg1 = (Bullet::btGeneric6DofSpring2ConstraintDoubleData2 *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btGeneric6DofSpring2ConstraintDoubleData2 **)&jarg1; 
  result = (char *)(char *) ((arg1)->m_linearEnableSpring);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btGeneric6DofSpring2ConstraintDoubleData2_1linearSpringStiffnessLimited_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  Bullet::btGeneric6DofSpring2ConstraintDoubleData2 *arg1 = (Bullet::btGeneric6DofSpring2ConstraintDoubleData2 *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btGeneric6DofSpring2ConstraintDoubleData2 **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->m_linearSpringStiffnessLimited, (const char *)arg2, 4-1);
      arg1->m_linearSpringStiffnessLimited[4-1] = 0;
    } else {
      arg1->m_linearSpringStiffnessLimited[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btGeneric6DofSpring2ConstraintDoubleData2_1linearSpringStiffnessLimited_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  Bullet::btGeneric6DofSpring2ConstraintDoubleData2 *arg1 = (Bullet::btGeneric6DofSpring2ConstraintDoubleData2 *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btGeneric6DofSpring2ConstraintDoubleData2 **)&jarg1; 
  result = (char *)(char *) ((arg1)->m_linearSpringStiffnessLimited);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btGeneric6DofSpring2ConstraintDoubleData2_1linearSpringDampingLimited_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  Bullet::btGeneric6DofSpring2ConstraintDoubleData2 *arg1 = (Bullet::btGeneric6DofSpring2ConstraintDoubleData2 *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btGeneric6DofSpring2ConstraintDoubleData2 **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->m_linearSpringDampingLimited, (const char *)arg2, 4-1);
      arg1->m_linearSpringDampingLimited[4-1] = 0;
    } else {
      arg1->m_linearSpringDampingLimited[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btGeneric6DofSpring2ConstraintDoubleData2_1linearSpringDampingLimited_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  Bullet::btGeneric6DofSpring2ConstraintDoubleData2 *arg1 = (Bullet::btGeneric6DofSpring2ConstraintDoubleData2 *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btGeneric6DofSpring2ConstraintDoubleData2 **)&jarg1; 
  result = (char *)(char *) ((arg1)->m_linearSpringDampingLimited);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btGeneric6DofSpring2ConstraintDoubleData2_1padding1_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  Bullet::btGeneric6DofSpring2ConstraintDoubleData2 *arg1 = (Bullet::btGeneric6DofSpring2ConstraintDoubleData2 *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btGeneric6DofSpring2ConstraintDoubleData2 **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->m_padding1, (const char *)arg2, 4-1);
      arg1->m_padding1[4-1] = 0;
    } else {
      arg1->m_padding1[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btGeneric6DofSpring2ConstraintDoubleData2_1padding1_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  Bullet::btGeneric6DofSpring2ConstraintDoubleData2 *arg1 = (Bullet::btGeneric6DofSpring2ConstraintDoubleData2 *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btGeneric6DofSpring2ConstraintDoubleData2 **)&jarg1; 
  result = (char *)(char *) ((arg1)->m_padding1);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btGeneric6DofSpring2ConstraintDoubleData2_1angularUpperLimit_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Bullet::btGeneric6DofSpring2ConstraintDoubleData2 *arg1 = (Bullet::btGeneric6DofSpring2ConstraintDoubleData2 *) 0 ;
  Bullet::btVector3DoubleData *arg2 = (Bullet::btVector3DoubleData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Bullet::btGeneric6DofSpring2ConstraintDoubleData2 **)&jarg1; 
  arg2 = *(Bullet::btVector3DoubleData **)&jarg2; 
  if (arg1) (arg1)->m_angularUpperLimit = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btGeneric6DofSpring2ConstraintDoubleData2_1angularUpperLimit_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Bullet::btGeneric6DofSpring2ConstraintDoubleData2 *arg1 = (Bullet::btGeneric6DofSpring2ConstraintDoubleData2 *) 0 ;
  Bullet::btVector3DoubleData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btGeneric6DofSpring2ConstraintDoubleData2 **)&jarg1; 
  result = (Bullet::btVector3DoubleData *)& ((arg1)->m_angularUpperLimit);
  *(Bullet::btVector3DoubleData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btGeneric6DofSpring2ConstraintDoubleData2_1angularLowerLimit_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Bullet::btGeneric6DofSpring2ConstraintDoubleData2 *arg1 = (Bullet::btGeneric6DofSpring2ConstraintDoubleData2 *) 0 ;
  Bullet::btVector3DoubleData *arg2 = (Bullet::btVector3DoubleData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Bullet::btGeneric6DofSpring2ConstraintDoubleData2 **)&jarg1; 
  arg2 = *(Bullet::btVector3DoubleData **)&jarg2; 
  if (arg1) (arg1)->m_angularLowerLimit = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btGeneric6DofSpring2ConstraintDoubleData2_1angularLowerLimit_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Bullet::btGeneric6DofSpring2ConstraintDoubleData2 *arg1 = (Bullet::btGeneric6DofSpring2ConstraintDoubleData2 *) 0 ;
  Bullet::btVector3DoubleData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btGeneric6DofSpring2ConstraintDoubleData2 **)&jarg1; 
  result = (Bullet::btVector3DoubleData *)& ((arg1)->m_angularLowerLimit);
  *(Bullet::btVector3DoubleData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btGeneric6DofSpring2ConstraintDoubleData2_1angularBounce_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Bullet::btGeneric6DofSpring2ConstraintDoubleData2 *arg1 = (Bullet::btGeneric6DofSpring2ConstraintDoubleData2 *) 0 ;
  Bullet::btVector3DoubleData *arg2 = (Bullet::btVector3DoubleData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Bullet::btGeneric6DofSpring2ConstraintDoubleData2 **)&jarg1; 
  arg2 = *(Bullet::btVector3DoubleData **)&jarg2; 
  if (arg1) (arg1)->m_angularBounce = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btGeneric6DofSpring2ConstraintDoubleData2_1angularBounce_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Bullet::btGeneric6DofSpring2ConstraintDoubleData2 *arg1 = (Bullet::btGeneric6DofSpring2ConstraintDoubleData2 *) 0 ;
  Bullet::btVector3DoubleData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btGeneric6DofSpring2ConstraintDoubleData2 **)&jarg1; 
  result = (Bullet::btVector3DoubleData *)& ((arg1)->m_angularBounce);
  *(Bullet::btVector3DoubleData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btGeneric6DofSpring2ConstraintDoubleData2_1angularStopERP_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Bullet::btGeneric6DofSpring2ConstraintDoubleData2 *arg1 = (Bullet::btGeneric6DofSpring2ConstraintDoubleData2 *) 0 ;
  Bullet::btVector3DoubleData *arg2 = (Bullet::btVector3DoubleData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Bullet::btGeneric6DofSpring2ConstraintDoubleData2 **)&jarg1; 
  arg2 = *(Bullet::btVector3DoubleData **)&jarg2; 
  if (arg1) (arg1)->m_angularStopERP = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btGeneric6DofSpring2ConstraintDoubleData2_1angularStopERP_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Bullet::btGeneric6DofSpring2ConstraintDoubleData2 *arg1 = (Bullet::btGeneric6DofSpring2ConstraintDoubleData2 *) 0 ;
  Bullet::btVector3DoubleData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btGeneric6DofSpring2ConstraintDoubleData2 **)&jarg1; 
  result = (Bullet::btVector3DoubleData *)& ((arg1)->m_angularStopERP);
  *(Bullet::btVector3DoubleData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btGeneric6DofSpring2ConstraintDoubleData2_1angularStopCFM_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Bullet::btGeneric6DofSpring2ConstraintDoubleData2 *arg1 = (Bullet::btGeneric6DofSpring2ConstraintDoubleData2 *) 0 ;
  Bullet::btVector3DoubleData *arg2 = (Bullet::btVector3DoubleData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Bullet::btGeneric6DofSpring2ConstraintDoubleData2 **)&jarg1; 
  arg2 = *(Bullet::btVector3DoubleData **)&jarg2; 
  if (arg1) (arg1)->m_angularStopCFM = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btGeneric6DofSpring2ConstraintDoubleData2_1angularStopCFM_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Bullet::btGeneric6DofSpring2ConstraintDoubleData2 *arg1 = (Bullet::btGeneric6DofSpring2ConstraintDoubleData2 *) 0 ;
  Bullet::btVector3DoubleData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btGeneric6DofSpring2ConstraintDoubleData2 **)&jarg1; 
  result = (Bullet::btVector3DoubleData *)& ((arg1)->m_angularStopCFM);
  *(Bullet::btVector3DoubleData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btGeneric6DofSpring2ConstraintDoubleData2_1angularMotorERP_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Bullet::btGeneric6DofSpring2ConstraintDoubleData2 *arg1 = (Bullet::btGeneric6DofSpring2ConstraintDoubleData2 *) 0 ;
  Bullet::btVector3DoubleData *arg2 = (Bullet::btVector3DoubleData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Bullet::btGeneric6DofSpring2ConstraintDoubleData2 **)&jarg1; 
  arg2 = *(Bullet::btVector3DoubleData **)&jarg2; 
  if (arg1) (arg1)->m_angularMotorERP = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btGeneric6DofSpring2ConstraintDoubleData2_1angularMotorERP_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Bullet::btGeneric6DofSpring2ConstraintDoubleData2 *arg1 = (Bullet::btGeneric6DofSpring2ConstraintDoubleData2 *) 0 ;
  Bullet::btVector3DoubleData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btGeneric6DofSpring2ConstraintDoubleData2 **)&jarg1; 
  result = (Bullet::btVector3DoubleData *)& ((arg1)->m_angularMotorERP);
  *(Bullet::btVector3DoubleData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btGeneric6DofSpring2ConstraintDoubleData2_1angularMotorCFM_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Bullet::btGeneric6DofSpring2ConstraintDoubleData2 *arg1 = (Bullet::btGeneric6DofSpring2ConstraintDoubleData2 *) 0 ;
  Bullet::btVector3DoubleData *arg2 = (Bullet::btVector3DoubleData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Bullet::btGeneric6DofSpring2ConstraintDoubleData2 **)&jarg1; 
  arg2 = *(Bullet::btVector3DoubleData **)&jarg2; 
  if (arg1) (arg1)->m_angularMotorCFM = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btGeneric6DofSpring2ConstraintDoubleData2_1angularMotorCFM_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Bullet::btGeneric6DofSpring2ConstraintDoubleData2 *arg1 = (Bullet::btGeneric6DofSpring2ConstraintDoubleData2 *) 0 ;
  Bullet::btVector3DoubleData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btGeneric6DofSpring2ConstraintDoubleData2 **)&jarg1; 
  result = (Bullet::btVector3DoubleData *)& ((arg1)->m_angularMotorCFM);
  *(Bullet::btVector3DoubleData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btGeneric6DofSpring2ConstraintDoubleData2_1angularTargetVelocity_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Bullet::btGeneric6DofSpring2ConstraintDoubleData2 *arg1 = (Bullet::btGeneric6DofSpring2ConstraintDoubleData2 *) 0 ;
  Bullet::btVector3DoubleData *arg2 = (Bullet::btVector3DoubleData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Bullet::btGeneric6DofSpring2ConstraintDoubleData2 **)&jarg1; 
  arg2 = *(Bullet::btVector3DoubleData **)&jarg2; 
  if (arg1) (arg1)->m_angularTargetVelocity = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btGeneric6DofSpring2ConstraintDoubleData2_1angularTargetVelocity_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Bullet::btGeneric6DofSpring2ConstraintDoubleData2 *arg1 = (Bullet::btGeneric6DofSpring2ConstraintDoubleData2 *) 0 ;
  Bullet::btVector3DoubleData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btGeneric6DofSpring2ConstraintDoubleData2 **)&jarg1; 
  result = (Bullet::btVector3DoubleData *)& ((arg1)->m_angularTargetVelocity);
  *(Bullet::btVector3DoubleData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btGeneric6DofSpring2ConstraintDoubleData2_1angularMaxMotorForce_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Bullet::btGeneric6DofSpring2ConstraintDoubleData2 *arg1 = (Bullet::btGeneric6DofSpring2ConstraintDoubleData2 *) 0 ;
  Bullet::btVector3DoubleData *arg2 = (Bullet::btVector3DoubleData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Bullet::btGeneric6DofSpring2ConstraintDoubleData2 **)&jarg1; 
  arg2 = *(Bullet::btVector3DoubleData **)&jarg2; 
  if (arg1) (arg1)->m_angularMaxMotorForce = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btGeneric6DofSpring2ConstraintDoubleData2_1angularMaxMotorForce_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Bullet::btGeneric6DofSpring2ConstraintDoubleData2 *arg1 = (Bullet::btGeneric6DofSpring2ConstraintDoubleData2 *) 0 ;
  Bullet::btVector3DoubleData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btGeneric6DofSpring2ConstraintDoubleData2 **)&jarg1; 
  result = (Bullet::btVector3DoubleData *)& ((arg1)->m_angularMaxMotorForce);
  *(Bullet::btVector3DoubleData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btGeneric6DofSpring2ConstraintDoubleData2_1angularServoTarget_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Bullet::btGeneric6DofSpring2ConstraintDoubleData2 *arg1 = (Bullet::btGeneric6DofSpring2ConstraintDoubleData2 *) 0 ;
  Bullet::btVector3DoubleData *arg2 = (Bullet::btVector3DoubleData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Bullet::btGeneric6DofSpring2ConstraintDoubleData2 **)&jarg1; 
  arg2 = *(Bullet::btVector3DoubleData **)&jarg2; 
  if (arg1) (arg1)->m_angularServoTarget = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btGeneric6DofSpring2ConstraintDoubleData2_1angularServoTarget_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Bullet::btGeneric6DofSpring2ConstraintDoubleData2 *arg1 = (Bullet::btGeneric6DofSpring2ConstraintDoubleData2 *) 0 ;
  Bullet::btVector3DoubleData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btGeneric6DofSpring2ConstraintDoubleData2 **)&jarg1; 
  result = (Bullet::btVector3DoubleData *)& ((arg1)->m_angularServoTarget);
  *(Bullet::btVector3DoubleData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btGeneric6DofSpring2ConstraintDoubleData2_1angularSpringStiffness_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Bullet::btGeneric6DofSpring2ConstraintDoubleData2 *arg1 = (Bullet::btGeneric6DofSpring2ConstraintDoubleData2 *) 0 ;
  Bullet::btVector3DoubleData *arg2 = (Bullet::btVector3DoubleData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Bullet::btGeneric6DofSpring2ConstraintDoubleData2 **)&jarg1; 
  arg2 = *(Bullet::btVector3DoubleData **)&jarg2; 
  if (arg1) (arg1)->m_angularSpringStiffness = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btGeneric6DofSpring2ConstraintDoubleData2_1angularSpringStiffness_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Bullet::btGeneric6DofSpring2ConstraintDoubleData2 *arg1 = (Bullet::btGeneric6DofSpring2ConstraintDoubleData2 *) 0 ;
  Bullet::btVector3DoubleData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btGeneric6DofSpring2ConstraintDoubleData2 **)&jarg1; 
  result = (Bullet::btVector3DoubleData *)& ((arg1)->m_angularSpringStiffness);
  *(Bullet::btVector3DoubleData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btGeneric6DofSpring2ConstraintDoubleData2_1angularSpringDamping_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Bullet::btGeneric6DofSpring2ConstraintDoubleData2 *arg1 = (Bullet::btGeneric6DofSpring2ConstraintDoubleData2 *) 0 ;
  Bullet::btVector3DoubleData *arg2 = (Bullet::btVector3DoubleData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Bullet::btGeneric6DofSpring2ConstraintDoubleData2 **)&jarg1; 
  arg2 = *(Bullet::btVector3DoubleData **)&jarg2; 
  if (arg1) (arg1)->m_angularSpringDamping = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btGeneric6DofSpring2ConstraintDoubleData2_1angularSpringDamping_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Bullet::btGeneric6DofSpring2ConstraintDoubleData2 *arg1 = (Bullet::btGeneric6DofSpring2ConstraintDoubleData2 *) 0 ;
  Bullet::btVector3DoubleData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btGeneric6DofSpring2ConstraintDoubleData2 **)&jarg1; 
  result = (Bullet::btVector3DoubleData *)& ((arg1)->m_angularSpringDamping);
  *(Bullet::btVector3DoubleData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btGeneric6DofSpring2ConstraintDoubleData2_1angularEquilibriumPoint_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Bullet::btGeneric6DofSpring2ConstraintDoubleData2 *arg1 = (Bullet::btGeneric6DofSpring2ConstraintDoubleData2 *) 0 ;
  Bullet::btVector3DoubleData *arg2 = (Bullet::btVector3DoubleData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Bullet::btGeneric6DofSpring2ConstraintDoubleData2 **)&jarg1; 
  arg2 = *(Bullet::btVector3DoubleData **)&jarg2; 
  if (arg1) (arg1)->m_angularEquilibriumPoint = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btGeneric6DofSpring2ConstraintDoubleData2_1angularEquilibriumPoint_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Bullet::btGeneric6DofSpring2ConstraintDoubleData2 *arg1 = (Bullet::btGeneric6DofSpring2ConstraintDoubleData2 *) 0 ;
  Bullet::btVector3DoubleData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btGeneric6DofSpring2ConstraintDoubleData2 **)&jarg1; 
  result = (Bullet::btVector3DoubleData *)& ((arg1)->m_angularEquilibriumPoint);
  *(Bullet::btVector3DoubleData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btGeneric6DofSpring2ConstraintDoubleData2_1angularEnableMotor_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  Bullet::btGeneric6DofSpring2ConstraintDoubleData2 *arg1 = (Bullet::btGeneric6DofSpring2ConstraintDoubleData2 *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btGeneric6DofSpring2ConstraintDoubleData2 **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->m_angularEnableMotor, (const char *)arg2, 4-1);
      arg1->m_angularEnableMotor[4-1] = 0;
    } else {
      arg1->m_angularEnableMotor[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btGeneric6DofSpring2ConstraintDoubleData2_1angularEnableMotor_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  Bullet::btGeneric6DofSpring2ConstraintDoubleData2 *arg1 = (Bullet::btGeneric6DofSpring2ConstraintDoubleData2 *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btGeneric6DofSpring2ConstraintDoubleData2 **)&jarg1; 
  result = (char *)(char *) ((arg1)->m_angularEnableMotor);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btGeneric6DofSpring2ConstraintDoubleData2_1angularServoMotor_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  Bullet::btGeneric6DofSpring2ConstraintDoubleData2 *arg1 = (Bullet::btGeneric6DofSpring2ConstraintDoubleData2 *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btGeneric6DofSpring2ConstraintDoubleData2 **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->m_angularServoMotor, (const char *)arg2, 4-1);
      arg1->m_angularServoMotor[4-1] = 0;
    } else {
      arg1->m_angularServoMotor[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btGeneric6DofSpring2ConstraintDoubleData2_1angularServoMotor_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  Bullet::btGeneric6DofSpring2ConstraintDoubleData2 *arg1 = (Bullet::btGeneric6DofSpring2ConstraintDoubleData2 *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btGeneric6DofSpring2ConstraintDoubleData2 **)&jarg1; 
  result = (char *)(char *) ((arg1)->m_angularServoMotor);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btGeneric6DofSpring2ConstraintDoubleData2_1angularEnableSpring_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  Bullet::btGeneric6DofSpring2ConstraintDoubleData2 *arg1 = (Bullet::btGeneric6DofSpring2ConstraintDoubleData2 *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btGeneric6DofSpring2ConstraintDoubleData2 **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->m_angularEnableSpring, (const char *)arg2, 4-1);
      arg1->m_angularEnableSpring[4-1] = 0;
    } else {
      arg1->m_angularEnableSpring[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btGeneric6DofSpring2ConstraintDoubleData2_1angularEnableSpring_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  Bullet::btGeneric6DofSpring2ConstraintDoubleData2 *arg1 = (Bullet::btGeneric6DofSpring2ConstraintDoubleData2 *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btGeneric6DofSpring2ConstraintDoubleData2 **)&jarg1; 
  result = (char *)(char *) ((arg1)->m_angularEnableSpring);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btGeneric6DofSpring2ConstraintDoubleData2_1angularSpringStiffnessLimited_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  Bullet::btGeneric6DofSpring2ConstraintDoubleData2 *arg1 = (Bullet::btGeneric6DofSpring2ConstraintDoubleData2 *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btGeneric6DofSpring2ConstraintDoubleData2 **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->m_angularSpringStiffnessLimited, (const char *)arg2, 4-1);
      arg1->m_angularSpringStiffnessLimited[4-1] = 0;
    } else {
      arg1->m_angularSpringStiffnessLimited[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btGeneric6DofSpring2ConstraintDoubleData2_1angularSpringStiffnessLimited_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  Bullet::btGeneric6DofSpring2ConstraintDoubleData2 *arg1 = (Bullet::btGeneric6DofSpring2ConstraintDoubleData2 *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btGeneric6DofSpring2ConstraintDoubleData2 **)&jarg1; 
  result = (char *)(char *) ((arg1)->m_angularSpringStiffnessLimited);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btGeneric6DofSpring2ConstraintDoubleData2_1angularSpringDampingLimited_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  Bullet::btGeneric6DofSpring2ConstraintDoubleData2 *arg1 = (Bullet::btGeneric6DofSpring2ConstraintDoubleData2 *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btGeneric6DofSpring2ConstraintDoubleData2 **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->m_angularSpringDampingLimited, (const char *)arg2, 4-1);
      arg1->m_angularSpringDampingLimited[4-1] = 0;
    } else {
      arg1->m_angularSpringDampingLimited[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btGeneric6DofSpring2ConstraintDoubleData2_1angularSpringDampingLimited_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  Bullet::btGeneric6DofSpring2ConstraintDoubleData2 *arg1 = (Bullet::btGeneric6DofSpring2ConstraintDoubleData2 *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btGeneric6DofSpring2ConstraintDoubleData2 **)&jarg1; 
  result = (char *)(char *) ((arg1)->m_angularSpringDampingLimited);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btGeneric6DofSpring2ConstraintDoubleData2_1rotateOrder_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Bullet::btGeneric6DofSpring2ConstraintDoubleData2 *arg1 = (Bullet::btGeneric6DofSpring2ConstraintDoubleData2 *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btGeneric6DofSpring2ConstraintDoubleData2 **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_rotateOrder = arg2;
}


SWIGEXPORT jint JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btGeneric6DofSpring2ConstraintDoubleData2_1rotateOrder_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Bullet::btGeneric6DofSpring2ConstraintDoubleData2 *arg1 = (Bullet::btGeneric6DofSpring2ConstraintDoubleData2 *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btGeneric6DofSpring2ConstraintDoubleData2 **)&jarg1; 
  result = (int) ((arg1)->m_rotateOrder);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_new_1btGeneric6DofSpring2ConstraintDoubleData2(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Bullet::btGeneric6DofSpring2ConstraintDoubleData2 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Bullet::btGeneric6DofSpring2ConstraintDoubleData2 *)new Bullet::btGeneric6DofSpring2ConstraintDoubleData2();
  *(Bullet::btGeneric6DofSpring2ConstraintDoubleData2 **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_delete_1btGeneric6DofSpring2ConstraintDoubleData2(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Bullet::btGeneric6DofSpring2ConstraintDoubleData2 *arg1 = (Bullet::btGeneric6DofSpring2ConstraintDoubleData2 *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Bullet::btGeneric6DofSpring2ConstraintDoubleData2 **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btSliderConstraintData_1typeConstraintData_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Bullet::btSliderConstraintData *arg1 = (Bullet::btSliderConstraintData *) 0 ;
  Bullet::btTypedConstraintData *arg2 = (Bullet::btTypedConstraintData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Bullet::btSliderConstraintData **)&jarg1; 
  arg2 = *(Bullet::btTypedConstraintData **)&jarg2; 
  if (arg1) (arg1)->m_typeConstraintData = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btSliderConstraintData_1typeConstraintData_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Bullet::btSliderConstraintData *arg1 = (Bullet::btSliderConstraintData *) 0 ;
  Bullet::btTypedConstraintData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btSliderConstraintData **)&jarg1; 
  result = (Bullet::btTypedConstraintData *)& ((arg1)->m_typeConstraintData);
  *(Bullet::btTypedConstraintData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btSliderConstraintData_1rbAFrame_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Bullet::btSliderConstraintData *arg1 = (Bullet::btSliderConstraintData *) 0 ;
  Bullet::btTransformFloatData *arg2 = (Bullet::btTransformFloatData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Bullet::btSliderConstraintData **)&jarg1; 
  arg2 = *(Bullet::btTransformFloatData **)&jarg2; 
  if (arg1) (arg1)->m_rbAFrame = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btSliderConstraintData_1rbAFrame_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Bullet::btSliderConstraintData *arg1 = (Bullet::btSliderConstraintData *) 0 ;
  Bullet::btTransformFloatData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btSliderConstraintData **)&jarg1; 
  result = (Bullet::btTransformFloatData *)& ((arg1)->m_rbAFrame);
  *(Bullet::btTransformFloatData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btSliderConstraintData_1rbBFrame_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Bullet::btSliderConstraintData *arg1 = (Bullet::btSliderConstraintData *) 0 ;
  Bullet::btTransformFloatData *arg2 = (Bullet::btTransformFloatData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Bullet::btSliderConstraintData **)&jarg1; 
  arg2 = *(Bullet::btTransformFloatData **)&jarg2; 
  if (arg1) (arg1)->m_rbBFrame = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btSliderConstraintData_1rbBFrame_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Bullet::btSliderConstraintData *arg1 = (Bullet::btSliderConstraintData *) 0 ;
  Bullet::btTransformFloatData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btSliderConstraintData **)&jarg1; 
  result = (Bullet::btTransformFloatData *)& ((arg1)->m_rbBFrame);
  *(Bullet::btTransformFloatData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btSliderConstraintData_1linearUpperLimit_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  Bullet::btSliderConstraintData *arg1 = (Bullet::btSliderConstraintData *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btSliderConstraintData **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->m_linearUpperLimit = arg2;
}


SWIGEXPORT jfloat JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btSliderConstraintData_1linearUpperLimit_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  Bullet::btSliderConstraintData *arg1 = (Bullet::btSliderConstraintData *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btSliderConstraintData **)&jarg1; 
  result = (float) ((arg1)->m_linearUpperLimit);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btSliderConstraintData_1linearLowerLimit_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  Bullet::btSliderConstraintData *arg1 = (Bullet::btSliderConstraintData *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btSliderConstraintData **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->m_linearLowerLimit = arg2;
}


SWIGEXPORT jfloat JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btSliderConstraintData_1linearLowerLimit_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  Bullet::btSliderConstraintData *arg1 = (Bullet::btSliderConstraintData *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btSliderConstraintData **)&jarg1; 
  result = (float) ((arg1)->m_linearLowerLimit);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btSliderConstraintData_1angularUpperLimit_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  Bullet::btSliderConstraintData *arg1 = (Bullet::btSliderConstraintData *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btSliderConstraintData **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->m_angularUpperLimit = arg2;
}


SWIGEXPORT jfloat JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btSliderConstraintData_1angularUpperLimit_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  Bullet::btSliderConstraintData *arg1 = (Bullet::btSliderConstraintData *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btSliderConstraintData **)&jarg1; 
  result = (float) ((arg1)->m_angularUpperLimit);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btSliderConstraintData_1angularLowerLimit_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  Bullet::btSliderConstraintData *arg1 = (Bullet::btSliderConstraintData *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btSliderConstraintData **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->m_angularLowerLimit = arg2;
}


SWIGEXPORT jfloat JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btSliderConstraintData_1angularLowerLimit_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  Bullet::btSliderConstraintData *arg1 = (Bullet::btSliderConstraintData *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btSliderConstraintData **)&jarg1; 
  result = (float) ((arg1)->m_angularLowerLimit);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btSliderConstraintData_1useLinearReferenceFrameA_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Bullet::btSliderConstraintData *arg1 = (Bullet::btSliderConstraintData *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btSliderConstraintData **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_useLinearReferenceFrameA = arg2;
}


SWIGEXPORT jint JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btSliderConstraintData_1useLinearReferenceFrameA_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Bullet::btSliderConstraintData *arg1 = (Bullet::btSliderConstraintData *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btSliderConstraintData **)&jarg1; 
  result = (int) ((arg1)->m_useLinearReferenceFrameA);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btSliderConstraintData_1useOffsetForConstraintFrame_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Bullet::btSliderConstraintData *arg1 = (Bullet::btSliderConstraintData *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btSliderConstraintData **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_useOffsetForConstraintFrame = arg2;
}


SWIGEXPORT jint JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btSliderConstraintData_1useOffsetForConstraintFrame_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Bullet::btSliderConstraintData *arg1 = (Bullet::btSliderConstraintData *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btSliderConstraintData **)&jarg1; 
  result = (int) ((arg1)->m_useOffsetForConstraintFrame);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_new_1btSliderConstraintData(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Bullet::btSliderConstraintData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Bullet::btSliderConstraintData *)new Bullet::btSliderConstraintData();
  *(Bullet::btSliderConstraintData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_delete_1btSliderConstraintData(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Bullet::btSliderConstraintData *arg1 = (Bullet::btSliderConstraintData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Bullet::btSliderConstraintData **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btSliderConstraintDoubleData_1typeConstraintData_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Bullet::btSliderConstraintDoubleData *arg1 = (Bullet::btSliderConstraintDoubleData *) 0 ;
  Bullet::btTypedConstraintDoubleData *arg2 = (Bullet::btTypedConstraintDoubleData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Bullet::btSliderConstraintDoubleData **)&jarg1; 
  arg2 = *(Bullet::btTypedConstraintDoubleData **)&jarg2; 
  if (arg1) (arg1)->m_typeConstraintData = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btSliderConstraintDoubleData_1typeConstraintData_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Bullet::btSliderConstraintDoubleData *arg1 = (Bullet::btSliderConstraintDoubleData *) 0 ;
  Bullet::btTypedConstraintDoubleData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btSliderConstraintDoubleData **)&jarg1; 
  result = (Bullet::btTypedConstraintDoubleData *)& ((arg1)->m_typeConstraintData);
  *(Bullet::btTypedConstraintDoubleData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btSliderConstraintDoubleData_1rbAFrame_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Bullet::btSliderConstraintDoubleData *arg1 = (Bullet::btSliderConstraintDoubleData *) 0 ;
  Bullet::btTransformDoubleData *arg2 = (Bullet::btTransformDoubleData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Bullet::btSliderConstraintDoubleData **)&jarg1; 
  arg2 = *(Bullet::btTransformDoubleData **)&jarg2; 
  if (arg1) (arg1)->m_rbAFrame = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btSliderConstraintDoubleData_1rbAFrame_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Bullet::btSliderConstraintDoubleData *arg1 = (Bullet::btSliderConstraintDoubleData *) 0 ;
  Bullet::btTransformDoubleData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btSliderConstraintDoubleData **)&jarg1; 
  result = (Bullet::btTransformDoubleData *)& ((arg1)->m_rbAFrame);
  *(Bullet::btTransformDoubleData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btSliderConstraintDoubleData_1rbBFrame_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Bullet::btSliderConstraintDoubleData *arg1 = (Bullet::btSliderConstraintDoubleData *) 0 ;
  Bullet::btTransformDoubleData *arg2 = (Bullet::btTransformDoubleData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Bullet::btSliderConstraintDoubleData **)&jarg1; 
  arg2 = *(Bullet::btTransformDoubleData **)&jarg2; 
  if (arg1) (arg1)->m_rbBFrame = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btSliderConstraintDoubleData_1rbBFrame_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Bullet::btSliderConstraintDoubleData *arg1 = (Bullet::btSliderConstraintDoubleData *) 0 ;
  Bullet::btTransformDoubleData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btSliderConstraintDoubleData **)&jarg1; 
  result = (Bullet::btTransformDoubleData *)& ((arg1)->m_rbBFrame);
  *(Bullet::btTransformDoubleData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btSliderConstraintDoubleData_1linearUpperLimit_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  Bullet::btSliderConstraintDoubleData *arg1 = (Bullet::btSliderConstraintDoubleData *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btSliderConstraintDoubleData **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->m_linearUpperLimit = arg2;
}


SWIGEXPORT jdouble JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btSliderConstraintDoubleData_1linearUpperLimit_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  Bullet::btSliderConstraintDoubleData *arg1 = (Bullet::btSliderConstraintDoubleData *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btSliderConstraintDoubleData **)&jarg1; 
  result = (double) ((arg1)->m_linearUpperLimit);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btSliderConstraintDoubleData_1linearLowerLimit_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  Bullet::btSliderConstraintDoubleData *arg1 = (Bullet::btSliderConstraintDoubleData *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btSliderConstraintDoubleData **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->m_linearLowerLimit = arg2;
}


SWIGEXPORT jdouble JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btSliderConstraintDoubleData_1linearLowerLimit_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  Bullet::btSliderConstraintDoubleData *arg1 = (Bullet::btSliderConstraintDoubleData *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btSliderConstraintDoubleData **)&jarg1; 
  result = (double) ((arg1)->m_linearLowerLimit);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btSliderConstraintDoubleData_1angularUpperLimit_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  Bullet::btSliderConstraintDoubleData *arg1 = (Bullet::btSliderConstraintDoubleData *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btSliderConstraintDoubleData **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->m_angularUpperLimit = arg2;
}


SWIGEXPORT jdouble JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btSliderConstraintDoubleData_1angularUpperLimit_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  Bullet::btSliderConstraintDoubleData *arg1 = (Bullet::btSliderConstraintDoubleData *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btSliderConstraintDoubleData **)&jarg1; 
  result = (double) ((arg1)->m_angularUpperLimit);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btSliderConstraintDoubleData_1angularLowerLimit_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  Bullet::btSliderConstraintDoubleData *arg1 = (Bullet::btSliderConstraintDoubleData *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btSliderConstraintDoubleData **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->m_angularLowerLimit = arg2;
}


SWIGEXPORT jdouble JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btSliderConstraintDoubleData_1angularLowerLimit_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  Bullet::btSliderConstraintDoubleData *arg1 = (Bullet::btSliderConstraintDoubleData *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btSliderConstraintDoubleData **)&jarg1; 
  result = (double) ((arg1)->m_angularLowerLimit);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btSliderConstraintDoubleData_1useLinearReferenceFrameA_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Bullet::btSliderConstraintDoubleData *arg1 = (Bullet::btSliderConstraintDoubleData *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btSliderConstraintDoubleData **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_useLinearReferenceFrameA = arg2;
}


SWIGEXPORT jint JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btSliderConstraintDoubleData_1useLinearReferenceFrameA_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Bullet::btSliderConstraintDoubleData *arg1 = (Bullet::btSliderConstraintDoubleData *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btSliderConstraintDoubleData **)&jarg1; 
  result = (int) ((arg1)->m_useLinearReferenceFrameA);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btSliderConstraintDoubleData_1useOffsetForConstraintFrame_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Bullet::btSliderConstraintDoubleData *arg1 = (Bullet::btSliderConstraintDoubleData *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btSliderConstraintDoubleData **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_useOffsetForConstraintFrame = arg2;
}


SWIGEXPORT jint JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btSliderConstraintDoubleData_1useOffsetForConstraintFrame_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Bullet::btSliderConstraintDoubleData *arg1 = (Bullet::btSliderConstraintDoubleData *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btSliderConstraintDoubleData **)&jarg1; 
  result = (int) ((arg1)->m_useOffsetForConstraintFrame);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_new_1btSliderConstraintDoubleData(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Bullet::btSliderConstraintDoubleData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Bullet::btSliderConstraintDoubleData *)new Bullet::btSliderConstraintDoubleData();
  *(Bullet::btSliderConstraintDoubleData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_delete_1btSliderConstraintDoubleData(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Bullet::btSliderConstraintDoubleData *arg1 = (Bullet::btSliderConstraintDoubleData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Bullet::btSliderConstraintDoubleData **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btGearConstraintFloatData_1typeConstraintData_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Bullet::btGearConstraintFloatData *arg1 = (Bullet::btGearConstraintFloatData *) 0 ;
  Bullet::btTypedConstraintFloatData *arg2 = (Bullet::btTypedConstraintFloatData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Bullet::btGearConstraintFloatData **)&jarg1; 
  arg2 = *(Bullet::btTypedConstraintFloatData **)&jarg2; 
  if (arg1) (arg1)->m_typeConstraintData = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btGearConstraintFloatData_1typeConstraintData_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Bullet::btGearConstraintFloatData *arg1 = (Bullet::btGearConstraintFloatData *) 0 ;
  Bullet::btTypedConstraintFloatData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btGearConstraintFloatData **)&jarg1; 
  result = (Bullet::btTypedConstraintFloatData *)& ((arg1)->m_typeConstraintData);
  *(Bullet::btTypedConstraintFloatData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btGearConstraintFloatData_1axisInA_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Bullet::btGearConstraintFloatData *arg1 = (Bullet::btGearConstraintFloatData *) 0 ;
  Bullet::btVector3FloatData *arg2 = (Bullet::btVector3FloatData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Bullet::btGearConstraintFloatData **)&jarg1; 
  arg2 = *(Bullet::btVector3FloatData **)&jarg2; 
  if (arg1) (arg1)->m_axisInA = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btGearConstraintFloatData_1axisInA_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Bullet::btGearConstraintFloatData *arg1 = (Bullet::btGearConstraintFloatData *) 0 ;
  Bullet::btVector3FloatData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btGearConstraintFloatData **)&jarg1; 
  result = (Bullet::btVector3FloatData *)& ((arg1)->m_axisInA);
  *(Bullet::btVector3FloatData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btGearConstraintFloatData_1axisInB_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Bullet::btGearConstraintFloatData *arg1 = (Bullet::btGearConstraintFloatData *) 0 ;
  Bullet::btVector3FloatData *arg2 = (Bullet::btVector3FloatData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Bullet::btGearConstraintFloatData **)&jarg1; 
  arg2 = *(Bullet::btVector3FloatData **)&jarg2; 
  if (arg1) (arg1)->m_axisInB = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btGearConstraintFloatData_1axisInB_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Bullet::btGearConstraintFloatData *arg1 = (Bullet::btGearConstraintFloatData *) 0 ;
  Bullet::btVector3FloatData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btGearConstraintFloatData **)&jarg1; 
  result = (Bullet::btVector3FloatData *)& ((arg1)->m_axisInB);
  *(Bullet::btVector3FloatData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btGearConstraintFloatData_1ratio_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  Bullet::btGearConstraintFloatData *arg1 = (Bullet::btGearConstraintFloatData *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btGearConstraintFloatData **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->m_ratio = arg2;
}


SWIGEXPORT jfloat JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btGearConstraintFloatData_1ratio_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  Bullet::btGearConstraintFloatData *arg1 = (Bullet::btGearConstraintFloatData *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btGearConstraintFloatData **)&jarg1; 
  result = (float) ((arg1)->m_ratio);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btGearConstraintFloatData_1padding_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  Bullet::btGearConstraintFloatData *arg1 = (Bullet::btGearConstraintFloatData *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btGearConstraintFloatData **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->m_padding, (const char *)arg2, 4-1);
      arg1->m_padding[4-1] = 0;
    } else {
      arg1->m_padding[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btGearConstraintFloatData_1padding_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  Bullet::btGearConstraintFloatData *arg1 = (Bullet::btGearConstraintFloatData *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btGearConstraintFloatData **)&jarg1; 
  result = (char *)(char *) ((arg1)->m_padding);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_new_1btGearConstraintFloatData(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Bullet::btGearConstraintFloatData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Bullet::btGearConstraintFloatData *)new Bullet::btGearConstraintFloatData();
  *(Bullet::btGearConstraintFloatData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_delete_1btGearConstraintFloatData(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Bullet::btGearConstraintFloatData *arg1 = (Bullet::btGearConstraintFloatData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Bullet::btGearConstraintFloatData **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btGearConstraintDoubleData_1typeConstraintData_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Bullet::btGearConstraintDoubleData *arg1 = (Bullet::btGearConstraintDoubleData *) 0 ;
  Bullet::btTypedConstraintDoubleData *arg2 = (Bullet::btTypedConstraintDoubleData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Bullet::btGearConstraintDoubleData **)&jarg1; 
  arg2 = *(Bullet::btTypedConstraintDoubleData **)&jarg2; 
  if (arg1) (arg1)->m_typeConstraintData = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btGearConstraintDoubleData_1typeConstraintData_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Bullet::btGearConstraintDoubleData *arg1 = (Bullet::btGearConstraintDoubleData *) 0 ;
  Bullet::btTypedConstraintDoubleData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btGearConstraintDoubleData **)&jarg1; 
  result = (Bullet::btTypedConstraintDoubleData *)& ((arg1)->m_typeConstraintData);
  *(Bullet::btTypedConstraintDoubleData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btGearConstraintDoubleData_1axisInA_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Bullet::btGearConstraintDoubleData *arg1 = (Bullet::btGearConstraintDoubleData *) 0 ;
  Bullet::btVector3DoubleData *arg2 = (Bullet::btVector3DoubleData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Bullet::btGearConstraintDoubleData **)&jarg1; 
  arg2 = *(Bullet::btVector3DoubleData **)&jarg2; 
  if (arg1) (arg1)->m_axisInA = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btGearConstraintDoubleData_1axisInA_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Bullet::btGearConstraintDoubleData *arg1 = (Bullet::btGearConstraintDoubleData *) 0 ;
  Bullet::btVector3DoubleData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btGearConstraintDoubleData **)&jarg1; 
  result = (Bullet::btVector3DoubleData *)& ((arg1)->m_axisInA);
  *(Bullet::btVector3DoubleData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btGearConstraintDoubleData_1axisInB_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Bullet::btGearConstraintDoubleData *arg1 = (Bullet::btGearConstraintDoubleData *) 0 ;
  Bullet::btVector3DoubleData *arg2 = (Bullet::btVector3DoubleData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Bullet::btGearConstraintDoubleData **)&jarg1; 
  arg2 = *(Bullet::btVector3DoubleData **)&jarg2; 
  if (arg1) (arg1)->m_axisInB = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btGearConstraintDoubleData_1axisInB_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Bullet::btGearConstraintDoubleData *arg1 = (Bullet::btGearConstraintDoubleData *) 0 ;
  Bullet::btVector3DoubleData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btGearConstraintDoubleData **)&jarg1; 
  result = (Bullet::btVector3DoubleData *)& ((arg1)->m_axisInB);
  *(Bullet::btVector3DoubleData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btGearConstraintDoubleData_1ratio_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  Bullet::btGearConstraintDoubleData *arg1 = (Bullet::btGearConstraintDoubleData *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btGearConstraintDoubleData **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->m_ratio = arg2;
}


SWIGEXPORT jdouble JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btGearConstraintDoubleData_1ratio_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  Bullet::btGearConstraintDoubleData *arg1 = (Bullet::btGearConstraintDoubleData *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btGearConstraintDoubleData **)&jarg1; 
  result = (double) ((arg1)->m_ratio);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_new_1btGearConstraintDoubleData(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Bullet::btGearConstraintDoubleData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Bullet::btGearConstraintDoubleData *)new Bullet::btGearConstraintDoubleData();
  *(Bullet::btGearConstraintDoubleData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_delete_1btGearConstraintDoubleData(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Bullet::btGearConstraintDoubleData *arg1 = (Bullet::btGearConstraintDoubleData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Bullet::btGearConstraintDoubleData **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_SoftBodyMaterialData_1linearStiffness_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  Bullet::SoftBodyMaterialData *arg1 = (Bullet::SoftBodyMaterialData *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::SoftBodyMaterialData **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->m_linearStiffness = arg2;
}


SWIGEXPORT jfloat JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_SoftBodyMaterialData_1linearStiffness_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  Bullet::SoftBodyMaterialData *arg1 = (Bullet::SoftBodyMaterialData *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::SoftBodyMaterialData **)&jarg1; 
  result = (float) ((arg1)->m_linearStiffness);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_SoftBodyMaterialData_1angularStiffness_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  Bullet::SoftBodyMaterialData *arg1 = (Bullet::SoftBodyMaterialData *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::SoftBodyMaterialData **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->m_angularStiffness = arg2;
}


SWIGEXPORT jfloat JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_SoftBodyMaterialData_1angularStiffness_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  Bullet::SoftBodyMaterialData *arg1 = (Bullet::SoftBodyMaterialData *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::SoftBodyMaterialData **)&jarg1; 
  result = (float) ((arg1)->m_angularStiffness);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_SoftBodyMaterialData_1volumeStiffness_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  Bullet::SoftBodyMaterialData *arg1 = (Bullet::SoftBodyMaterialData *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::SoftBodyMaterialData **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->m_volumeStiffness = arg2;
}


SWIGEXPORT jfloat JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_SoftBodyMaterialData_1volumeStiffness_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  Bullet::SoftBodyMaterialData *arg1 = (Bullet::SoftBodyMaterialData *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::SoftBodyMaterialData **)&jarg1; 
  result = (float) ((arg1)->m_volumeStiffness);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_SoftBodyMaterialData_1flags_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Bullet::SoftBodyMaterialData *arg1 = (Bullet::SoftBodyMaterialData *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::SoftBodyMaterialData **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_flags = arg2;
}


SWIGEXPORT jint JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_SoftBodyMaterialData_1flags_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Bullet::SoftBodyMaterialData *arg1 = (Bullet::SoftBodyMaterialData *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::SoftBodyMaterialData **)&jarg1; 
  result = (int) ((arg1)->m_flags);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_new_1SoftBodyMaterialData(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Bullet::SoftBodyMaterialData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Bullet::SoftBodyMaterialData *)new Bullet::SoftBodyMaterialData();
  *(Bullet::SoftBodyMaterialData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_delete_1SoftBodyMaterialData(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Bullet::SoftBodyMaterialData *arg1 = (Bullet::SoftBodyMaterialData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Bullet::SoftBodyMaterialData **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_SoftBodyNodeData_1material_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Bullet::SoftBodyNodeData *arg1 = (Bullet::SoftBodyNodeData *) 0 ;
  Bullet::SoftBodyMaterialData *arg2 = (Bullet::SoftBodyMaterialData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Bullet::SoftBodyNodeData **)&jarg1; 
  arg2 = *(Bullet::SoftBodyMaterialData **)&jarg2; 
  if (arg1) (arg1)->m_material = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_SoftBodyNodeData_1material_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Bullet::SoftBodyNodeData *arg1 = (Bullet::SoftBodyNodeData *) 0 ;
  Bullet::SoftBodyMaterialData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::SoftBodyNodeData **)&jarg1; 
  result = (Bullet::SoftBodyMaterialData *) ((arg1)->m_material);
  *(Bullet::SoftBodyMaterialData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_SoftBodyNodeData_1position_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Bullet::SoftBodyNodeData *arg1 = (Bullet::SoftBodyNodeData *) 0 ;
  Bullet::btVector3FloatData *arg2 = (Bullet::btVector3FloatData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Bullet::SoftBodyNodeData **)&jarg1; 
  arg2 = *(Bullet::btVector3FloatData **)&jarg2; 
  if (arg1) (arg1)->m_position = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_SoftBodyNodeData_1position_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Bullet::SoftBodyNodeData *arg1 = (Bullet::SoftBodyNodeData *) 0 ;
  Bullet::btVector3FloatData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::SoftBodyNodeData **)&jarg1; 
  result = (Bullet::btVector3FloatData *)& ((arg1)->m_position);
  *(Bullet::btVector3FloatData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_SoftBodyNodeData_1previousPosition_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Bullet::SoftBodyNodeData *arg1 = (Bullet::SoftBodyNodeData *) 0 ;
  Bullet::btVector3FloatData *arg2 = (Bullet::btVector3FloatData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Bullet::SoftBodyNodeData **)&jarg1; 
  arg2 = *(Bullet::btVector3FloatData **)&jarg2; 
  if (arg1) (arg1)->m_previousPosition = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_SoftBodyNodeData_1previousPosition_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Bullet::SoftBodyNodeData *arg1 = (Bullet::SoftBodyNodeData *) 0 ;
  Bullet::btVector3FloatData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::SoftBodyNodeData **)&jarg1; 
  result = (Bullet::btVector3FloatData *)& ((arg1)->m_previousPosition);
  *(Bullet::btVector3FloatData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_SoftBodyNodeData_1velocity_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Bullet::SoftBodyNodeData *arg1 = (Bullet::SoftBodyNodeData *) 0 ;
  Bullet::btVector3FloatData *arg2 = (Bullet::btVector3FloatData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Bullet::SoftBodyNodeData **)&jarg1; 
  arg2 = *(Bullet::btVector3FloatData **)&jarg2; 
  if (arg1) (arg1)->m_velocity = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_SoftBodyNodeData_1velocity_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Bullet::SoftBodyNodeData *arg1 = (Bullet::SoftBodyNodeData *) 0 ;
  Bullet::btVector3FloatData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::SoftBodyNodeData **)&jarg1; 
  result = (Bullet::btVector3FloatData *)& ((arg1)->m_velocity);
  *(Bullet::btVector3FloatData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_SoftBodyNodeData_1accumulatedForce_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Bullet::SoftBodyNodeData *arg1 = (Bullet::SoftBodyNodeData *) 0 ;
  Bullet::btVector3FloatData *arg2 = (Bullet::btVector3FloatData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Bullet::SoftBodyNodeData **)&jarg1; 
  arg2 = *(Bullet::btVector3FloatData **)&jarg2; 
  if (arg1) (arg1)->m_accumulatedForce = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_SoftBodyNodeData_1accumulatedForce_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Bullet::SoftBodyNodeData *arg1 = (Bullet::SoftBodyNodeData *) 0 ;
  Bullet::btVector3FloatData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::SoftBodyNodeData **)&jarg1; 
  result = (Bullet::btVector3FloatData *)& ((arg1)->m_accumulatedForce);
  *(Bullet::btVector3FloatData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_SoftBodyNodeData_1normal_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Bullet::SoftBodyNodeData *arg1 = (Bullet::SoftBodyNodeData *) 0 ;
  Bullet::btVector3FloatData *arg2 = (Bullet::btVector3FloatData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Bullet::SoftBodyNodeData **)&jarg1; 
  arg2 = *(Bullet::btVector3FloatData **)&jarg2; 
  if (arg1) (arg1)->m_normal = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_SoftBodyNodeData_1normal_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Bullet::SoftBodyNodeData *arg1 = (Bullet::SoftBodyNodeData *) 0 ;
  Bullet::btVector3FloatData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::SoftBodyNodeData **)&jarg1; 
  result = (Bullet::btVector3FloatData *)& ((arg1)->m_normal);
  *(Bullet::btVector3FloatData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_SoftBodyNodeData_1inverseMass_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  Bullet::SoftBodyNodeData *arg1 = (Bullet::SoftBodyNodeData *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::SoftBodyNodeData **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->m_inverseMass = arg2;
}


SWIGEXPORT jfloat JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_SoftBodyNodeData_1inverseMass_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  Bullet::SoftBodyNodeData *arg1 = (Bullet::SoftBodyNodeData *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::SoftBodyNodeData **)&jarg1; 
  result = (float) ((arg1)->m_inverseMass);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_SoftBodyNodeData_1area_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  Bullet::SoftBodyNodeData *arg1 = (Bullet::SoftBodyNodeData *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::SoftBodyNodeData **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->m_area = arg2;
}


SWIGEXPORT jfloat JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_SoftBodyNodeData_1area_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  Bullet::SoftBodyNodeData *arg1 = (Bullet::SoftBodyNodeData *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::SoftBodyNodeData **)&jarg1; 
  result = (float) ((arg1)->m_area);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_SoftBodyNodeData_1attach_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Bullet::SoftBodyNodeData *arg1 = (Bullet::SoftBodyNodeData *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::SoftBodyNodeData **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_attach = arg2;
}


SWIGEXPORT jint JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_SoftBodyNodeData_1attach_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Bullet::SoftBodyNodeData *arg1 = (Bullet::SoftBodyNodeData *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::SoftBodyNodeData **)&jarg1; 
  result = (int) ((arg1)->m_attach);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_SoftBodyNodeData_1pad_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Bullet::SoftBodyNodeData *arg1 = (Bullet::SoftBodyNodeData *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::SoftBodyNodeData **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_pad = arg2;
}


SWIGEXPORT jint JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_SoftBodyNodeData_1pad_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Bullet::SoftBodyNodeData *arg1 = (Bullet::SoftBodyNodeData *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::SoftBodyNodeData **)&jarg1; 
  result = (int) ((arg1)->m_pad);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_new_1SoftBodyNodeData(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Bullet::SoftBodyNodeData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Bullet::SoftBodyNodeData *)new Bullet::SoftBodyNodeData();
  *(Bullet::SoftBodyNodeData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_delete_1SoftBodyNodeData(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Bullet::SoftBodyNodeData *arg1 = (Bullet::SoftBodyNodeData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Bullet::SoftBodyNodeData **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_SoftBodyLinkData_1material_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Bullet::SoftBodyLinkData *arg1 = (Bullet::SoftBodyLinkData *) 0 ;
  Bullet::SoftBodyMaterialData *arg2 = (Bullet::SoftBodyMaterialData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Bullet::SoftBodyLinkData **)&jarg1; 
  arg2 = *(Bullet::SoftBodyMaterialData **)&jarg2; 
  if (arg1) (arg1)->m_material = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_SoftBodyLinkData_1material_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Bullet::SoftBodyLinkData *arg1 = (Bullet::SoftBodyLinkData *) 0 ;
  Bullet::SoftBodyMaterialData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::SoftBodyLinkData **)&jarg1; 
  result = (Bullet::SoftBodyMaterialData *) ((arg1)->m_material);
  *(Bullet::SoftBodyMaterialData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_SoftBodyLinkData_1nodeIndices_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jintArray jarg2) {
  Bullet::SoftBodyLinkData *arg1 = (Bullet::SoftBodyLinkData *) 0 ;
  int *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::SoftBodyLinkData **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != 2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  arg2 = (int *)jenv->GetPrimitiveArrayCritical(jarg2, 0); 
  {
    size_t ii;
    int *b = (int *) arg1->m_nodeIndices;
    for (ii = 0; ii < (size_t)2; ii++) b[ii] = *((int *) arg2 + ii);
  }
  jenv->ReleasePrimitiveArrayCritical(jarg2, (int *)arg2, 0); 
}


SWIGEXPORT jintArray JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_SoftBodyLinkData_1nodeIndices_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jintArray jresult = 0 ;
  Bullet::SoftBodyLinkData *arg1 = (Bullet::SoftBodyLinkData *) 0 ;
  int *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::SoftBodyLinkData **)&jarg1; 
  result = (int *)(int *) ((arg1)->m_nodeIndices);
  /*jresult = SWIG_JavaArrayOut##Int(jenv, (int *)result, 2);*/ 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_SoftBodyLinkData_1restLength_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  Bullet::SoftBodyLinkData *arg1 = (Bullet::SoftBodyLinkData *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::SoftBodyLinkData **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->m_restLength = arg2;
}


SWIGEXPORT jfloat JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_SoftBodyLinkData_1restLength_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  Bullet::SoftBodyLinkData *arg1 = (Bullet::SoftBodyLinkData *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::SoftBodyLinkData **)&jarg1; 
  result = (float) ((arg1)->m_restLength);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_SoftBodyLinkData_1bbending_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Bullet::SoftBodyLinkData *arg1 = (Bullet::SoftBodyLinkData *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::SoftBodyLinkData **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_bbending = arg2;
}


SWIGEXPORT jint JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_SoftBodyLinkData_1bbending_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Bullet::SoftBodyLinkData *arg1 = (Bullet::SoftBodyLinkData *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::SoftBodyLinkData **)&jarg1; 
  result = (int) ((arg1)->m_bbending);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_new_1SoftBodyLinkData(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Bullet::SoftBodyLinkData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Bullet::SoftBodyLinkData *)new Bullet::SoftBodyLinkData();
  *(Bullet::SoftBodyLinkData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_delete_1SoftBodyLinkData(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Bullet::SoftBodyLinkData *arg1 = (Bullet::SoftBodyLinkData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Bullet::SoftBodyLinkData **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_SoftBodyFaceData_1normal_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Bullet::SoftBodyFaceData *arg1 = (Bullet::SoftBodyFaceData *) 0 ;
  Bullet::btVector3FloatData *arg2 = (Bullet::btVector3FloatData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Bullet::SoftBodyFaceData **)&jarg1; 
  arg2 = *(Bullet::btVector3FloatData **)&jarg2; 
  if (arg1) (arg1)->m_normal = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_SoftBodyFaceData_1normal_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Bullet::SoftBodyFaceData *arg1 = (Bullet::SoftBodyFaceData *) 0 ;
  Bullet::btVector3FloatData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::SoftBodyFaceData **)&jarg1; 
  result = (Bullet::btVector3FloatData *)& ((arg1)->m_normal);
  *(Bullet::btVector3FloatData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_SoftBodyFaceData_1material_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Bullet::SoftBodyFaceData *arg1 = (Bullet::SoftBodyFaceData *) 0 ;
  Bullet::SoftBodyMaterialData *arg2 = (Bullet::SoftBodyMaterialData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Bullet::SoftBodyFaceData **)&jarg1; 
  arg2 = *(Bullet::SoftBodyMaterialData **)&jarg2; 
  if (arg1) (arg1)->m_material = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_SoftBodyFaceData_1material_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Bullet::SoftBodyFaceData *arg1 = (Bullet::SoftBodyFaceData *) 0 ;
  Bullet::SoftBodyMaterialData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::SoftBodyFaceData **)&jarg1; 
  result = (Bullet::SoftBodyMaterialData *) ((arg1)->m_material);
  *(Bullet::SoftBodyMaterialData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_SoftBodyFaceData_1nodeIndices_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jintArray jarg2) {
  Bullet::SoftBodyFaceData *arg1 = (Bullet::SoftBodyFaceData *) 0 ;
  int *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::SoftBodyFaceData **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  arg2 = (int *)jenv->GetPrimitiveArrayCritical(jarg2, 0); 
  {
    size_t ii;
    int *b = (int *) arg1->m_nodeIndices;
    for (ii = 0; ii < (size_t)3; ii++) b[ii] = *((int *) arg2 + ii);
  }
  jenv->ReleasePrimitiveArrayCritical(jarg2, (int *)arg2, 0); 
}


SWIGEXPORT jintArray JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_SoftBodyFaceData_1nodeIndices_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jintArray jresult = 0 ;
  Bullet::SoftBodyFaceData *arg1 = (Bullet::SoftBodyFaceData *) 0 ;
  int *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::SoftBodyFaceData **)&jarg1; 
  result = (int *)(int *) ((arg1)->m_nodeIndices);
  /*jresult = SWIG_JavaArrayOut##Int(jenv, (int *)result, 3);*/ 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_SoftBodyFaceData_1restArea_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  Bullet::SoftBodyFaceData *arg1 = (Bullet::SoftBodyFaceData *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::SoftBodyFaceData **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->m_restArea = arg2;
}


SWIGEXPORT jfloat JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_SoftBodyFaceData_1restArea_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  Bullet::SoftBodyFaceData *arg1 = (Bullet::SoftBodyFaceData *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::SoftBodyFaceData **)&jarg1; 
  result = (float) ((arg1)->m_restArea);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_new_1SoftBodyFaceData(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Bullet::SoftBodyFaceData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Bullet::SoftBodyFaceData *)new Bullet::SoftBodyFaceData();
  *(Bullet::SoftBodyFaceData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_delete_1SoftBodyFaceData(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Bullet::SoftBodyFaceData *arg1 = (Bullet::SoftBodyFaceData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Bullet::SoftBodyFaceData **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_SoftBodyTetraData_1c0_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Bullet::SoftBodyTetraData *arg1 = (Bullet::SoftBodyTetraData *) 0 ;
  Bullet::btVector3FloatData *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Bullet::SoftBodyTetraData **)&jarg1; 
  arg2 = *(Bullet::btVector3FloatData **)&jarg2; 
  {
    size_t ii;
    Bullet::btVector3FloatData *b = (Bullet::btVector3FloatData *) arg1->m_c0;
    for (ii = 0; ii < (size_t)4; ii++) b[ii] = *((Bullet::btVector3FloatData *) arg2 + ii);
  }
  
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_SoftBodyTetraData_1c0_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Bullet::SoftBodyTetraData *arg1 = (Bullet::SoftBodyTetraData *) 0 ;
  Bullet::btVector3FloatData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::SoftBodyTetraData **)&jarg1; 
  result = (Bullet::btVector3FloatData *)(Bullet::btVector3FloatData *) ((arg1)->m_c0);
  *(Bullet::btVector3FloatData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_SoftBodyTetraData_1material_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Bullet::SoftBodyTetraData *arg1 = (Bullet::SoftBodyTetraData *) 0 ;
  Bullet::SoftBodyMaterialData *arg2 = (Bullet::SoftBodyMaterialData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Bullet::SoftBodyTetraData **)&jarg1; 
  arg2 = *(Bullet::SoftBodyMaterialData **)&jarg2; 
  if (arg1) (arg1)->m_material = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_SoftBodyTetraData_1material_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Bullet::SoftBodyTetraData *arg1 = (Bullet::SoftBodyTetraData *) 0 ;
  Bullet::SoftBodyMaterialData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::SoftBodyTetraData **)&jarg1; 
  result = (Bullet::SoftBodyMaterialData *) ((arg1)->m_material);
  *(Bullet::SoftBodyMaterialData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_SoftBodyTetraData_1nodeIndices_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jintArray jarg2) {
  Bullet::SoftBodyTetraData *arg1 = (Bullet::SoftBodyTetraData *) 0 ;
  int *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::SoftBodyTetraData **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != 4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  arg2 = (int *)jenv->GetPrimitiveArrayCritical(jarg2, 0); 
  {
    size_t ii;
    int *b = (int *) arg1->m_nodeIndices;
    for (ii = 0; ii < (size_t)4; ii++) b[ii] = *((int *) arg2 + ii);
  }
  jenv->ReleasePrimitiveArrayCritical(jarg2, (int *)arg2, 0); 
}


SWIGEXPORT jintArray JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_SoftBodyTetraData_1nodeIndices_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jintArray jresult = 0 ;
  Bullet::SoftBodyTetraData *arg1 = (Bullet::SoftBodyTetraData *) 0 ;
  int *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::SoftBodyTetraData **)&jarg1; 
  result = (int *)(int *) ((arg1)->m_nodeIndices);
  /*jresult = SWIG_JavaArrayOut##Int(jenv, (int *)result, 4);*/ 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_SoftBodyTetraData_1restVolume_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  Bullet::SoftBodyTetraData *arg1 = (Bullet::SoftBodyTetraData *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::SoftBodyTetraData **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->m_restVolume = arg2;
}


SWIGEXPORT jfloat JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_SoftBodyTetraData_1restVolume_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  Bullet::SoftBodyTetraData *arg1 = (Bullet::SoftBodyTetraData *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::SoftBodyTetraData **)&jarg1; 
  result = (float) ((arg1)->m_restVolume);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_SoftBodyTetraData_1c1_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  Bullet::SoftBodyTetraData *arg1 = (Bullet::SoftBodyTetraData *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::SoftBodyTetraData **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->m_c1 = arg2;
}


SWIGEXPORT jfloat JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_SoftBodyTetraData_1c1_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  Bullet::SoftBodyTetraData *arg1 = (Bullet::SoftBodyTetraData *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::SoftBodyTetraData **)&jarg1; 
  result = (float) ((arg1)->m_c1);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_SoftBodyTetraData_1c2_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  Bullet::SoftBodyTetraData *arg1 = (Bullet::SoftBodyTetraData *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::SoftBodyTetraData **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->m_c2 = arg2;
}


SWIGEXPORT jfloat JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_SoftBodyTetraData_1c2_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  Bullet::SoftBodyTetraData *arg1 = (Bullet::SoftBodyTetraData *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::SoftBodyTetraData **)&jarg1; 
  result = (float) ((arg1)->m_c2);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_SoftBodyTetraData_1pad_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Bullet::SoftBodyTetraData *arg1 = (Bullet::SoftBodyTetraData *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::SoftBodyTetraData **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_pad = arg2;
}


SWIGEXPORT jint JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_SoftBodyTetraData_1pad_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Bullet::SoftBodyTetraData *arg1 = (Bullet::SoftBodyTetraData *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::SoftBodyTetraData **)&jarg1; 
  result = (int) ((arg1)->m_pad);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_new_1SoftBodyTetraData(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Bullet::SoftBodyTetraData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Bullet::SoftBodyTetraData *)new Bullet::SoftBodyTetraData();
  *(Bullet::SoftBodyTetraData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_delete_1SoftBodyTetraData(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Bullet::SoftBodyTetraData *arg1 = (Bullet::SoftBodyTetraData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Bullet::SoftBodyTetraData **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_SoftRigidAnchorData_1c0_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Bullet::SoftRigidAnchorData *arg1 = (Bullet::SoftRigidAnchorData *) 0 ;
  Bullet::btMatrix3x3FloatData *arg2 = (Bullet::btMatrix3x3FloatData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Bullet::SoftRigidAnchorData **)&jarg1; 
  arg2 = *(Bullet::btMatrix3x3FloatData **)&jarg2; 
  if (arg1) (arg1)->m_c0 = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_SoftRigidAnchorData_1c0_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Bullet::SoftRigidAnchorData *arg1 = (Bullet::SoftRigidAnchorData *) 0 ;
  Bullet::btMatrix3x3FloatData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::SoftRigidAnchorData **)&jarg1; 
  result = (Bullet::btMatrix3x3FloatData *)& ((arg1)->m_c0);
  *(Bullet::btMatrix3x3FloatData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_SoftRigidAnchorData_1c1_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Bullet::SoftRigidAnchorData *arg1 = (Bullet::SoftRigidAnchorData *) 0 ;
  Bullet::btVector3FloatData *arg2 = (Bullet::btVector3FloatData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Bullet::SoftRigidAnchorData **)&jarg1; 
  arg2 = *(Bullet::btVector3FloatData **)&jarg2; 
  if (arg1) (arg1)->m_c1 = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_SoftRigidAnchorData_1c1_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Bullet::SoftRigidAnchorData *arg1 = (Bullet::SoftRigidAnchorData *) 0 ;
  Bullet::btVector3FloatData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::SoftRigidAnchorData **)&jarg1; 
  result = (Bullet::btVector3FloatData *)& ((arg1)->m_c1);
  *(Bullet::btVector3FloatData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_SoftRigidAnchorData_1localFrame_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Bullet::SoftRigidAnchorData *arg1 = (Bullet::SoftRigidAnchorData *) 0 ;
  Bullet::btVector3FloatData *arg2 = (Bullet::btVector3FloatData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Bullet::SoftRigidAnchorData **)&jarg1; 
  arg2 = *(Bullet::btVector3FloatData **)&jarg2; 
  if (arg1) (arg1)->m_localFrame = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_SoftRigidAnchorData_1localFrame_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Bullet::SoftRigidAnchorData *arg1 = (Bullet::SoftRigidAnchorData *) 0 ;
  Bullet::btVector3FloatData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::SoftRigidAnchorData **)&jarg1; 
  result = (Bullet::btVector3FloatData *)& ((arg1)->m_localFrame);
  *(Bullet::btVector3FloatData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_SoftRigidAnchorData_1rigidBody_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Bullet::SoftRigidAnchorData *arg1 = (Bullet::SoftRigidAnchorData *) 0 ;
  Bullet::bInvalidHandle *arg2 = (Bullet::bInvalidHandle *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Bullet::SoftRigidAnchorData **)&jarg1; 
  arg2 = *(Bullet::bInvalidHandle **)&jarg2; 
  if (arg1) (arg1)->m_rigidBody = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_SoftRigidAnchorData_1rigidBody_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Bullet::SoftRigidAnchorData *arg1 = (Bullet::SoftRigidAnchorData *) 0 ;
  Bullet::bInvalidHandle *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::SoftRigidAnchorData **)&jarg1; 
  result = (Bullet::bInvalidHandle *) ((arg1)->m_rigidBody);
  *(Bullet::bInvalidHandle **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_SoftRigidAnchorData_1nodeIndex_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Bullet::SoftRigidAnchorData *arg1 = (Bullet::SoftRigidAnchorData *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::SoftRigidAnchorData **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_nodeIndex = arg2;
}


SWIGEXPORT jint JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_SoftRigidAnchorData_1nodeIndex_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Bullet::SoftRigidAnchorData *arg1 = (Bullet::SoftRigidAnchorData *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::SoftRigidAnchorData **)&jarg1; 
  result = (int) ((arg1)->m_nodeIndex);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_SoftRigidAnchorData_1c2_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  Bullet::SoftRigidAnchorData *arg1 = (Bullet::SoftRigidAnchorData *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::SoftRigidAnchorData **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->m_c2 = arg2;
}


SWIGEXPORT jfloat JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_SoftRigidAnchorData_1c2_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  Bullet::SoftRigidAnchorData *arg1 = (Bullet::SoftRigidAnchorData *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::SoftRigidAnchorData **)&jarg1; 
  result = (float) ((arg1)->m_c2);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_new_1SoftRigidAnchorData(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Bullet::SoftRigidAnchorData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Bullet::SoftRigidAnchorData *)new Bullet::SoftRigidAnchorData();
  *(Bullet::SoftRigidAnchorData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_delete_1SoftRigidAnchorData(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Bullet::SoftRigidAnchorData *arg1 = (Bullet::SoftRigidAnchorData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Bullet::SoftRigidAnchorData **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_SoftBodyConfigData_1aeroModel_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Bullet::SoftBodyConfigData *arg1 = (Bullet::SoftBodyConfigData *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::SoftBodyConfigData **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_aeroModel = arg2;
}


SWIGEXPORT jint JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_SoftBodyConfigData_1aeroModel_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Bullet::SoftBodyConfigData *arg1 = (Bullet::SoftBodyConfigData *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::SoftBodyConfigData **)&jarg1; 
  result = (int) ((arg1)->m_aeroModel);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_SoftBodyConfigData_1baumgarte_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  Bullet::SoftBodyConfigData *arg1 = (Bullet::SoftBodyConfigData *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::SoftBodyConfigData **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->m_baumgarte = arg2;
}


SWIGEXPORT jfloat JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_SoftBodyConfigData_1baumgarte_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  Bullet::SoftBodyConfigData *arg1 = (Bullet::SoftBodyConfigData *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::SoftBodyConfigData **)&jarg1; 
  result = (float) ((arg1)->m_baumgarte);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_SoftBodyConfigData_1damping_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  Bullet::SoftBodyConfigData *arg1 = (Bullet::SoftBodyConfigData *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::SoftBodyConfigData **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->m_damping = arg2;
}


SWIGEXPORT jfloat JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_SoftBodyConfigData_1damping_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  Bullet::SoftBodyConfigData *arg1 = (Bullet::SoftBodyConfigData *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::SoftBodyConfigData **)&jarg1; 
  result = (float) ((arg1)->m_damping);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_SoftBodyConfigData_1drag_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  Bullet::SoftBodyConfigData *arg1 = (Bullet::SoftBodyConfigData *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::SoftBodyConfigData **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->m_drag = arg2;
}


SWIGEXPORT jfloat JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_SoftBodyConfigData_1drag_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  Bullet::SoftBodyConfigData *arg1 = (Bullet::SoftBodyConfigData *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::SoftBodyConfigData **)&jarg1; 
  result = (float) ((arg1)->m_drag);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_SoftBodyConfigData_1lift_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  Bullet::SoftBodyConfigData *arg1 = (Bullet::SoftBodyConfigData *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::SoftBodyConfigData **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->m_lift = arg2;
}


SWIGEXPORT jfloat JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_SoftBodyConfigData_1lift_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  Bullet::SoftBodyConfigData *arg1 = (Bullet::SoftBodyConfigData *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::SoftBodyConfigData **)&jarg1; 
  result = (float) ((arg1)->m_lift);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_SoftBodyConfigData_1pressure_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  Bullet::SoftBodyConfigData *arg1 = (Bullet::SoftBodyConfigData *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::SoftBodyConfigData **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->m_pressure = arg2;
}


SWIGEXPORT jfloat JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_SoftBodyConfigData_1pressure_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  Bullet::SoftBodyConfigData *arg1 = (Bullet::SoftBodyConfigData *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::SoftBodyConfigData **)&jarg1; 
  result = (float) ((arg1)->m_pressure);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_SoftBodyConfigData_1volume_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  Bullet::SoftBodyConfigData *arg1 = (Bullet::SoftBodyConfigData *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::SoftBodyConfigData **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->m_volume = arg2;
}


SWIGEXPORT jfloat JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_SoftBodyConfigData_1volume_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  Bullet::SoftBodyConfigData *arg1 = (Bullet::SoftBodyConfigData *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::SoftBodyConfigData **)&jarg1; 
  result = (float) ((arg1)->m_volume);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_SoftBodyConfigData_1dynamicFriction_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  Bullet::SoftBodyConfigData *arg1 = (Bullet::SoftBodyConfigData *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::SoftBodyConfigData **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->m_dynamicFriction = arg2;
}


SWIGEXPORT jfloat JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_SoftBodyConfigData_1dynamicFriction_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  Bullet::SoftBodyConfigData *arg1 = (Bullet::SoftBodyConfigData *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::SoftBodyConfigData **)&jarg1; 
  result = (float) ((arg1)->m_dynamicFriction);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_SoftBodyConfigData_1poseMatch_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  Bullet::SoftBodyConfigData *arg1 = (Bullet::SoftBodyConfigData *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::SoftBodyConfigData **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->m_poseMatch = arg2;
}


SWIGEXPORT jfloat JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_SoftBodyConfigData_1poseMatch_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  Bullet::SoftBodyConfigData *arg1 = (Bullet::SoftBodyConfigData *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::SoftBodyConfigData **)&jarg1; 
  result = (float) ((arg1)->m_poseMatch);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_SoftBodyConfigData_1rigidContactHardness_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  Bullet::SoftBodyConfigData *arg1 = (Bullet::SoftBodyConfigData *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::SoftBodyConfigData **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->m_rigidContactHardness = arg2;
}


SWIGEXPORT jfloat JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_SoftBodyConfigData_1rigidContactHardness_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  Bullet::SoftBodyConfigData *arg1 = (Bullet::SoftBodyConfigData *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::SoftBodyConfigData **)&jarg1; 
  result = (float) ((arg1)->m_rigidContactHardness);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_SoftBodyConfigData_1kineticContactHardness_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  Bullet::SoftBodyConfigData *arg1 = (Bullet::SoftBodyConfigData *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::SoftBodyConfigData **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->m_kineticContactHardness = arg2;
}


SWIGEXPORT jfloat JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_SoftBodyConfigData_1kineticContactHardness_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  Bullet::SoftBodyConfigData *arg1 = (Bullet::SoftBodyConfigData *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::SoftBodyConfigData **)&jarg1; 
  result = (float) ((arg1)->m_kineticContactHardness);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_SoftBodyConfigData_1softContactHardness_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  Bullet::SoftBodyConfigData *arg1 = (Bullet::SoftBodyConfigData *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::SoftBodyConfigData **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->m_softContactHardness = arg2;
}


SWIGEXPORT jfloat JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_SoftBodyConfigData_1softContactHardness_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  Bullet::SoftBodyConfigData *arg1 = (Bullet::SoftBodyConfigData *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::SoftBodyConfigData **)&jarg1; 
  result = (float) ((arg1)->m_softContactHardness);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_SoftBodyConfigData_1anchorHardness_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  Bullet::SoftBodyConfigData *arg1 = (Bullet::SoftBodyConfigData *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::SoftBodyConfigData **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->m_anchorHardness = arg2;
}


SWIGEXPORT jfloat JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_SoftBodyConfigData_1anchorHardness_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  Bullet::SoftBodyConfigData *arg1 = (Bullet::SoftBodyConfigData *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::SoftBodyConfigData **)&jarg1; 
  result = (float) ((arg1)->m_anchorHardness);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_SoftBodyConfigData_1softRigidClusterHardness_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  Bullet::SoftBodyConfigData *arg1 = (Bullet::SoftBodyConfigData *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::SoftBodyConfigData **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->m_softRigidClusterHardness = arg2;
}


SWIGEXPORT jfloat JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_SoftBodyConfigData_1softRigidClusterHardness_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  Bullet::SoftBodyConfigData *arg1 = (Bullet::SoftBodyConfigData *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::SoftBodyConfigData **)&jarg1; 
  result = (float) ((arg1)->m_softRigidClusterHardness);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_SoftBodyConfigData_1softKineticClusterHardness_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  Bullet::SoftBodyConfigData *arg1 = (Bullet::SoftBodyConfigData *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::SoftBodyConfigData **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->m_softKineticClusterHardness = arg2;
}


SWIGEXPORT jfloat JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_SoftBodyConfigData_1softKineticClusterHardness_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  Bullet::SoftBodyConfigData *arg1 = (Bullet::SoftBodyConfigData *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::SoftBodyConfigData **)&jarg1; 
  result = (float) ((arg1)->m_softKineticClusterHardness);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_SoftBodyConfigData_1softSoftClusterHardness_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  Bullet::SoftBodyConfigData *arg1 = (Bullet::SoftBodyConfigData *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::SoftBodyConfigData **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->m_softSoftClusterHardness = arg2;
}


SWIGEXPORT jfloat JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_SoftBodyConfigData_1softSoftClusterHardness_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  Bullet::SoftBodyConfigData *arg1 = (Bullet::SoftBodyConfigData *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::SoftBodyConfigData **)&jarg1; 
  result = (float) ((arg1)->m_softSoftClusterHardness);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_SoftBodyConfigData_1softRigidClusterImpulseSplit_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  Bullet::SoftBodyConfigData *arg1 = (Bullet::SoftBodyConfigData *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::SoftBodyConfigData **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->m_softRigidClusterImpulseSplit = arg2;
}


SWIGEXPORT jfloat JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_SoftBodyConfigData_1softRigidClusterImpulseSplit_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  Bullet::SoftBodyConfigData *arg1 = (Bullet::SoftBodyConfigData *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::SoftBodyConfigData **)&jarg1; 
  result = (float) ((arg1)->m_softRigidClusterImpulseSplit);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_SoftBodyConfigData_1softKineticClusterImpulseSplit_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  Bullet::SoftBodyConfigData *arg1 = (Bullet::SoftBodyConfigData *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::SoftBodyConfigData **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->m_softKineticClusterImpulseSplit = arg2;
}


SWIGEXPORT jfloat JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_SoftBodyConfigData_1softKineticClusterImpulseSplit_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  Bullet::SoftBodyConfigData *arg1 = (Bullet::SoftBodyConfigData *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::SoftBodyConfigData **)&jarg1; 
  result = (float) ((arg1)->m_softKineticClusterImpulseSplit);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_SoftBodyConfigData_1softSoftClusterImpulseSplit_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  Bullet::SoftBodyConfigData *arg1 = (Bullet::SoftBodyConfigData *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::SoftBodyConfigData **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->m_softSoftClusterImpulseSplit = arg2;
}


SWIGEXPORT jfloat JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_SoftBodyConfigData_1softSoftClusterImpulseSplit_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  Bullet::SoftBodyConfigData *arg1 = (Bullet::SoftBodyConfigData *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::SoftBodyConfigData **)&jarg1; 
  result = (float) ((arg1)->m_softSoftClusterImpulseSplit);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_SoftBodyConfigData_1maxVolume_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  Bullet::SoftBodyConfigData *arg1 = (Bullet::SoftBodyConfigData *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::SoftBodyConfigData **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->m_maxVolume = arg2;
}


SWIGEXPORT jfloat JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_SoftBodyConfigData_1maxVolume_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  Bullet::SoftBodyConfigData *arg1 = (Bullet::SoftBodyConfigData *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::SoftBodyConfigData **)&jarg1; 
  result = (float) ((arg1)->m_maxVolume);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_SoftBodyConfigData_1timeScale_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  Bullet::SoftBodyConfigData *arg1 = (Bullet::SoftBodyConfigData *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::SoftBodyConfigData **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->m_timeScale = arg2;
}


SWIGEXPORT jfloat JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_SoftBodyConfigData_1timeScale_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  Bullet::SoftBodyConfigData *arg1 = (Bullet::SoftBodyConfigData *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::SoftBodyConfigData **)&jarg1; 
  result = (float) ((arg1)->m_timeScale);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_SoftBodyConfigData_1velocityIterations_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Bullet::SoftBodyConfigData *arg1 = (Bullet::SoftBodyConfigData *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::SoftBodyConfigData **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_velocityIterations = arg2;
}


SWIGEXPORT jint JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_SoftBodyConfigData_1velocityIterations_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Bullet::SoftBodyConfigData *arg1 = (Bullet::SoftBodyConfigData *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::SoftBodyConfigData **)&jarg1; 
  result = (int) ((arg1)->m_velocityIterations);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_SoftBodyConfigData_1positionIterations_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Bullet::SoftBodyConfigData *arg1 = (Bullet::SoftBodyConfigData *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::SoftBodyConfigData **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_positionIterations = arg2;
}


SWIGEXPORT jint JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_SoftBodyConfigData_1positionIterations_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Bullet::SoftBodyConfigData *arg1 = (Bullet::SoftBodyConfigData *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::SoftBodyConfigData **)&jarg1; 
  result = (int) ((arg1)->m_positionIterations);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_SoftBodyConfigData_1driftIterations_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Bullet::SoftBodyConfigData *arg1 = (Bullet::SoftBodyConfigData *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::SoftBodyConfigData **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_driftIterations = arg2;
}


SWIGEXPORT jint JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_SoftBodyConfigData_1driftIterations_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Bullet::SoftBodyConfigData *arg1 = (Bullet::SoftBodyConfigData *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::SoftBodyConfigData **)&jarg1; 
  result = (int) ((arg1)->m_driftIterations);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_SoftBodyConfigData_1clusterIterations_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Bullet::SoftBodyConfigData *arg1 = (Bullet::SoftBodyConfigData *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::SoftBodyConfigData **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_clusterIterations = arg2;
}


SWIGEXPORT jint JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_SoftBodyConfigData_1clusterIterations_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Bullet::SoftBodyConfigData *arg1 = (Bullet::SoftBodyConfigData *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::SoftBodyConfigData **)&jarg1; 
  result = (int) ((arg1)->m_clusterIterations);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_SoftBodyConfigData_1collisionFlags_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Bullet::SoftBodyConfigData *arg1 = (Bullet::SoftBodyConfigData *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::SoftBodyConfigData **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_collisionFlags = arg2;
}


SWIGEXPORT jint JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_SoftBodyConfigData_1collisionFlags_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Bullet::SoftBodyConfigData *arg1 = (Bullet::SoftBodyConfigData *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::SoftBodyConfigData **)&jarg1; 
  result = (int) ((arg1)->m_collisionFlags);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_new_1SoftBodyConfigData(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Bullet::SoftBodyConfigData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Bullet::SoftBodyConfigData *)new Bullet::SoftBodyConfigData();
  *(Bullet::SoftBodyConfigData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_delete_1SoftBodyConfigData(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Bullet::SoftBodyConfigData *arg1 = (Bullet::SoftBodyConfigData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Bullet::SoftBodyConfigData **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_SoftBodyPoseData_1rot_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Bullet::SoftBodyPoseData *arg1 = (Bullet::SoftBodyPoseData *) 0 ;
  Bullet::btMatrix3x3FloatData *arg2 = (Bullet::btMatrix3x3FloatData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Bullet::SoftBodyPoseData **)&jarg1; 
  arg2 = *(Bullet::btMatrix3x3FloatData **)&jarg2; 
  if (arg1) (arg1)->m_rot = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_SoftBodyPoseData_1rot_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Bullet::SoftBodyPoseData *arg1 = (Bullet::SoftBodyPoseData *) 0 ;
  Bullet::btMatrix3x3FloatData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::SoftBodyPoseData **)&jarg1; 
  result = (Bullet::btMatrix3x3FloatData *)& ((arg1)->m_rot);
  *(Bullet::btMatrix3x3FloatData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_SoftBodyPoseData_1scale_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Bullet::SoftBodyPoseData *arg1 = (Bullet::SoftBodyPoseData *) 0 ;
  Bullet::btMatrix3x3FloatData *arg2 = (Bullet::btMatrix3x3FloatData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Bullet::SoftBodyPoseData **)&jarg1; 
  arg2 = *(Bullet::btMatrix3x3FloatData **)&jarg2; 
  if (arg1) (arg1)->m_scale = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_SoftBodyPoseData_1scale_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Bullet::SoftBodyPoseData *arg1 = (Bullet::SoftBodyPoseData *) 0 ;
  Bullet::btMatrix3x3FloatData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::SoftBodyPoseData **)&jarg1; 
  result = (Bullet::btMatrix3x3FloatData *)& ((arg1)->m_scale);
  *(Bullet::btMatrix3x3FloatData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_SoftBodyPoseData_1aqq_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Bullet::SoftBodyPoseData *arg1 = (Bullet::SoftBodyPoseData *) 0 ;
  Bullet::btMatrix3x3FloatData *arg2 = (Bullet::btMatrix3x3FloatData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Bullet::SoftBodyPoseData **)&jarg1; 
  arg2 = *(Bullet::btMatrix3x3FloatData **)&jarg2; 
  if (arg1) (arg1)->m_aqq = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_SoftBodyPoseData_1aqq_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Bullet::SoftBodyPoseData *arg1 = (Bullet::SoftBodyPoseData *) 0 ;
  Bullet::btMatrix3x3FloatData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::SoftBodyPoseData **)&jarg1; 
  result = (Bullet::btMatrix3x3FloatData *)& ((arg1)->m_aqq);
  *(Bullet::btMatrix3x3FloatData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_SoftBodyPoseData_1com_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Bullet::SoftBodyPoseData *arg1 = (Bullet::SoftBodyPoseData *) 0 ;
  Bullet::btVector3FloatData *arg2 = (Bullet::btVector3FloatData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Bullet::SoftBodyPoseData **)&jarg1; 
  arg2 = *(Bullet::btVector3FloatData **)&jarg2; 
  if (arg1) (arg1)->m_com = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_SoftBodyPoseData_1com_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Bullet::SoftBodyPoseData *arg1 = (Bullet::SoftBodyPoseData *) 0 ;
  Bullet::btVector3FloatData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::SoftBodyPoseData **)&jarg1; 
  result = (Bullet::btVector3FloatData *)& ((arg1)->m_com);
  *(Bullet::btVector3FloatData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_SoftBodyPoseData_1positions_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Bullet::SoftBodyPoseData *arg1 = (Bullet::SoftBodyPoseData *) 0 ;
  Bullet::btVector3FloatData *arg2 = (Bullet::btVector3FloatData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Bullet::SoftBodyPoseData **)&jarg1; 
  arg2 = *(Bullet::btVector3FloatData **)&jarg2; 
  if (arg1) (arg1)->m_positions = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_SoftBodyPoseData_1positions_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Bullet::SoftBodyPoseData *arg1 = (Bullet::SoftBodyPoseData *) 0 ;
  Bullet::btVector3FloatData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::SoftBodyPoseData **)&jarg1; 
  result = (Bullet::btVector3FloatData *) ((arg1)->m_positions);
  *(Bullet::btVector3FloatData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_SoftBodyPoseData_1weights_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobject jarg2) {
  Bullet::SoftBodyPoseData *arg1 = (Bullet::SoftBodyPoseData *) 0 ;
  float *arg2 = (float *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::SoftBodyPoseData **)&jarg1; 
  {
    arg2 = (float*)jenv->GetDirectBufferAddress(jarg2);
    if (arg2 == NULL) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unable to get address of direct buffer. Buffer must be allocated direct.");
    }
  }
  {
    if (arg2) {
      arg1->m_weights = arg2;
    } else {
      arg1->m_weights = 0;
    }
  }
  
}


SWIGEXPORT jobject JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_SoftBodyPoseData_1weights_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jobject jresult = 0 ;
  Bullet::SoftBodyPoseData *arg1 = (Bullet::SoftBodyPoseData *) 0 ;
  float *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::SoftBodyPoseData **)&jarg1; 
  result = (float *) ((arg1)->m_weights);
  *(float **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_SoftBodyPoseData_1numPositions_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Bullet::SoftBodyPoseData *arg1 = (Bullet::SoftBodyPoseData *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::SoftBodyPoseData **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_numPositions = arg2;
}


SWIGEXPORT jint JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_SoftBodyPoseData_1numPositions_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Bullet::SoftBodyPoseData *arg1 = (Bullet::SoftBodyPoseData *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::SoftBodyPoseData **)&jarg1; 
  result = (int) ((arg1)->m_numPositions);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_SoftBodyPoseData_1numWeigts_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Bullet::SoftBodyPoseData *arg1 = (Bullet::SoftBodyPoseData *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::SoftBodyPoseData **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_numWeigts = arg2;
}


SWIGEXPORT jint JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_SoftBodyPoseData_1numWeigts_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Bullet::SoftBodyPoseData *arg1 = (Bullet::SoftBodyPoseData *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::SoftBodyPoseData **)&jarg1; 
  result = (int) ((arg1)->m_numWeigts);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_SoftBodyPoseData_1bvolume_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Bullet::SoftBodyPoseData *arg1 = (Bullet::SoftBodyPoseData *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::SoftBodyPoseData **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_bvolume = arg2;
}


SWIGEXPORT jint JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_SoftBodyPoseData_1bvolume_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Bullet::SoftBodyPoseData *arg1 = (Bullet::SoftBodyPoseData *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::SoftBodyPoseData **)&jarg1; 
  result = (int) ((arg1)->m_bvolume);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_SoftBodyPoseData_1bframe_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Bullet::SoftBodyPoseData *arg1 = (Bullet::SoftBodyPoseData *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::SoftBodyPoseData **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_bframe = arg2;
}


SWIGEXPORT jint JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_SoftBodyPoseData_1bframe_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Bullet::SoftBodyPoseData *arg1 = (Bullet::SoftBodyPoseData *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::SoftBodyPoseData **)&jarg1; 
  result = (int) ((arg1)->m_bframe);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_SoftBodyPoseData_1restVolume_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  Bullet::SoftBodyPoseData *arg1 = (Bullet::SoftBodyPoseData *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::SoftBodyPoseData **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->m_restVolume = arg2;
}


SWIGEXPORT jfloat JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_SoftBodyPoseData_1restVolume_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  Bullet::SoftBodyPoseData *arg1 = (Bullet::SoftBodyPoseData *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::SoftBodyPoseData **)&jarg1; 
  result = (float) ((arg1)->m_restVolume);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_SoftBodyPoseData_1pad_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Bullet::SoftBodyPoseData *arg1 = (Bullet::SoftBodyPoseData *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::SoftBodyPoseData **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_pad = arg2;
}


SWIGEXPORT jint JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_SoftBodyPoseData_1pad_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Bullet::SoftBodyPoseData *arg1 = (Bullet::SoftBodyPoseData *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::SoftBodyPoseData **)&jarg1; 
  result = (int) ((arg1)->m_pad);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_new_1SoftBodyPoseData(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Bullet::SoftBodyPoseData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Bullet::SoftBodyPoseData *)new Bullet::SoftBodyPoseData();
  *(Bullet::SoftBodyPoseData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_delete_1SoftBodyPoseData(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Bullet::SoftBodyPoseData *arg1 = (Bullet::SoftBodyPoseData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Bullet::SoftBodyPoseData **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_SoftBodyClusterData_1framexform_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Bullet::SoftBodyClusterData *arg1 = (Bullet::SoftBodyClusterData *) 0 ;
  Bullet::btTransformFloatData *arg2 = (Bullet::btTransformFloatData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Bullet::SoftBodyClusterData **)&jarg1; 
  arg2 = *(Bullet::btTransformFloatData **)&jarg2; 
  if (arg1) (arg1)->m_framexform = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_SoftBodyClusterData_1framexform_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Bullet::SoftBodyClusterData *arg1 = (Bullet::SoftBodyClusterData *) 0 ;
  Bullet::btTransformFloatData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::SoftBodyClusterData **)&jarg1; 
  result = (Bullet::btTransformFloatData *)& ((arg1)->m_framexform);
  *(Bullet::btTransformFloatData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_SoftBodyClusterData_1locii_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Bullet::SoftBodyClusterData *arg1 = (Bullet::SoftBodyClusterData *) 0 ;
  Bullet::btMatrix3x3FloatData *arg2 = (Bullet::btMatrix3x3FloatData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Bullet::SoftBodyClusterData **)&jarg1; 
  arg2 = *(Bullet::btMatrix3x3FloatData **)&jarg2; 
  if (arg1) (arg1)->m_locii = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_SoftBodyClusterData_1locii_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Bullet::SoftBodyClusterData *arg1 = (Bullet::SoftBodyClusterData *) 0 ;
  Bullet::btMatrix3x3FloatData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::SoftBodyClusterData **)&jarg1; 
  result = (Bullet::btMatrix3x3FloatData *)& ((arg1)->m_locii);
  *(Bullet::btMatrix3x3FloatData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_SoftBodyClusterData_1invwi_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Bullet::SoftBodyClusterData *arg1 = (Bullet::SoftBodyClusterData *) 0 ;
  Bullet::btMatrix3x3FloatData *arg2 = (Bullet::btMatrix3x3FloatData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Bullet::SoftBodyClusterData **)&jarg1; 
  arg2 = *(Bullet::btMatrix3x3FloatData **)&jarg2; 
  if (arg1) (arg1)->m_invwi = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_SoftBodyClusterData_1invwi_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Bullet::SoftBodyClusterData *arg1 = (Bullet::SoftBodyClusterData *) 0 ;
  Bullet::btMatrix3x3FloatData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::SoftBodyClusterData **)&jarg1; 
  result = (Bullet::btMatrix3x3FloatData *)& ((arg1)->m_invwi);
  *(Bullet::btMatrix3x3FloatData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_SoftBodyClusterData_1com_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Bullet::SoftBodyClusterData *arg1 = (Bullet::SoftBodyClusterData *) 0 ;
  Bullet::btVector3FloatData *arg2 = (Bullet::btVector3FloatData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Bullet::SoftBodyClusterData **)&jarg1; 
  arg2 = *(Bullet::btVector3FloatData **)&jarg2; 
  if (arg1) (arg1)->m_com = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_SoftBodyClusterData_1com_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Bullet::SoftBodyClusterData *arg1 = (Bullet::SoftBodyClusterData *) 0 ;
  Bullet::btVector3FloatData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::SoftBodyClusterData **)&jarg1; 
  result = (Bullet::btVector3FloatData *)& ((arg1)->m_com);
  *(Bullet::btVector3FloatData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_SoftBodyClusterData_1vimpulses_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Bullet::SoftBodyClusterData *arg1 = (Bullet::SoftBodyClusterData *) 0 ;
  Bullet::btVector3FloatData *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Bullet::SoftBodyClusterData **)&jarg1; 
  arg2 = *(Bullet::btVector3FloatData **)&jarg2; 
  {
    size_t ii;
    Bullet::btVector3FloatData *b = (Bullet::btVector3FloatData *) arg1->m_vimpulses;
    for (ii = 0; ii < (size_t)2; ii++) b[ii] = *((Bullet::btVector3FloatData *) arg2 + ii);
  }
  
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_SoftBodyClusterData_1vimpulses_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Bullet::SoftBodyClusterData *arg1 = (Bullet::SoftBodyClusterData *) 0 ;
  Bullet::btVector3FloatData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::SoftBodyClusterData **)&jarg1; 
  result = (Bullet::btVector3FloatData *)(Bullet::btVector3FloatData *) ((arg1)->m_vimpulses);
  *(Bullet::btVector3FloatData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_SoftBodyClusterData_1dimpulses_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Bullet::SoftBodyClusterData *arg1 = (Bullet::SoftBodyClusterData *) 0 ;
  Bullet::btVector3FloatData *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Bullet::SoftBodyClusterData **)&jarg1; 
  arg2 = *(Bullet::btVector3FloatData **)&jarg2; 
  {
    size_t ii;
    Bullet::btVector3FloatData *b = (Bullet::btVector3FloatData *) arg1->m_dimpulses;
    for (ii = 0; ii < (size_t)2; ii++) b[ii] = *((Bullet::btVector3FloatData *) arg2 + ii);
  }
  
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_SoftBodyClusterData_1dimpulses_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Bullet::SoftBodyClusterData *arg1 = (Bullet::SoftBodyClusterData *) 0 ;
  Bullet::btVector3FloatData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::SoftBodyClusterData **)&jarg1; 
  result = (Bullet::btVector3FloatData *)(Bullet::btVector3FloatData *) ((arg1)->m_dimpulses);
  *(Bullet::btVector3FloatData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_SoftBodyClusterData_1lv_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Bullet::SoftBodyClusterData *arg1 = (Bullet::SoftBodyClusterData *) 0 ;
  Bullet::btVector3FloatData *arg2 = (Bullet::btVector3FloatData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Bullet::SoftBodyClusterData **)&jarg1; 
  arg2 = *(Bullet::btVector3FloatData **)&jarg2; 
  if (arg1) (arg1)->m_lv = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_SoftBodyClusterData_1lv_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Bullet::SoftBodyClusterData *arg1 = (Bullet::SoftBodyClusterData *) 0 ;
  Bullet::btVector3FloatData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::SoftBodyClusterData **)&jarg1; 
  result = (Bullet::btVector3FloatData *)& ((arg1)->m_lv);
  *(Bullet::btVector3FloatData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_SoftBodyClusterData_1av_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Bullet::SoftBodyClusterData *arg1 = (Bullet::SoftBodyClusterData *) 0 ;
  Bullet::btVector3FloatData *arg2 = (Bullet::btVector3FloatData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Bullet::SoftBodyClusterData **)&jarg1; 
  arg2 = *(Bullet::btVector3FloatData **)&jarg2; 
  if (arg1) (arg1)->m_av = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_SoftBodyClusterData_1av_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Bullet::SoftBodyClusterData *arg1 = (Bullet::SoftBodyClusterData *) 0 ;
  Bullet::btVector3FloatData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::SoftBodyClusterData **)&jarg1; 
  result = (Bullet::btVector3FloatData *)& ((arg1)->m_av);
  *(Bullet::btVector3FloatData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_SoftBodyClusterData_1framerefs_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Bullet::SoftBodyClusterData *arg1 = (Bullet::SoftBodyClusterData *) 0 ;
  Bullet::btVector3FloatData *arg2 = (Bullet::btVector3FloatData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Bullet::SoftBodyClusterData **)&jarg1; 
  arg2 = *(Bullet::btVector3FloatData **)&jarg2; 
  if (arg1) (arg1)->m_framerefs = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_SoftBodyClusterData_1framerefs_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Bullet::SoftBodyClusterData *arg1 = (Bullet::SoftBodyClusterData *) 0 ;
  Bullet::btVector3FloatData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::SoftBodyClusterData **)&jarg1; 
  result = (Bullet::btVector3FloatData *) ((arg1)->m_framerefs);
  *(Bullet::btVector3FloatData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_SoftBodyClusterData_1nodeIndices_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobject jarg2) {
  Bullet::SoftBodyClusterData *arg1 = (Bullet::SoftBodyClusterData *) 0 ;
  int *arg2 = (int *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::SoftBodyClusterData **)&jarg1; 
  {
    arg2 = (int*)jenv->GetDirectBufferAddress(jarg2);
    if (arg2 == NULL) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unable to get address of direct buffer. Buffer must be allocated direct.");
    }
  }
  {
    if (arg2) {
      arg1->m_nodeIndices = arg2;
    } else {
      arg1->m_nodeIndices = 0;
    }
  }
  
}


SWIGEXPORT jobject JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_SoftBodyClusterData_1nodeIndices_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jobject jresult = 0 ;
  Bullet::SoftBodyClusterData *arg1 = (Bullet::SoftBodyClusterData *) 0 ;
  int *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::SoftBodyClusterData **)&jarg1; 
  result = (int *) ((arg1)->m_nodeIndices);
  *(int **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_SoftBodyClusterData_1masses_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobject jarg2) {
  Bullet::SoftBodyClusterData *arg1 = (Bullet::SoftBodyClusterData *) 0 ;
  float *arg2 = (float *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::SoftBodyClusterData **)&jarg1; 
  {
    arg2 = (float*)jenv->GetDirectBufferAddress(jarg2);
    if (arg2 == NULL) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unable to get address of direct buffer. Buffer must be allocated direct.");
    }
  }
  {
    if (arg2) {
      arg1->m_masses = arg2;
    } else {
      arg1->m_masses = 0;
    }
  }
  
}


SWIGEXPORT jobject JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_SoftBodyClusterData_1masses_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jobject jresult = 0 ;
  Bullet::SoftBodyClusterData *arg1 = (Bullet::SoftBodyClusterData *) 0 ;
  float *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::SoftBodyClusterData **)&jarg1; 
  result = (float *) ((arg1)->m_masses);
  *(float **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_SoftBodyClusterData_1numFrameRefs_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Bullet::SoftBodyClusterData *arg1 = (Bullet::SoftBodyClusterData *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::SoftBodyClusterData **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_numFrameRefs = arg2;
}


SWIGEXPORT jint JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_SoftBodyClusterData_1numFrameRefs_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Bullet::SoftBodyClusterData *arg1 = (Bullet::SoftBodyClusterData *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::SoftBodyClusterData **)&jarg1; 
  result = (int) ((arg1)->m_numFrameRefs);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_SoftBodyClusterData_1numNodes_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Bullet::SoftBodyClusterData *arg1 = (Bullet::SoftBodyClusterData *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::SoftBodyClusterData **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_numNodes = arg2;
}


SWIGEXPORT jint JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_SoftBodyClusterData_1numNodes_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Bullet::SoftBodyClusterData *arg1 = (Bullet::SoftBodyClusterData *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::SoftBodyClusterData **)&jarg1; 
  result = (int) ((arg1)->m_numNodes);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_SoftBodyClusterData_1numMasses_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Bullet::SoftBodyClusterData *arg1 = (Bullet::SoftBodyClusterData *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::SoftBodyClusterData **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_numMasses = arg2;
}


SWIGEXPORT jint JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_SoftBodyClusterData_1numMasses_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Bullet::SoftBodyClusterData *arg1 = (Bullet::SoftBodyClusterData *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::SoftBodyClusterData **)&jarg1; 
  result = (int) ((arg1)->m_numMasses);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_SoftBodyClusterData_1idmass_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  Bullet::SoftBodyClusterData *arg1 = (Bullet::SoftBodyClusterData *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::SoftBodyClusterData **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->m_idmass = arg2;
}


SWIGEXPORT jfloat JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_SoftBodyClusterData_1idmass_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  Bullet::SoftBodyClusterData *arg1 = (Bullet::SoftBodyClusterData *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::SoftBodyClusterData **)&jarg1; 
  result = (float) ((arg1)->m_idmass);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_SoftBodyClusterData_1imass_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  Bullet::SoftBodyClusterData *arg1 = (Bullet::SoftBodyClusterData *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::SoftBodyClusterData **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->m_imass = arg2;
}


SWIGEXPORT jfloat JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_SoftBodyClusterData_1imass_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  Bullet::SoftBodyClusterData *arg1 = (Bullet::SoftBodyClusterData *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::SoftBodyClusterData **)&jarg1; 
  result = (float) ((arg1)->m_imass);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_SoftBodyClusterData_1nvimpulses_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Bullet::SoftBodyClusterData *arg1 = (Bullet::SoftBodyClusterData *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::SoftBodyClusterData **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_nvimpulses = arg2;
}


SWIGEXPORT jint JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_SoftBodyClusterData_1nvimpulses_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Bullet::SoftBodyClusterData *arg1 = (Bullet::SoftBodyClusterData *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::SoftBodyClusterData **)&jarg1; 
  result = (int) ((arg1)->m_nvimpulses);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_SoftBodyClusterData_1ndimpulses_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Bullet::SoftBodyClusterData *arg1 = (Bullet::SoftBodyClusterData *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::SoftBodyClusterData **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_ndimpulses = arg2;
}


SWIGEXPORT jint JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_SoftBodyClusterData_1ndimpulses_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Bullet::SoftBodyClusterData *arg1 = (Bullet::SoftBodyClusterData *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::SoftBodyClusterData **)&jarg1; 
  result = (int) ((arg1)->m_ndimpulses);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_SoftBodyClusterData_1ndamping_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  Bullet::SoftBodyClusterData *arg1 = (Bullet::SoftBodyClusterData *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::SoftBodyClusterData **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->m_ndamping = arg2;
}


SWIGEXPORT jfloat JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_SoftBodyClusterData_1ndamping_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  Bullet::SoftBodyClusterData *arg1 = (Bullet::SoftBodyClusterData *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::SoftBodyClusterData **)&jarg1; 
  result = (float) ((arg1)->m_ndamping);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_SoftBodyClusterData_1ldamping_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  Bullet::SoftBodyClusterData *arg1 = (Bullet::SoftBodyClusterData *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::SoftBodyClusterData **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->m_ldamping = arg2;
}


SWIGEXPORT jfloat JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_SoftBodyClusterData_1ldamping_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  Bullet::SoftBodyClusterData *arg1 = (Bullet::SoftBodyClusterData *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::SoftBodyClusterData **)&jarg1; 
  result = (float) ((arg1)->m_ldamping);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_SoftBodyClusterData_1adamping_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  Bullet::SoftBodyClusterData *arg1 = (Bullet::SoftBodyClusterData *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::SoftBodyClusterData **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->m_adamping = arg2;
}


SWIGEXPORT jfloat JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_SoftBodyClusterData_1adamping_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  Bullet::SoftBodyClusterData *arg1 = (Bullet::SoftBodyClusterData *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::SoftBodyClusterData **)&jarg1; 
  result = (float) ((arg1)->m_adamping);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_SoftBodyClusterData_1matching_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  Bullet::SoftBodyClusterData *arg1 = (Bullet::SoftBodyClusterData *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::SoftBodyClusterData **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->m_matching = arg2;
}


SWIGEXPORT jfloat JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_SoftBodyClusterData_1matching_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  Bullet::SoftBodyClusterData *arg1 = (Bullet::SoftBodyClusterData *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::SoftBodyClusterData **)&jarg1; 
  result = (float) ((arg1)->m_matching);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_SoftBodyClusterData_1maxSelfCollisionImpulse_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  Bullet::SoftBodyClusterData *arg1 = (Bullet::SoftBodyClusterData *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::SoftBodyClusterData **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->m_maxSelfCollisionImpulse = arg2;
}


SWIGEXPORT jfloat JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_SoftBodyClusterData_1maxSelfCollisionImpulse_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  Bullet::SoftBodyClusterData *arg1 = (Bullet::SoftBodyClusterData *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::SoftBodyClusterData **)&jarg1; 
  result = (float) ((arg1)->m_maxSelfCollisionImpulse);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_SoftBodyClusterData_1selfCollisionImpulseFactor_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  Bullet::SoftBodyClusterData *arg1 = (Bullet::SoftBodyClusterData *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::SoftBodyClusterData **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->m_selfCollisionImpulseFactor = arg2;
}


SWIGEXPORT jfloat JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_SoftBodyClusterData_1selfCollisionImpulseFactor_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  Bullet::SoftBodyClusterData *arg1 = (Bullet::SoftBodyClusterData *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::SoftBodyClusterData **)&jarg1; 
  result = (float) ((arg1)->m_selfCollisionImpulseFactor);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_SoftBodyClusterData_1containsAnchor_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Bullet::SoftBodyClusterData *arg1 = (Bullet::SoftBodyClusterData *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::SoftBodyClusterData **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_containsAnchor = arg2;
}


SWIGEXPORT jint JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_SoftBodyClusterData_1containsAnchor_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Bullet::SoftBodyClusterData *arg1 = (Bullet::SoftBodyClusterData *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::SoftBodyClusterData **)&jarg1; 
  result = (int) ((arg1)->m_containsAnchor);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_SoftBodyClusterData_1collide_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Bullet::SoftBodyClusterData *arg1 = (Bullet::SoftBodyClusterData *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::SoftBodyClusterData **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_collide = arg2;
}


SWIGEXPORT jint JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_SoftBodyClusterData_1collide_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Bullet::SoftBodyClusterData *arg1 = (Bullet::SoftBodyClusterData *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::SoftBodyClusterData **)&jarg1; 
  result = (int) ((arg1)->m_collide);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_SoftBodyClusterData_1clusterIndex_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Bullet::SoftBodyClusterData *arg1 = (Bullet::SoftBodyClusterData *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::SoftBodyClusterData **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_clusterIndex = arg2;
}


SWIGEXPORT jint JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_SoftBodyClusterData_1clusterIndex_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Bullet::SoftBodyClusterData *arg1 = (Bullet::SoftBodyClusterData *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::SoftBodyClusterData **)&jarg1; 
  result = (int) ((arg1)->m_clusterIndex);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_new_1SoftBodyClusterData(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Bullet::SoftBodyClusterData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Bullet::SoftBodyClusterData *)new Bullet::SoftBodyClusterData();
  *(Bullet::SoftBodyClusterData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_delete_1SoftBodyClusterData(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Bullet::SoftBodyClusterData *arg1 = (Bullet::SoftBodyClusterData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Bullet::SoftBodyClusterData **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btSoftBodyJointData_1bodyA_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  Bullet::btSoftBodyJointData *arg1 = (Bullet::btSoftBodyJointData *) 0 ;
  void *arg2 = (void *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btSoftBodyJointData **)&jarg1; 
  arg2 = (void *)jarg2; 
  if (arg1) (arg1)->m_bodyA = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btSoftBodyJointData_1bodyA_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Bullet::btSoftBodyJointData *arg1 = (Bullet::btSoftBodyJointData *) 0 ;
  void *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btSoftBodyJointData **)&jarg1; 
  result = (void *) ((arg1)->m_bodyA);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btSoftBodyJointData_1bodyB_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  Bullet::btSoftBodyJointData *arg1 = (Bullet::btSoftBodyJointData *) 0 ;
  void *arg2 = (void *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btSoftBodyJointData **)&jarg1; 
  arg2 = (void *)jarg2; 
  if (arg1) (arg1)->m_bodyB = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btSoftBodyJointData_1bodyB_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Bullet::btSoftBodyJointData *arg1 = (Bullet::btSoftBodyJointData *) 0 ;
  void *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btSoftBodyJointData **)&jarg1; 
  result = (void *) ((arg1)->m_bodyB);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btSoftBodyJointData_1refs_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Bullet::btSoftBodyJointData *arg1 = (Bullet::btSoftBodyJointData *) 0 ;
  Bullet::btVector3FloatData *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Bullet::btSoftBodyJointData **)&jarg1; 
  arg2 = *(Bullet::btVector3FloatData **)&jarg2; 
  {
    size_t ii;
    Bullet::btVector3FloatData *b = (Bullet::btVector3FloatData *) arg1->m_refs;
    for (ii = 0; ii < (size_t)2; ii++) b[ii] = *((Bullet::btVector3FloatData *) arg2 + ii);
  }
  
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btSoftBodyJointData_1refs_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Bullet::btSoftBodyJointData *arg1 = (Bullet::btSoftBodyJointData *) 0 ;
  Bullet::btVector3FloatData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btSoftBodyJointData **)&jarg1; 
  result = (Bullet::btVector3FloatData *)(Bullet::btVector3FloatData *) ((arg1)->m_refs);
  *(Bullet::btVector3FloatData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btSoftBodyJointData_1cfm_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  Bullet::btSoftBodyJointData *arg1 = (Bullet::btSoftBodyJointData *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btSoftBodyJointData **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->m_cfm = arg2;
}


SWIGEXPORT jfloat JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btSoftBodyJointData_1cfm_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  Bullet::btSoftBodyJointData *arg1 = (Bullet::btSoftBodyJointData *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btSoftBodyJointData **)&jarg1; 
  result = (float) ((arg1)->m_cfm);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btSoftBodyJointData_1erp_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  Bullet::btSoftBodyJointData *arg1 = (Bullet::btSoftBodyJointData *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btSoftBodyJointData **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->m_erp = arg2;
}


SWIGEXPORT jfloat JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btSoftBodyJointData_1erp_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  Bullet::btSoftBodyJointData *arg1 = (Bullet::btSoftBodyJointData *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btSoftBodyJointData **)&jarg1; 
  result = (float) ((arg1)->m_erp);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btSoftBodyJointData_1split_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  Bullet::btSoftBodyJointData *arg1 = (Bullet::btSoftBodyJointData *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btSoftBodyJointData **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->m_split = arg2;
}


SWIGEXPORT jfloat JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btSoftBodyJointData_1split_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  Bullet::btSoftBodyJointData *arg1 = (Bullet::btSoftBodyJointData *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btSoftBodyJointData **)&jarg1; 
  result = (float) ((arg1)->m_split);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btSoftBodyJointData_1delete_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Bullet::btSoftBodyJointData *arg1 = (Bullet::btSoftBodyJointData *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btSoftBodyJointData **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_delete = arg2;
}


SWIGEXPORT jint JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btSoftBodyJointData_1delete_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Bullet::btSoftBodyJointData *arg1 = (Bullet::btSoftBodyJointData *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btSoftBodyJointData **)&jarg1; 
  result = (int) ((arg1)->m_delete);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btSoftBodyJointData_1relPosition_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Bullet::btSoftBodyJointData *arg1 = (Bullet::btSoftBodyJointData *) 0 ;
  Bullet::btVector3FloatData *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Bullet::btSoftBodyJointData **)&jarg1; 
  arg2 = *(Bullet::btVector3FloatData **)&jarg2; 
  {
    size_t ii;
    Bullet::btVector3FloatData *b = (Bullet::btVector3FloatData *) arg1->m_relPosition;
    for (ii = 0; ii < (size_t)2; ii++) b[ii] = *((Bullet::btVector3FloatData *) arg2 + ii);
  }
  
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btSoftBodyJointData_1relPosition_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Bullet::btSoftBodyJointData *arg1 = (Bullet::btSoftBodyJointData *) 0 ;
  Bullet::btVector3FloatData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btSoftBodyJointData **)&jarg1; 
  result = (Bullet::btVector3FloatData *)(Bullet::btVector3FloatData *) ((arg1)->m_relPosition);
  *(Bullet::btVector3FloatData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btSoftBodyJointData_1bodyAtype_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Bullet::btSoftBodyJointData *arg1 = (Bullet::btSoftBodyJointData *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btSoftBodyJointData **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_bodyAtype = arg2;
}


SWIGEXPORT jint JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btSoftBodyJointData_1bodyAtype_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Bullet::btSoftBodyJointData *arg1 = (Bullet::btSoftBodyJointData *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btSoftBodyJointData **)&jarg1; 
  result = (int) ((arg1)->m_bodyAtype);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btSoftBodyJointData_1bodyBtype_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Bullet::btSoftBodyJointData *arg1 = (Bullet::btSoftBodyJointData *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btSoftBodyJointData **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_bodyBtype = arg2;
}


SWIGEXPORT jint JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btSoftBodyJointData_1bodyBtype_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Bullet::btSoftBodyJointData *arg1 = (Bullet::btSoftBodyJointData *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btSoftBodyJointData **)&jarg1; 
  result = (int) ((arg1)->m_bodyBtype);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btSoftBodyJointData_1jointType_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Bullet::btSoftBodyJointData *arg1 = (Bullet::btSoftBodyJointData *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btSoftBodyJointData **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_jointType = arg2;
}


SWIGEXPORT jint JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btSoftBodyJointData_1jointType_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Bullet::btSoftBodyJointData *arg1 = (Bullet::btSoftBodyJointData *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btSoftBodyJointData **)&jarg1; 
  result = (int) ((arg1)->m_jointType);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btSoftBodyJointData_1pad_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Bullet::btSoftBodyJointData *arg1 = (Bullet::btSoftBodyJointData *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btSoftBodyJointData **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_pad = arg2;
}


SWIGEXPORT jint JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btSoftBodyJointData_1pad_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Bullet::btSoftBodyJointData *arg1 = (Bullet::btSoftBodyJointData *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btSoftBodyJointData **)&jarg1; 
  result = (int) ((arg1)->m_pad);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_new_1btSoftBodyJointData(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Bullet::btSoftBodyJointData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Bullet::btSoftBodyJointData *)new Bullet::btSoftBodyJointData();
  *(Bullet::btSoftBodyJointData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_delete_1btSoftBodyJointData(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Bullet::btSoftBodyJointData *arg1 = (Bullet::btSoftBodyJointData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Bullet::btSoftBodyJointData **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btSoftBodyFloatData_1collisionObjectData_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Bullet::btSoftBodyFloatData *arg1 = (Bullet::btSoftBodyFloatData *) 0 ;
  Bullet::btCollisionObjectFloatData *arg2 = (Bullet::btCollisionObjectFloatData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Bullet::btSoftBodyFloatData **)&jarg1; 
  arg2 = *(Bullet::btCollisionObjectFloatData **)&jarg2; 
  if (arg1) (arg1)->m_collisionObjectData = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btSoftBodyFloatData_1collisionObjectData_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Bullet::btSoftBodyFloatData *arg1 = (Bullet::btSoftBodyFloatData *) 0 ;
  Bullet::btCollisionObjectFloatData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btSoftBodyFloatData **)&jarg1; 
  result = (Bullet::btCollisionObjectFloatData *)& ((arg1)->m_collisionObjectData);
  *(Bullet::btCollisionObjectFloatData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btSoftBodyFloatData_1pose_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Bullet::btSoftBodyFloatData *arg1 = (Bullet::btSoftBodyFloatData *) 0 ;
  Bullet::SoftBodyPoseData *arg2 = (Bullet::SoftBodyPoseData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Bullet::btSoftBodyFloatData **)&jarg1; 
  arg2 = *(Bullet::SoftBodyPoseData **)&jarg2; 
  if (arg1) (arg1)->m_pose = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btSoftBodyFloatData_1pose_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Bullet::btSoftBodyFloatData *arg1 = (Bullet::btSoftBodyFloatData *) 0 ;
  Bullet::SoftBodyPoseData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btSoftBodyFloatData **)&jarg1; 
  result = (Bullet::SoftBodyPoseData *) ((arg1)->m_pose);
  *(Bullet::SoftBodyPoseData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btSoftBodyFloatData_1materials_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  Bullet::btSoftBodyFloatData *arg1 = (Bullet::btSoftBodyFloatData *) 0 ;
  Bullet::SoftBodyMaterialData **arg2 = (Bullet::SoftBodyMaterialData **) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btSoftBodyFloatData **)&jarg1; 
  arg2 = *(Bullet::SoftBodyMaterialData ***)&jarg2; 
  if (arg1) (arg1)->m_materials = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btSoftBodyFloatData_1materials_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Bullet::btSoftBodyFloatData *arg1 = (Bullet::btSoftBodyFloatData *) 0 ;
  Bullet::SoftBodyMaterialData **result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btSoftBodyFloatData **)&jarg1; 
  result = (Bullet::SoftBodyMaterialData **) ((arg1)->m_materials);
  *(Bullet::SoftBodyMaterialData ***)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btSoftBodyFloatData_1nodes_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Bullet::btSoftBodyFloatData *arg1 = (Bullet::btSoftBodyFloatData *) 0 ;
  Bullet::SoftBodyNodeData *arg2 = (Bullet::SoftBodyNodeData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Bullet::btSoftBodyFloatData **)&jarg1; 
  arg2 = *(Bullet::SoftBodyNodeData **)&jarg2; 
  if (arg1) (arg1)->m_nodes = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btSoftBodyFloatData_1nodes_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Bullet::btSoftBodyFloatData *arg1 = (Bullet::btSoftBodyFloatData *) 0 ;
  Bullet::SoftBodyNodeData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btSoftBodyFloatData **)&jarg1; 
  result = (Bullet::SoftBodyNodeData *) ((arg1)->m_nodes);
  *(Bullet::SoftBodyNodeData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btSoftBodyFloatData_1links_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Bullet::btSoftBodyFloatData *arg1 = (Bullet::btSoftBodyFloatData *) 0 ;
  Bullet::SoftBodyLinkData *arg2 = (Bullet::SoftBodyLinkData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Bullet::btSoftBodyFloatData **)&jarg1; 
  arg2 = *(Bullet::SoftBodyLinkData **)&jarg2; 
  if (arg1) (arg1)->m_links = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btSoftBodyFloatData_1links_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Bullet::btSoftBodyFloatData *arg1 = (Bullet::btSoftBodyFloatData *) 0 ;
  Bullet::SoftBodyLinkData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btSoftBodyFloatData **)&jarg1; 
  result = (Bullet::SoftBodyLinkData *) ((arg1)->m_links);
  *(Bullet::SoftBodyLinkData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btSoftBodyFloatData_1faces_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Bullet::btSoftBodyFloatData *arg1 = (Bullet::btSoftBodyFloatData *) 0 ;
  Bullet::SoftBodyFaceData *arg2 = (Bullet::SoftBodyFaceData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Bullet::btSoftBodyFloatData **)&jarg1; 
  arg2 = *(Bullet::SoftBodyFaceData **)&jarg2; 
  if (arg1) (arg1)->m_faces = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btSoftBodyFloatData_1faces_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Bullet::btSoftBodyFloatData *arg1 = (Bullet::btSoftBodyFloatData *) 0 ;
  Bullet::SoftBodyFaceData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btSoftBodyFloatData **)&jarg1; 
  result = (Bullet::SoftBodyFaceData *) ((arg1)->m_faces);
  *(Bullet::SoftBodyFaceData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btSoftBodyFloatData_1tetrahedra_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Bullet::btSoftBodyFloatData *arg1 = (Bullet::btSoftBodyFloatData *) 0 ;
  Bullet::SoftBodyTetraData *arg2 = (Bullet::SoftBodyTetraData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Bullet::btSoftBodyFloatData **)&jarg1; 
  arg2 = *(Bullet::SoftBodyTetraData **)&jarg2; 
  if (arg1) (arg1)->m_tetrahedra = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btSoftBodyFloatData_1tetrahedra_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Bullet::btSoftBodyFloatData *arg1 = (Bullet::btSoftBodyFloatData *) 0 ;
  Bullet::SoftBodyTetraData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btSoftBodyFloatData **)&jarg1; 
  result = (Bullet::SoftBodyTetraData *) ((arg1)->m_tetrahedra);
  *(Bullet::SoftBodyTetraData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btSoftBodyFloatData_1anchors_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Bullet::btSoftBodyFloatData *arg1 = (Bullet::btSoftBodyFloatData *) 0 ;
  Bullet::SoftRigidAnchorData *arg2 = (Bullet::SoftRigidAnchorData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Bullet::btSoftBodyFloatData **)&jarg1; 
  arg2 = *(Bullet::SoftRigidAnchorData **)&jarg2; 
  if (arg1) (arg1)->m_anchors = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btSoftBodyFloatData_1anchors_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Bullet::btSoftBodyFloatData *arg1 = (Bullet::btSoftBodyFloatData *) 0 ;
  Bullet::SoftRigidAnchorData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btSoftBodyFloatData **)&jarg1; 
  result = (Bullet::SoftRigidAnchorData *) ((arg1)->m_anchors);
  *(Bullet::SoftRigidAnchorData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btSoftBodyFloatData_1clusters_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Bullet::btSoftBodyFloatData *arg1 = (Bullet::btSoftBodyFloatData *) 0 ;
  Bullet::SoftBodyClusterData *arg2 = (Bullet::SoftBodyClusterData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Bullet::btSoftBodyFloatData **)&jarg1; 
  arg2 = *(Bullet::SoftBodyClusterData **)&jarg2; 
  if (arg1) (arg1)->m_clusters = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btSoftBodyFloatData_1clusters_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Bullet::btSoftBodyFloatData *arg1 = (Bullet::btSoftBodyFloatData *) 0 ;
  Bullet::SoftBodyClusterData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btSoftBodyFloatData **)&jarg1; 
  result = (Bullet::SoftBodyClusterData *) ((arg1)->m_clusters);
  *(Bullet::SoftBodyClusterData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btSoftBodyFloatData_1joints_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Bullet::btSoftBodyFloatData *arg1 = (Bullet::btSoftBodyFloatData *) 0 ;
  Bullet::btSoftBodyJointData *arg2 = (Bullet::btSoftBodyJointData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Bullet::btSoftBodyFloatData **)&jarg1; 
  arg2 = *(Bullet::btSoftBodyJointData **)&jarg2; 
  if (arg1) (arg1)->m_joints = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btSoftBodyFloatData_1joints_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Bullet::btSoftBodyFloatData *arg1 = (Bullet::btSoftBodyFloatData *) 0 ;
  Bullet::btSoftBodyJointData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btSoftBodyFloatData **)&jarg1; 
  result = (Bullet::btSoftBodyJointData *) ((arg1)->m_joints);
  *(Bullet::btSoftBodyJointData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btSoftBodyFloatData_1numMaterials_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Bullet::btSoftBodyFloatData *arg1 = (Bullet::btSoftBodyFloatData *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btSoftBodyFloatData **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_numMaterials = arg2;
}


SWIGEXPORT jint JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btSoftBodyFloatData_1numMaterials_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Bullet::btSoftBodyFloatData *arg1 = (Bullet::btSoftBodyFloatData *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btSoftBodyFloatData **)&jarg1; 
  result = (int) ((arg1)->m_numMaterials);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btSoftBodyFloatData_1numNodes_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Bullet::btSoftBodyFloatData *arg1 = (Bullet::btSoftBodyFloatData *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btSoftBodyFloatData **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_numNodes = arg2;
}


SWIGEXPORT jint JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btSoftBodyFloatData_1numNodes_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Bullet::btSoftBodyFloatData *arg1 = (Bullet::btSoftBodyFloatData *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btSoftBodyFloatData **)&jarg1; 
  result = (int) ((arg1)->m_numNodes);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btSoftBodyFloatData_1numLinks_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Bullet::btSoftBodyFloatData *arg1 = (Bullet::btSoftBodyFloatData *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btSoftBodyFloatData **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_numLinks = arg2;
}


SWIGEXPORT jint JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btSoftBodyFloatData_1numLinks_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Bullet::btSoftBodyFloatData *arg1 = (Bullet::btSoftBodyFloatData *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btSoftBodyFloatData **)&jarg1; 
  result = (int) ((arg1)->m_numLinks);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btSoftBodyFloatData_1numFaces_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Bullet::btSoftBodyFloatData *arg1 = (Bullet::btSoftBodyFloatData *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btSoftBodyFloatData **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_numFaces = arg2;
}


SWIGEXPORT jint JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btSoftBodyFloatData_1numFaces_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Bullet::btSoftBodyFloatData *arg1 = (Bullet::btSoftBodyFloatData *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btSoftBodyFloatData **)&jarg1; 
  result = (int) ((arg1)->m_numFaces);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btSoftBodyFloatData_1numTetrahedra_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Bullet::btSoftBodyFloatData *arg1 = (Bullet::btSoftBodyFloatData *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btSoftBodyFloatData **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_numTetrahedra = arg2;
}


SWIGEXPORT jint JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btSoftBodyFloatData_1numTetrahedra_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Bullet::btSoftBodyFloatData *arg1 = (Bullet::btSoftBodyFloatData *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btSoftBodyFloatData **)&jarg1; 
  result = (int) ((arg1)->m_numTetrahedra);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btSoftBodyFloatData_1numAnchors_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Bullet::btSoftBodyFloatData *arg1 = (Bullet::btSoftBodyFloatData *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btSoftBodyFloatData **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_numAnchors = arg2;
}


SWIGEXPORT jint JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btSoftBodyFloatData_1numAnchors_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Bullet::btSoftBodyFloatData *arg1 = (Bullet::btSoftBodyFloatData *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btSoftBodyFloatData **)&jarg1; 
  result = (int) ((arg1)->m_numAnchors);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btSoftBodyFloatData_1numClusters_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Bullet::btSoftBodyFloatData *arg1 = (Bullet::btSoftBodyFloatData *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btSoftBodyFloatData **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_numClusters = arg2;
}


SWIGEXPORT jint JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btSoftBodyFloatData_1numClusters_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Bullet::btSoftBodyFloatData *arg1 = (Bullet::btSoftBodyFloatData *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btSoftBodyFloatData **)&jarg1; 
  result = (int) ((arg1)->m_numClusters);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btSoftBodyFloatData_1numJoints_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Bullet::btSoftBodyFloatData *arg1 = (Bullet::btSoftBodyFloatData *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btSoftBodyFloatData **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_numJoints = arg2;
}


SWIGEXPORT jint JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btSoftBodyFloatData_1numJoints_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Bullet::btSoftBodyFloatData *arg1 = (Bullet::btSoftBodyFloatData *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btSoftBodyFloatData **)&jarg1; 
  result = (int) ((arg1)->m_numJoints);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btSoftBodyFloatData_1config_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Bullet::btSoftBodyFloatData *arg1 = (Bullet::btSoftBodyFloatData *) 0 ;
  Bullet::SoftBodyConfigData *arg2 = (Bullet::SoftBodyConfigData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Bullet::btSoftBodyFloatData **)&jarg1; 
  arg2 = *(Bullet::SoftBodyConfigData **)&jarg2; 
  if (arg1) (arg1)->m_config = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btSoftBodyFloatData_1config_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Bullet::btSoftBodyFloatData *arg1 = (Bullet::btSoftBodyFloatData *) 0 ;
  Bullet::SoftBodyConfigData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btSoftBodyFloatData **)&jarg1; 
  result = (Bullet::SoftBodyConfigData *)& ((arg1)->m_config);
  *(Bullet::SoftBodyConfigData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_new_1btSoftBodyFloatData(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Bullet::btSoftBodyFloatData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Bullet::btSoftBodyFloatData *)new Bullet::btSoftBodyFloatData();
  *(Bullet::btSoftBodyFloatData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_delete_1btSoftBodyFloatData(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Bullet::btSoftBodyFloatData *arg1 = (Bullet::btSoftBodyFloatData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Bullet::btSoftBodyFloatData **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btMultiBodyLinkDoubleData_1zeroRotParentToThis_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Bullet::btMultiBodyLinkDoubleData *arg1 = (Bullet::btMultiBodyLinkDoubleData *) 0 ;
  Bullet::btQuaternionDoubleData *arg2 = (Bullet::btQuaternionDoubleData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Bullet::btMultiBodyLinkDoubleData **)&jarg1; 
  arg2 = *(Bullet::btQuaternionDoubleData **)&jarg2; 
  if (arg1) (arg1)->m_zeroRotParentToThis = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btMultiBodyLinkDoubleData_1zeroRotParentToThis_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Bullet::btMultiBodyLinkDoubleData *arg1 = (Bullet::btMultiBodyLinkDoubleData *) 0 ;
  Bullet::btQuaternionDoubleData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btMultiBodyLinkDoubleData **)&jarg1; 
  result = (Bullet::btQuaternionDoubleData *)& ((arg1)->m_zeroRotParentToThis);
  *(Bullet::btQuaternionDoubleData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btMultiBodyLinkDoubleData_1parentComToThisComOffset_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Bullet::btMultiBodyLinkDoubleData *arg1 = (Bullet::btMultiBodyLinkDoubleData *) 0 ;
  Bullet::btVector3DoubleData *arg2 = (Bullet::btVector3DoubleData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Bullet::btMultiBodyLinkDoubleData **)&jarg1; 
  arg2 = *(Bullet::btVector3DoubleData **)&jarg2; 
  if (arg1) (arg1)->m_parentComToThisComOffset = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btMultiBodyLinkDoubleData_1parentComToThisComOffset_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Bullet::btMultiBodyLinkDoubleData *arg1 = (Bullet::btMultiBodyLinkDoubleData *) 0 ;
  Bullet::btVector3DoubleData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btMultiBodyLinkDoubleData **)&jarg1; 
  result = (Bullet::btVector3DoubleData *)& ((arg1)->m_parentComToThisComOffset);
  *(Bullet::btVector3DoubleData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btMultiBodyLinkDoubleData_1thisPivotToThisComOffset_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Bullet::btMultiBodyLinkDoubleData *arg1 = (Bullet::btMultiBodyLinkDoubleData *) 0 ;
  Bullet::btVector3DoubleData *arg2 = (Bullet::btVector3DoubleData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Bullet::btMultiBodyLinkDoubleData **)&jarg1; 
  arg2 = *(Bullet::btVector3DoubleData **)&jarg2; 
  if (arg1) (arg1)->m_thisPivotToThisComOffset = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btMultiBodyLinkDoubleData_1thisPivotToThisComOffset_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Bullet::btMultiBodyLinkDoubleData *arg1 = (Bullet::btMultiBodyLinkDoubleData *) 0 ;
  Bullet::btVector3DoubleData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btMultiBodyLinkDoubleData **)&jarg1; 
  result = (Bullet::btVector3DoubleData *)& ((arg1)->m_thisPivotToThisComOffset);
  *(Bullet::btVector3DoubleData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btMultiBodyLinkDoubleData_1jointAxisTop_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Bullet::btMultiBodyLinkDoubleData *arg1 = (Bullet::btMultiBodyLinkDoubleData *) 0 ;
  Bullet::btVector3DoubleData *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Bullet::btMultiBodyLinkDoubleData **)&jarg1; 
  arg2 = *(Bullet::btVector3DoubleData **)&jarg2; 
  {
    size_t ii;
    Bullet::btVector3DoubleData *b = (Bullet::btVector3DoubleData *) arg1->m_jointAxisTop;
    for (ii = 0; ii < (size_t)6; ii++) b[ii] = *((Bullet::btVector3DoubleData *) arg2 + ii);
  }
  
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btMultiBodyLinkDoubleData_1jointAxisTop_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Bullet::btMultiBodyLinkDoubleData *arg1 = (Bullet::btMultiBodyLinkDoubleData *) 0 ;
  Bullet::btVector3DoubleData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btMultiBodyLinkDoubleData **)&jarg1; 
  result = (Bullet::btVector3DoubleData *)(Bullet::btVector3DoubleData *) ((arg1)->m_jointAxisTop);
  *(Bullet::btVector3DoubleData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btMultiBodyLinkDoubleData_1jointAxisBottom_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Bullet::btMultiBodyLinkDoubleData *arg1 = (Bullet::btMultiBodyLinkDoubleData *) 0 ;
  Bullet::btVector3DoubleData *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Bullet::btMultiBodyLinkDoubleData **)&jarg1; 
  arg2 = *(Bullet::btVector3DoubleData **)&jarg2; 
  {
    size_t ii;
    Bullet::btVector3DoubleData *b = (Bullet::btVector3DoubleData *) arg1->m_jointAxisBottom;
    for (ii = 0; ii < (size_t)6; ii++) b[ii] = *((Bullet::btVector3DoubleData *) arg2 + ii);
  }
  
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btMultiBodyLinkDoubleData_1jointAxisBottom_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Bullet::btMultiBodyLinkDoubleData *arg1 = (Bullet::btMultiBodyLinkDoubleData *) 0 ;
  Bullet::btVector3DoubleData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btMultiBodyLinkDoubleData **)&jarg1; 
  result = (Bullet::btVector3DoubleData *)(Bullet::btVector3DoubleData *) ((arg1)->m_jointAxisBottom);
  *(Bullet::btVector3DoubleData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btMultiBodyLinkDoubleData_1linkInertia_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Bullet::btMultiBodyLinkDoubleData *arg1 = (Bullet::btMultiBodyLinkDoubleData *) 0 ;
  Bullet::btVector3DoubleData *arg2 = (Bullet::btVector3DoubleData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Bullet::btMultiBodyLinkDoubleData **)&jarg1; 
  arg2 = *(Bullet::btVector3DoubleData **)&jarg2; 
  if (arg1) (arg1)->m_linkInertia = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btMultiBodyLinkDoubleData_1linkInertia_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Bullet::btMultiBodyLinkDoubleData *arg1 = (Bullet::btMultiBodyLinkDoubleData *) 0 ;
  Bullet::btVector3DoubleData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btMultiBodyLinkDoubleData **)&jarg1; 
  result = (Bullet::btVector3DoubleData *)& ((arg1)->m_linkInertia);
  *(Bullet::btVector3DoubleData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btMultiBodyLinkDoubleData_1linkMass_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  Bullet::btMultiBodyLinkDoubleData *arg1 = (Bullet::btMultiBodyLinkDoubleData *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btMultiBodyLinkDoubleData **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->m_linkMass = arg2;
}


SWIGEXPORT jdouble JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btMultiBodyLinkDoubleData_1linkMass_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  Bullet::btMultiBodyLinkDoubleData *arg1 = (Bullet::btMultiBodyLinkDoubleData *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btMultiBodyLinkDoubleData **)&jarg1; 
  result = (double) ((arg1)->m_linkMass);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btMultiBodyLinkDoubleData_1parentIndex_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Bullet::btMultiBodyLinkDoubleData *arg1 = (Bullet::btMultiBodyLinkDoubleData *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btMultiBodyLinkDoubleData **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_parentIndex = arg2;
}


SWIGEXPORT jint JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btMultiBodyLinkDoubleData_1parentIndex_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Bullet::btMultiBodyLinkDoubleData *arg1 = (Bullet::btMultiBodyLinkDoubleData *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btMultiBodyLinkDoubleData **)&jarg1; 
  result = (int) ((arg1)->m_parentIndex);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btMultiBodyLinkDoubleData_1jointType_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Bullet::btMultiBodyLinkDoubleData *arg1 = (Bullet::btMultiBodyLinkDoubleData *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btMultiBodyLinkDoubleData **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_jointType = arg2;
}


SWIGEXPORT jint JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btMultiBodyLinkDoubleData_1jointType_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Bullet::btMultiBodyLinkDoubleData *arg1 = (Bullet::btMultiBodyLinkDoubleData *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btMultiBodyLinkDoubleData **)&jarg1; 
  result = (int) ((arg1)->m_jointType);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btMultiBodyLinkDoubleData_1dofCount_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Bullet::btMultiBodyLinkDoubleData *arg1 = (Bullet::btMultiBodyLinkDoubleData *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btMultiBodyLinkDoubleData **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_dofCount = arg2;
}


SWIGEXPORT jint JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btMultiBodyLinkDoubleData_1dofCount_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Bullet::btMultiBodyLinkDoubleData *arg1 = (Bullet::btMultiBodyLinkDoubleData *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btMultiBodyLinkDoubleData **)&jarg1; 
  result = (int) ((arg1)->m_dofCount);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btMultiBodyLinkDoubleData_1posVarCount_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Bullet::btMultiBodyLinkDoubleData *arg1 = (Bullet::btMultiBodyLinkDoubleData *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btMultiBodyLinkDoubleData **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_posVarCount = arg2;
}


SWIGEXPORT jint JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btMultiBodyLinkDoubleData_1posVarCount_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Bullet::btMultiBodyLinkDoubleData *arg1 = (Bullet::btMultiBodyLinkDoubleData *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btMultiBodyLinkDoubleData **)&jarg1; 
  result = (int) ((arg1)->m_posVarCount);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btMultiBodyLinkDoubleData_1jointPos_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  Bullet::btMultiBodyLinkDoubleData *arg1 = (Bullet::btMultiBodyLinkDoubleData *) 0 ;
  double *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btMultiBodyLinkDoubleData **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != 7) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  arg2 = (double *)jenv->GetPrimitiveArrayCritical(jarg2, 0); 
  {
    size_t ii;
    double *b = (double *) arg1->m_jointPos;
    for (ii = 0; ii < (size_t)7; ii++) b[ii] = *((double *) arg2 + ii);
  }
  jenv->ReleasePrimitiveArrayCritical(jarg2, (double *)arg2, 0); 
}


SWIGEXPORT jdoubleArray JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btMultiBodyLinkDoubleData_1jointPos_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdoubleArray jresult = 0 ;
  Bullet::btMultiBodyLinkDoubleData *arg1 = (Bullet::btMultiBodyLinkDoubleData *) 0 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btMultiBodyLinkDoubleData **)&jarg1; 
  result = (double *)(double *) ((arg1)->m_jointPos);
  /*jresult = SWIG_JavaArrayOut##Double(jenv, (double *)result, 7);*/ 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btMultiBodyLinkDoubleData_1jointVel_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  Bullet::btMultiBodyLinkDoubleData *arg1 = (Bullet::btMultiBodyLinkDoubleData *) 0 ;
  double *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btMultiBodyLinkDoubleData **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != 6) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  arg2 = (double *)jenv->GetPrimitiveArrayCritical(jarg2, 0); 
  {
    size_t ii;
    double *b = (double *) arg1->m_jointVel;
    for (ii = 0; ii < (size_t)6; ii++) b[ii] = *((double *) arg2 + ii);
  }
  jenv->ReleasePrimitiveArrayCritical(jarg2, (double *)arg2, 0); 
}


SWIGEXPORT jdoubleArray JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btMultiBodyLinkDoubleData_1jointVel_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdoubleArray jresult = 0 ;
  Bullet::btMultiBodyLinkDoubleData *arg1 = (Bullet::btMultiBodyLinkDoubleData *) 0 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btMultiBodyLinkDoubleData **)&jarg1; 
  result = (double *)(double *) ((arg1)->m_jointVel);
  /*jresult = SWIG_JavaArrayOut##Double(jenv, (double *)result, 6);*/ 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btMultiBodyLinkDoubleData_1jointTorque_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  Bullet::btMultiBodyLinkDoubleData *arg1 = (Bullet::btMultiBodyLinkDoubleData *) 0 ;
  double *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btMultiBodyLinkDoubleData **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != 6) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  arg2 = (double *)jenv->GetPrimitiveArrayCritical(jarg2, 0); 
  {
    size_t ii;
    double *b = (double *) arg1->m_jointTorque;
    for (ii = 0; ii < (size_t)6; ii++) b[ii] = *((double *) arg2 + ii);
  }
  jenv->ReleasePrimitiveArrayCritical(jarg2, (double *)arg2, 0); 
}


SWIGEXPORT jdoubleArray JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btMultiBodyLinkDoubleData_1jointTorque_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdoubleArray jresult = 0 ;
  Bullet::btMultiBodyLinkDoubleData *arg1 = (Bullet::btMultiBodyLinkDoubleData *) 0 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btMultiBodyLinkDoubleData **)&jarg1; 
  result = (double *)(double *) ((arg1)->m_jointTorque);
  /*jresult = SWIG_JavaArrayOut##Double(jenv, (double *)result, 6);*/ 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btMultiBodyLinkDoubleData_1jointDamping_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  Bullet::btMultiBodyLinkDoubleData *arg1 = (Bullet::btMultiBodyLinkDoubleData *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btMultiBodyLinkDoubleData **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->m_jointDamping = arg2;
}


SWIGEXPORT jdouble JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btMultiBodyLinkDoubleData_1jointDamping_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  Bullet::btMultiBodyLinkDoubleData *arg1 = (Bullet::btMultiBodyLinkDoubleData *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btMultiBodyLinkDoubleData **)&jarg1; 
  result = (double) ((arg1)->m_jointDamping);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btMultiBodyLinkDoubleData_1jointFriction_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  Bullet::btMultiBodyLinkDoubleData *arg1 = (Bullet::btMultiBodyLinkDoubleData *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btMultiBodyLinkDoubleData **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->m_jointFriction = arg2;
}


SWIGEXPORT jdouble JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btMultiBodyLinkDoubleData_1jointFriction_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  Bullet::btMultiBodyLinkDoubleData *arg1 = (Bullet::btMultiBodyLinkDoubleData *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btMultiBodyLinkDoubleData **)&jarg1; 
  result = (double) ((arg1)->m_jointFriction);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btMultiBodyLinkDoubleData_1linkName_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  Bullet::btMultiBodyLinkDoubleData *arg1 = (Bullet::btMultiBodyLinkDoubleData *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btMultiBodyLinkDoubleData **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    delete [] arg1->m_linkName;
    if (arg2) {
      arg1->m_linkName = (char *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->m_linkName, (const char *)arg2);
    } else {
      arg1->m_linkName = 0;
    }
  }
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btMultiBodyLinkDoubleData_1linkName_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  Bullet::btMultiBodyLinkDoubleData *arg1 = (Bullet::btMultiBodyLinkDoubleData *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btMultiBodyLinkDoubleData **)&jarg1; 
  result = (char *) ((arg1)->m_linkName);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btMultiBodyLinkDoubleData_1jointName_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  Bullet::btMultiBodyLinkDoubleData *arg1 = (Bullet::btMultiBodyLinkDoubleData *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btMultiBodyLinkDoubleData **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    delete [] arg1->m_jointName;
    if (arg2) {
      arg1->m_jointName = (char *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->m_jointName, (const char *)arg2);
    } else {
      arg1->m_jointName = 0;
    }
  }
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btMultiBodyLinkDoubleData_1jointName_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  Bullet::btMultiBodyLinkDoubleData *arg1 = (Bullet::btMultiBodyLinkDoubleData *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btMultiBodyLinkDoubleData **)&jarg1; 
  result = (char *) ((arg1)->m_jointName);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btMultiBodyLinkDoubleData_1linkCollider_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Bullet::btMultiBodyLinkDoubleData *arg1 = (Bullet::btMultiBodyLinkDoubleData *) 0 ;
  Bullet::btCollisionObjectDoubleData *arg2 = (Bullet::btCollisionObjectDoubleData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Bullet::btMultiBodyLinkDoubleData **)&jarg1; 
  arg2 = *(Bullet::btCollisionObjectDoubleData **)&jarg2; 
  if (arg1) (arg1)->m_linkCollider = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btMultiBodyLinkDoubleData_1linkCollider_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Bullet::btMultiBodyLinkDoubleData *arg1 = (Bullet::btMultiBodyLinkDoubleData *) 0 ;
  Bullet::btCollisionObjectDoubleData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btMultiBodyLinkDoubleData **)&jarg1; 
  result = (Bullet::btCollisionObjectDoubleData *) ((arg1)->m_linkCollider);
  *(Bullet::btCollisionObjectDoubleData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btMultiBodyLinkDoubleData_1paddingPtr_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  Bullet::btMultiBodyLinkDoubleData *arg1 = (Bullet::btMultiBodyLinkDoubleData *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btMultiBodyLinkDoubleData **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    delete [] arg1->m_paddingPtr;
    if (arg2) {
      arg1->m_paddingPtr = (char *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->m_paddingPtr, (const char *)arg2);
    } else {
      arg1->m_paddingPtr = 0;
    }
  }
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btMultiBodyLinkDoubleData_1paddingPtr_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  Bullet::btMultiBodyLinkDoubleData *arg1 = (Bullet::btMultiBodyLinkDoubleData *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btMultiBodyLinkDoubleData **)&jarg1; 
  result = (char *) ((arg1)->m_paddingPtr);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_new_1btMultiBodyLinkDoubleData(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Bullet::btMultiBodyLinkDoubleData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Bullet::btMultiBodyLinkDoubleData *)new Bullet::btMultiBodyLinkDoubleData();
  *(Bullet::btMultiBodyLinkDoubleData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_delete_1btMultiBodyLinkDoubleData(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Bullet::btMultiBodyLinkDoubleData *arg1 = (Bullet::btMultiBodyLinkDoubleData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Bullet::btMultiBodyLinkDoubleData **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btMultiBodyLinkFloatData_1zeroRotParentToThis_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Bullet::btMultiBodyLinkFloatData *arg1 = (Bullet::btMultiBodyLinkFloatData *) 0 ;
  Bullet::btQuaternionFloatData *arg2 = (Bullet::btQuaternionFloatData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Bullet::btMultiBodyLinkFloatData **)&jarg1; 
  arg2 = *(Bullet::btQuaternionFloatData **)&jarg2; 
  if (arg1) (arg1)->m_zeroRotParentToThis = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btMultiBodyLinkFloatData_1zeroRotParentToThis_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Bullet::btMultiBodyLinkFloatData *arg1 = (Bullet::btMultiBodyLinkFloatData *) 0 ;
  Bullet::btQuaternionFloatData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btMultiBodyLinkFloatData **)&jarg1; 
  result = (Bullet::btQuaternionFloatData *)& ((arg1)->m_zeroRotParentToThis);
  *(Bullet::btQuaternionFloatData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btMultiBodyLinkFloatData_1parentComToThisComOffset_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Bullet::btMultiBodyLinkFloatData *arg1 = (Bullet::btMultiBodyLinkFloatData *) 0 ;
  Bullet::btVector3FloatData *arg2 = (Bullet::btVector3FloatData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Bullet::btMultiBodyLinkFloatData **)&jarg1; 
  arg2 = *(Bullet::btVector3FloatData **)&jarg2; 
  if (arg1) (arg1)->m_parentComToThisComOffset = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btMultiBodyLinkFloatData_1parentComToThisComOffset_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Bullet::btMultiBodyLinkFloatData *arg1 = (Bullet::btMultiBodyLinkFloatData *) 0 ;
  Bullet::btVector3FloatData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btMultiBodyLinkFloatData **)&jarg1; 
  result = (Bullet::btVector3FloatData *)& ((arg1)->m_parentComToThisComOffset);
  *(Bullet::btVector3FloatData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btMultiBodyLinkFloatData_1thisPivotToThisComOffset_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Bullet::btMultiBodyLinkFloatData *arg1 = (Bullet::btMultiBodyLinkFloatData *) 0 ;
  Bullet::btVector3FloatData *arg2 = (Bullet::btVector3FloatData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Bullet::btMultiBodyLinkFloatData **)&jarg1; 
  arg2 = *(Bullet::btVector3FloatData **)&jarg2; 
  if (arg1) (arg1)->m_thisPivotToThisComOffset = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btMultiBodyLinkFloatData_1thisPivotToThisComOffset_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Bullet::btMultiBodyLinkFloatData *arg1 = (Bullet::btMultiBodyLinkFloatData *) 0 ;
  Bullet::btVector3FloatData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btMultiBodyLinkFloatData **)&jarg1; 
  result = (Bullet::btVector3FloatData *)& ((arg1)->m_thisPivotToThisComOffset);
  *(Bullet::btVector3FloatData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btMultiBodyLinkFloatData_1jointAxisTop_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Bullet::btMultiBodyLinkFloatData *arg1 = (Bullet::btMultiBodyLinkFloatData *) 0 ;
  Bullet::btVector3FloatData *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Bullet::btMultiBodyLinkFloatData **)&jarg1; 
  arg2 = *(Bullet::btVector3FloatData **)&jarg2; 
  {
    size_t ii;
    Bullet::btVector3FloatData *b = (Bullet::btVector3FloatData *) arg1->m_jointAxisTop;
    for (ii = 0; ii < (size_t)6; ii++) b[ii] = *((Bullet::btVector3FloatData *) arg2 + ii);
  }
  
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btMultiBodyLinkFloatData_1jointAxisTop_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Bullet::btMultiBodyLinkFloatData *arg1 = (Bullet::btMultiBodyLinkFloatData *) 0 ;
  Bullet::btVector3FloatData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btMultiBodyLinkFloatData **)&jarg1; 
  result = (Bullet::btVector3FloatData *)(Bullet::btVector3FloatData *) ((arg1)->m_jointAxisTop);
  *(Bullet::btVector3FloatData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btMultiBodyLinkFloatData_1jointAxisBottom_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Bullet::btMultiBodyLinkFloatData *arg1 = (Bullet::btMultiBodyLinkFloatData *) 0 ;
  Bullet::btVector3FloatData *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Bullet::btMultiBodyLinkFloatData **)&jarg1; 
  arg2 = *(Bullet::btVector3FloatData **)&jarg2; 
  {
    size_t ii;
    Bullet::btVector3FloatData *b = (Bullet::btVector3FloatData *) arg1->m_jointAxisBottom;
    for (ii = 0; ii < (size_t)6; ii++) b[ii] = *((Bullet::btVector3FloatData *) arg2 + ii);
  }
  
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btMultiBodyLinkFloatData_1jointAxisBottom_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Bullet::btMultiBodyLinkFloatData *arg1 = (Bullet::btMultiBodyLinkFloatData *) 0 ;
  Bullet::btVector3FloatData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btMultiBodyLinkFloatData **)&jarg1; 
  result = (Bullet::btVector3FloatData *)(Bullet::btVector3FloatData *) ((arg1)->m_jointAxisBottom);
  *(Bullet::btVector3FloatData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btMultiBodyLinkFloatData_1linkInertia_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Bullet::btMultiBodyLinkFloatData *arg1 = (Bullet::btMultiBodyLinkFloatData *) 0 ;
  Bullet::btVector3FloatData *arg2 = (Bullet::btVector3FloatData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Bullet::btMultiBodyLinkFloatData **)&jarg1; 
  arg2 = *(Bullet::btVector3FloatData **)&jarg2; 
  if (arg1) (arg1)->m_linkInertia = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btMultiBodyLinkFloatData_1linkInertia_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Bullet::btMultiBodyLinkFloatData *arg1 = (Bullet::btMultiBodyLinkFloatData *) 0 ;
  Bullet::btVector3FloatData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btMultiBodyLinkFloatData **)&jarg1; 
  result = (Bullet::btVector3FloatData *)& ((arg1)->m_linkInertia);
  *(Bullet::btVector3FloatData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btMultiBodyLinkFloatData_1dofCount_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Bullet::btMultiBodyLinkFloatData *arg1 = (Bullet::btMultiBodyLinkFloatData *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btMultiBodyLinkFloatData **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_dofCount = arg2;
}


SWIGEXPORT jint JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btMultiBodyLinkFloatData_1dofCount_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Bullet::btMultiBodyLinkFloatData *arg1 = (Bullet::btMultiBodyLinkFloatData *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btMultiBodyLinkFloatData **)&jarg1; 
  result = (int) ((arg1)->m_dofCount);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btMultiBodyLinkFloatData_1linkMass_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  Bullet::btMultiBodyLinkFloatData *arg1 = (Bullet::btMultiBodyLinkFloatData *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btMultiBodyLinkFloatData **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->m_linkMass = arg2;
}


SWIGEXPORT jfloat JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btMultiBodyLinkFloatData_1linkMass_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  Bullet::btMultiBodyLinkFloatData *arg1 = (Bullet::btMultiBodyLinkFloatData *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btMultiBodyLinkFloatData **)&jarg1; 
  result = (float) ((arg1)->m_linkMass);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btMultiBodyLinkFloatData_1parentIndex_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Bullet::btMultiBodyLinkFloatData *arg1 = (Bullet::btMultiBodyLinkFloatData *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btMultiBodyLinkFloatData **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_parentIndex = arg2;
}


SWIGEXPORT jint JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btMultiBodyLinkFloatData_1parentIndex_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Bullet::btMultiBodyLinkFloatData *arg1 = (Bullet::btMultiBodyLinkFloatData *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btMultiBodyLinkFloatData **)&jarg1; 
  result = (int) ((arg1)->m_parentIndex);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btMultiBodyLinkFloatData_1jointType_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Bullet::btMultiBodyLinkFloatData *arg1 = (Bullet::btMultiBodyLinkFloatData *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btMultiBodyLinkFloatData **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_jointType = arg2;
}


SWIGEXPORT jint JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btMultiBodyLinkFloatData_1jointType_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Bullet::btMultiBodyLinkFloatData *arg1 = (Bullet::btMultiBodyLinkFloatData *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btMultiBodyLinkFloatData **)&jarg1; 
  result = (int) ((arg1)->m_jointType);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btMultiBodyLinkFloatData_1jointPos_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloatArray jarg2) {
  Bullet::btMultiBodyLinkFloatData *arg1 = (Bullet::btMultiBodyLinkFloatData *) 0 ;
  float *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btMultiBodyLinkFloatData **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != 7) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  arg2 = (float *)jenv->GetPrimitiveArrayCritical(jarg2, 0); 
  {
    size_t ii;
    float *b = (float *) arg1->m_jointPos;
    for (ii = 0; ii < (size_t)7; ii++) b[ii] = *((float *) arg2 + ii);
  }
  jenv->ReleasePrimitiveArrayCritical(jarg2, (float *)arg2, 0); 
}


SWIGEXPORT jfloatArray JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btMultiBodyLinkFloatData_1jointPos_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloatArray jresult = 0 ;
  Bullet::btMultiBodyLinkFloatData *arg1 = (Bullet::btMultiBodyLinkFloatData *) 0 ;
  float *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btMultiBodyLinkFloatData **)&jarg1; 
  result = (float *)(float *) ((arg1)->m_jointPos);
  /*jresult = SWIG_JavaArrayOut##Float(jenv, (float *)result, 7);*/ 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btMultiBodyLinkFloatData_1jointVel_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloatArray jarg2) {
  Bullet::btMultiBodyLinkFloatData *arg1 = (Bullet::btMultiBodyLinkFloatData *) 0 ;
  float *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btMultiBodyLinkFloatData **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != 6) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  arg2 = (float *)jenv->GetPrimitiveArrayCritical(jarg2, 0); 
  {
    size_t ii;
    float *b = (float *) arg1->m_jointVel;
    for (ii = 0; ii < (size_t)6; ii++) b[ii] = *((float *) arg2 + ii);
  }
  jenv->ReleasePrimitiveArrayCritical(jarg2, (float *)arg2, 0); 
}


SWIGEXPORT jfloatArray JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btMultiBodyLinkFloatData_1jointVel_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloatArray jresult = 0 ;
  Bullet::btMultiBodyLinkFloatData *arg1 = (Bullet::btMultiBodyLinkFloatData *) 0 ;
  float *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btMultiBodyLinkFloatData **)&jarg1; 
  result = (float *)(float *) ((arg1)->m_jointVel);
  /*jresult = SWIG_JavaArrayOut##Float(jenv, (float *)result, 6);*/ 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btMultiBodyLinkFloatData_1jointTorque_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloatArray jarg2) {
  Bullet::btMultiBodyLinkFloatData *arg1 = (Bullet::btMultiBodyLinkFloatData *) 0 ;
  float *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btMultiBodyLinkFloatData **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != 6) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  arg2 = (float *)jenv->GetPrimitiveArrayCritical(jarg2, 0); 
  {
    size_t ii;
    float *b = (float *) arg1->m_jointTorque;
    for (ii = 0; ii < (size_t)6; ii++) b[ii] = *((float *) arg2 + ii);
  }
  jenv->ReleasePrimitiveArrayCritical(jarg2, (float *)arg2, 0); 
}


SWIGEXPORT jfloatArray JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btMultiBodyLinkFloatData_1jointTorque_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloatArray jresult = 0 ;
  Bullet::btMultiBodyLinkFloatData *arg1 = (Bullet::btMultiBodyLinkFloatData *) 0 ;
  float *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btMultiBodyLinkFloatData **)&jarg1; 
  result = (float *)(float *) ((arg1)->m_jointTorque);
  /*jresult = SWIG_JavaArrayOut##Float(jenv, (float *)result, 6);*/ 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btMultiBodyLinkFloatData_1posVarCount_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Bullet::btMultiBodyLinkFloatData *arg1 = (Bullet::btMultiBodyLinkFloatData *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btMultiBodyLinkFloatData **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_posVarCount = arg2;
}


SWIGEXPORT jint JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btMultiBodyLinkFloatData_1posVarCount_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Bullet::btMultiBodyLinkFloatData *arg1 = (Bullet::btMultiBodyLinkFloatData *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btMultiBodyLinkFloatData **)&jarg1; 
  result = (int) ((arg1)->m_posVarCount);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btMultiBodyLinkFloatData_1jointDamping_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  Bullet::btMultiBodyLinkFloatData *arg1 = (Bullet::btMultiBodyLinkFloatData *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btMultiBodyLinkFloatData **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->m_jointDamping = arg2;
}


SWIGEXPORT jfloat JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btMultiBodyLinkFloatData_1jointDamping_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  Bullet::btMultiBodyLinkFloatData *arg1 = (Bullet::btMultiBodyLinkFloatData *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btMultiBodyLinkFloatData **)&jarg1; 
  result = (float) ((arg1)->m_jointDamping);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btMultiBodyLinkFloatData_1jointFriction_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  Bullet::btMultiBodyLinkFloatData *arg1 = (Bullet::btMultiBodyLinkFloatData *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btMultiBodyLinkFloatData **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->m_jointFriction = arg2;
}


SWIGEXPORT jfloat JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btMultiBodyLinkFloatData_1jointFriction_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  Bullet::btMultiBodyLinkFloatData *arg1 = (Bullet::btMultiBodyLinkFloatData *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btMultiBodyLinkFloatData **)&jarg1; 
  result = (float) ((arg1)->m_jointFriction);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btMultiBodyLinkFloatData_1linkName_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  Bullet::btMultiBodyLinkFloatData *arg1 = (Bullet::btMultiBodyLinkFloatData *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btMultiBodyLinkFloatData **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    delete [] arg1->m_linkName;
    if (arg2) {
      arg1->m_linkName = (char *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->m_linkName, (const char *)arg2);
    } else {
      arg1->m_linkName = 0;
    }
  }
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btMultiBodyLinkFloatData_1linkName_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  Bullet::btMultiBodyLinkFloatData *arg1 = (Bullet::btMultiBodyLinkFloatData *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btMultiBodyLinkFloatData **)&jarg1; 
  result = (char *) ((arg1)->m_linkName);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btMultiBodyLinkFloatData_1jointName_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  Bullet::btMultiBodyLinkFloatData *arg1 = (Bullet::btMultiBodyLinkFloatData *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btMultiBodyLinkFloatData **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    delete [] arg1->m_jointName;
    if (arg2) {
      arg1->m_jointName = (char *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->m_jointName, (const char *)arg2);
    } else {
      arg1->m_jointName = 0;
    }
  }
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btMultiBodyLinkFloatData_1jointName_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  Bullet::btMultiBodyLinkFloatData *arg1 = (Bullet::btMultiBodyLinkFloatData *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btMultiBodyLinkFloatData **)&jarg1; 
  result = (char *) ((arg1)->m_jointName);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btMultiBodyLinkFloatData_1linkCollider_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Bullet::btMultiBodyLinkFloatData *arg1 = (Bullet::btMultiBodyLinkFloatData *) 0 ;
  Bullet::btCollisionObjectFloatData *arg2 = (Bullet::btCollisionObjectFloatData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Bullet::btMultiBodyLinkFloatData **)&jarg1; 
  arg2 = *(Bullet::btCollisionObjectFloatData **)&jarg2; 
  if (arg1) (arg1)->m_linkCollider = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btMultiBodyLinkFloatData_1linkCollider_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Bullet::btMultiBodyLinkFloatData *arg1 = (Bullet::btMultiBodyLinkFloatData *) 0 ;
  Bullet::btCollisionObjectFloatData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btMultiBodyLinkFloatData **)&jarg1; 
  result = (Bullet::btCollisionObjectFloatData *) ((arg1)->m_linkCollider);
  *(Bullet::btCollisionObjectFloatData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btMultiBodyLinkFloatData_1paddingPtr_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  Bullet::btMultiBodyLinkFloatData *arg1 = (Bullet::btMultiBodyLinkFloatData *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btMultiBodyLinkFloatData **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    delete [] arg1->m_paddingPtr;
    if (arg2) {
      arg1->m_paddingPtr = (char *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->m_paddingPtr, (const char *)arg2);
    } else {
      arg1->m_paddingPtr = 0;
    }
  }
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btMultiBodyLinkFloatData_1paddingPtr_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  Bullet::btMultiBodyLinkFloatData *arg1 = (Bullet::btMultiBodyLinkFloatData *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btMultiBodyLinkFloatData **)&jarg1; 
  result = (char *) ((arg1)->m_paddingPtr);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_new_1btMultiBodyLinkFloatData(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Bullet::btMultiBodyLinkFloatData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Bullet::btMultiBodyLinkFloatData *)new Bullet::btMultiBodyLinkFloatData();
  *(Bullet::btMultiBodyLinkFloatData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_delete_1btMultiBodyLinkFloatData(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Bullet::btMultiBodyLinkFloatData *arg1 = (Bullet::btMultiBodyLinkFloatData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Bullet::btMultiBodyLinkFloatData **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btMultiBodyDoubleData_1baseWorldTransform_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Bullet::btMultiBodyDoubleData *arg1 = (Bullet::btMultiBodyDoubleData *) 0 ;
  Bullet::btTransformDoubleData *arg2 = (Bullet::btTransformDoubleData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Bullet::btMultiBodyDoubleData **)&jarg1; 
  arg2 = *(Bullet::btTransformDoubleData **)&jarg2; 
  if (arg1) (arg1)->m_baseWorldTransform = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btMultiBodyDoubleData_1baseWorldTransform_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Bullet::btMultiBodyDoubleData *arg1 = (Bullet::btMultiBodyDoubleData *) 0 ;
  Bullet::btTransformDoubleData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btMultiBodyDoubleData **)&jarg1; 
  result = (Bullet::btTransformDoubleData *)& ((arg1)->m_baseWorldTransform);
  *(Bullet::btTransformDoubleData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btMultiBodyDoubleData_1baseInertia_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Bullet::btMultiBodyDoubleData *arg1 = (Bullet::btMultiBodyDoubleData *) 0 ;
  Bullet::btVector3DoubleData *arg2 = (Bullet::btVector3DoubleData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Bullet::btMultiBodyDoubleData **)&jarg1; 
  arg2 = *(Bullet::btVector3DoubleData **)&jarg2; 
  if (arg1) (arg1)->m_baseInertia = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btMultiBodyDoubleData_1baseInertia_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Bullet::btMultiBodyDoubleData *arg1 = (Bullet::btMultiBodyDoubleData *) 0 ;
  Bullet::btVector3DoubleData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btMultiBodyDoubleData **)&jarg1; 
  result = (Bullet::btVector3DoubleData *)& ((arg1)->m_baseInertia);
  *(Bullet::btVector3DoubleData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btMultiBodyDoubleData_1baseMass_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  Bullet::btMultiBodyDoubleData *arg1 = (Bullet::btMultiBodyDoubleData *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btMultiBodyDoubleData **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->m_baseMass = arg2;
}


SWIGEXPORT jdouble JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btMultiBodyDoubleData_1baseMass_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  Bullet::btMultiBodyDoubleData *arg1 = (Bullet::btMultiBodyDoubleData *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btMultiBodyDoubleData **)&jarg1; 
  result = (double) ((arg1)->m_baseMass);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btMultiBodyDoubleData_1baseName_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  Bullet::btMultiBodyDoubleData *arg1 = (Bullet::btMultiBodyDoubleData *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btMultiBodyDoubleData **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    delete [] arg1->m_baseName;
    if (arg2) {
      arg1->m_baseName = (char *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->m_baseName, (const char *)arg2);
    } else {
      arg1->m_baseName = 0;
    }
  }
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btMultiBodyDoubleData_1baseName_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  Bullet::btMultiBodyDoubleData *arg1 = (Bullet::btMultiBodyDoubleData *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btMultiBodyDoubleData **)&jarg1; 
  result = (char *) ((arg1)->m_baseName);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btMultiBodyDoubleData_1links_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Bullet::btMultiBodyDoubleData *arg1 = (Bullet::btMultiBodyDoubleData *) 0 ;
  Bullet::btMultiBodyLinkDoubleData *arg2 = (Bullet::btMultiBodyLinkDoubleData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Bullet::btMultiBodyDoubleData **)&jarg1; 
  arg2 = *(Bullet::btMultiBodyLinkDoubleData **)&jarg2; 
  if (arg1) (arg1)->m_links = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btMultiBodyDoubleData_1links_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Bullet::btMultiBodyDoubleData *arg1 = (Bullet::btMultiBodyDoubleData *) 0 ;
  Bullet::btMultiBodyLinkDoubleData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btMultiBodyDoubleData **)&jarg1; 
  result = (Bullet::btMultiBodyLinkDoubleData *) ((arg1)->m_links);
  *(Bullet::btMultiBodyLinkDoubleData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btMultiBodyDoubleData_1baseCollider_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Bullet::btMultiBodyDoubleData *arg1 = (Bullet::btMultiBodyDoubleData *) 0 ;
  Bullet::btCollisionObjectDoubleData *arg2 = (Bullet::btCollisionObjectDoubleData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Bullet::btMultiBodyDoubleData **)&jarg1; 
  arg2 = *(Bullet::btCollisionObjectDoubleData **)&jarg2; 
  if (arg1) (arg1)->m_baseCollider = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btMultiBodyDoubleData_1baseCollider_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Bullet::btMultiBodyDoubleData *arg1 = (Bullet::btMultiBodyDoubleData *) 0 ;
  Bullet::btCollisionObjectDoubleData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btMultiBodyDoubleData **)&jarg1; 
  result = (Bullet::btCollisionObjectDoubleData *) ((arg1)->m_baseCollider);
  *(Bullet::btCollisionObjectDoubleData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btMultiBodyDoubleData_1paddingPtr_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  Bullet::btMultiBodyDoubleData *arg1 = (Bullet::btMultiBodyDoubleData *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btMultiBodyDoubleData **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    delete [] arg1->m_paddingPtr;
    if (arg2) {
      arg1->m_paddingPtr = (char *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->m_paddingPtr, (const char *)arg2);
    } else {
      arg1->m_paddingPtr = 0;
    }
  }
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btMultiBodyDoubleData_1paddingPtr_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  Bullet::btMultiBodyDoubleData *arg1 = (Bullet::btMultiBodyDoubleData *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btMultiBodyDoubleData **)&jarg1; 
  result = (char *) ((arg1)->m_paddingPtr);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btMultiBodyDoubleData_1numLinks_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Bullet::btMultiBodyDoubleData *arg1 = (Bullet::btMultiBodyDoubleData *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btMultiBodyDoubleData **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_numLinks = arg2;
}


SWIGEXPORT jint JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btMultiBodyDoubleData_1numLinks_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Bullet::btMultiBodyDoubleData *arg1 = (Bullet::btMultiBodyDoubleData *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btMultiBodyDoubleData **)&jarg1; 
  result = (int) ((arg1)->m_numLinks);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btMultiBodyDoubleData_1padding_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  Bullet::btMultiBodyDoubleData *arg1 = (Bullet::btMultiBodyDoubleData *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btMultiBodyDoubleData **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->m_padding, (const char *)arg2, 4-1);
      arg1->m_padding[4-1] = 0;
    } else {
      arg1->m_padding[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btMultiBodyDoubleData_1padding_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  Bullet::btMultiBodyDoubleData *arg1 = (Bullet::btMultiBodyDoubleData *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btMultiBodyDoubleData **)&jarg1; 
  result = (char *)(char *) ((arg1)->m_padding);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_new_1btMultiBodyDoubleData(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Bullet::btMultiBodyDoubleData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Bullet::btMultiBodyDoubleData *)new Bullet::btMultiBodyDoubleData();
  *(Bullet::btMultiBodyDoubleData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_delete_1btMultiBodyDoubleData(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Bullet::btMultiBodyDoubleData *arg1 = (Bullet::btMultiBodyDoubleData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Bullet::btMultiBodyDoubleData **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btMultiBodyFloatData_1baseName_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  Bullet::btMultiBodyFloatData *arg1 = (Bullet::btMultiBodyFloatData *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btMultiBodyFloatData **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    delete [] arg1->m_baseName;
    if (arg2) {
      arg1->m_baseName = (char *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->m_baseName, (const char *)arg2);
    } else {
      arg1->m_baseName = 0;
    }
  }
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btMultiBodyFloatData_1baseName_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  Bullet::btMultiBodyFloatData *arg1 = (Bullet::btMultiBodyFloatData *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btMultiBodyFloatData **)&jarg1; 
  result = (char *) ((arg1)->m_baseName);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btMultiBodyFloatData_1links_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Bullet::btMultiBodyFloatData *arg1 = (Bullet::btMultiBodyFloatData *) 0 ;
  Bullet::btMultiBodyLinkFloatData *arg2 = (Bullet::btMultiBodyLinkFloatData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Bullet::btMultiBodyFloatData **)&jarg1; 
  arg2 = *(Bullet::btMultiBodyLinkFloatData **)&jarg2; 
  if (arg1) (arg1)->m_links = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btMultiBodyFloatData_1links_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Bullet::btMultiBodyFloatData *arg1 = (Bullet::btMultiBodyFloatData *) 0 ;
  Bullet::btMultiBodyLinkFloatData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btMultiBodyFloatData **)&jarg1; 
  result = (Bullet::btMultiBodyLinkFloatData *) ((arg1)->m_links);
  *(Bullet::btMultiBodyLinkFloatData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btMultiBodyFloatData_1baseCollider_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Bullet::btMultiBodyFloatData *arg1 = (Bullet::btMultiBodyFloatData *) 0 ;
  Bullet::btCollisionObjectFloatData *arg2 = (Bullet::btCollisionObjectFloatData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Bullet::btMultiBodyFloatData **)&jarg1; 
  arg2 = *(Bullet::btCollisionObjectFloatData **)&jarg2; 
  if (arg1) (arg1)->m_baseCollider = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btMultiBodyFloatData_1baseCollider_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Bullet::btMultiBodyFloatData *arg1 = (Bullet::btMultiBodyFloatData *) 0 ;
  Bullet::btCollisionObjectFloatData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btMultiBodyFloatData **)&jarg1; 
  result = (Bullet::btCollisionObjectFloatData *) ((arg1)->m_baseCollider);
  *(Bullet::btCollisionObjectFloatData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btMultiBodyFloatData_1baseWorldTransform_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Bullet::btMultiBodyFloatData *arg1 = (Bullet::btMultiBodyFloatData *) 0 ;
  Bullet::btTransformFloatData *arg2 = (Bullet::btTransformFloatData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Bullet::btMultiBodyFloatData **)&jarg1; 
  arg2 = *(Bullet::btTransformFloatData **)&jarg2; 
  if (arg1) (arg1)->m_baseWorldTransform = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btMultiBodyFloatData_1baseWorldTransform_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Bullet::btMultiBodyFloatData *arg1 = (Bullet::btMultiBodyFloatData *) 0 ;
  Bullet::btTransformFloatData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btMultiBodyFloatData **)&jarg1; 
  result = (Bullet::btTransformFloatData *)& ((arg1)->m_baseWorldTransform);
  *(Bullet::btTransformFloatData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btMultiBodyFloatData_1baseInertia_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Bullet::btMultiBodyFloatData *arg1 = (Bullet::btMultiBodyFloatData *) 0 ;
  Bullet::btVector3FloatData *arg2 = (Bullet::btVector3FloatData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Bullet::btMultiBodyFloatData **)&jarg1; 
  arg2 = *(Bullet::btVector3FloatData **)&jarg2; 
  if (arg1) (arg1)->m_baseInertia = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btMultiBodyFloatData_1baseInertia_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Bullet::btMultiBodyFloatData *arg1 = (Bullet::btMultiBodyFloatData *) 0 ;
  Bullet::btVector3FloatData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btMultiBodyFloatData **)&jarg1; 
  result = (Bullet::btVector3FloatData *)& ((arg1)->m_baseInertia);
  *(Bullet::btVector3FloatData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btMultiBodyFloatData_1baseMass_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  Bullet::btMultiBodyFloatData *arg1 = (Bullet::btMultiBodyFloatData *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btMultiBodyFloatData **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->m_baseMass = arg2;
}


SWIGEXPORT jfloat JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btMultiBodyFloatData_1baseMass_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  Bullet::btMultiBodyFloatData *arg1 = (Bullet::btMultiBodyFloatData *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btMultiBodyFloatData **)&jarg1; 
  result = (float) ((arg1)->m_baseMass);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btMultiBodyFloatData_1numLinks_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Bullet::btMultiBodyFloatData *arg1 = (Bullet::btMultiBodyFloatData *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btMultiBodyFloatData **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_numLinks = arg2;
}


SWIGEXPORT jint JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btMultiBodyFloatData_1numLinks_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Bullet::btMultiBodyFloatData *arg1 = (Bullet::btMultiBodyFloatData *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bullet::btMultiBodyFloatData **)&jarg1; 
  result = (int) ((arg1)->m_numLinks);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_new_1btMultiBodyFloatData(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Bullet::btMultiBodyFloatData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Bullet::btMultiBodyFloatData *)new Bullet::btMultiBodyFloatData();
  *(Bullet::btMultiBodyFloatData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_delete_1btMultiBodyFloatData(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Bullet::btMultiBodyFloatData *arg1 = (Bullet::btMultiBodyFloatData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Bullet::btMultiBodyFloatData **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_delete_1MultiBodyTreeCreator(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  btInverseDynamicsBullet3::MultiBodyTreeCreator *arg1 = (btInverseDynamicsBullet3::MultiBodyTreeCreator *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(btInverseDynamicsBullet3::MultiBodyTreeCreator **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_MultiBodyTreeCreator_1getNumBodies(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobject jarg2) {
  jint jresult = 0 ;
  btInverseDynamicsBullet3::MultiBodyTreeCreator *arg1 = (btInverseDynamicsBullet3::MultiBodyTreeCreator *) 0 ;
  int *arg2 = (int *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(btInverseDynamicsBullet3::MultiBodyTreeCreator **)&jarg1; 
  {
    arg2 = (int*)jenv->GetDirectBufferAddress(jarg2);
    if (arg2 == NULL) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unable to get address of direct buffer. Buffer must be allocated direct.");
    }
  }
  result = (int)((btInverseDynamicsBullet3::MultiBodyTreeCreator const *)arg1)->getNumBodies(arg2);
  jresult = (jint)result; 
  
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_MultiBodyTreeCreator_1getBody(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jobject jarg3, jlong jarg4, jlong jarg5, jlong jarg6, jlong jarg7, jobject jarg8, jlong jarg9, jlong jarg10, jobject jarg11, jlong jarg12) {
  jint jresult = 0 ;
  btInverseDynamicsBullet3::MultiBodyTreeCreator *arg1 = (btInverseDynamicsBullet3::MultiBodyTreeCreator *) 0 ;
  int arg2 ;
  int *arg3 = (int *) 0 ;
  btInverseDynamicsBullet3::JointType *arg4 = (btInverseDynamicsBullet3::JointType *) 0 ;
  vec3 *arg5 = (vec3 *) 0 ;
  mat33 *arg6 = (mat33 *) 0 ;
  vec3 *arg7 = (vec3 *) 0 ;
  idScalar *arg8 = (idScalar *) 0 ;
  vec3 *arg9 = (vec3 *) 0 ;
  mat33 *arg10 = (mat33 *) 0 ;
  int *arg11 = (int *) 0 ;
  void **arg12 = (void **) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(btInverseDynamicsBullet3::MultiBodyTreeCreator **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    arg3 = (int*)jenv->GetDirectBufferAddress(jarg3);
    if (arg3 == NULL) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unable to get address of direct buffer. Buffer must be allocated direct.");
    }
  }
  arg4 = *(btInverseDynamicsBullet3::JointType **)&jarg4; 
  arg5 = *(vec3 **)&jarg5; 
  arg6 = *(mat33 **)&jarg6; 
  arg7 = *(vec3 **)&jarg7; 
  {
    arg8 = (btScalar*)jenv->GetDirectBufferAddress(jarg8);
    if (arg8 == NULL) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unable to get address of direct buffer. Buffer must be allocated direct.");
    }
  }
  arg9 = *(vec3 **)&jarg9; 
  arg10 = *(mat33 **)&jarg10; 
  {
    arg11 = (int*)jenv->GetDirectBufferAddress(jarg11);
    if (arg11 == NULL) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unable to get address of direct buffer. Buffer must be allocated direct.");
    }
  }
  arg12 = *(void ***)&jarg12; 
  result = (int)((btInverseDynamicsBullet3::MultiBodyTreeCreator const *)arg1)->getBody(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12);
  jresult = (jint)result; 
  
  
  
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_MultiBodyTreeCreator_1getNameMap(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  btInverseDynamicsBullet3::MultiBodyTreeCreator *arg1 = (btInverseDynamicsBullet3::MultiBodyTreeCreator *) 0 ;
  MultiBodyNameMap *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(btInverseDynamicsBullet3::MultiBodyTreeCreator **)&jarg1; 
  result = (MultiBodyNameMap *)((btInverseDynamicsBullet3::MultiBodyTreeCreator const *)arg1)->getNameMap();
  *(MultiBodyNameMap **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_CreateMultiBodyTree(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  btInverseDynamicsBullet3::MultiBodyTreeCreator *arg1 = 0 ;
  btInverseDynamicsBullet3::MultiBodyTree *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(btInverseDynamicsBullet3::MultiBodyTreeCreator **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "btInverseDynamicsBullet3::MultiBodyTreeCreator const & reference is null");
    return 0;
  } 
  result = (btInverseDynamicsBullet3::MultiBodyTree *)btInverseDynamicsBullet3::CreateMultiBodyTree((btInverseDynamicsBullet3::MultiBodyTreeCreator const &)*arg1);
  *(btInverseDynamicsBullet3::MultiBodyTree **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_new_1CoilCreator(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  int arg1 ;
  btInverseDynamicsBullet3::CoilCreator *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  result = (btInverseDynamicsBullet3::CoilCreator *)new btInverseDynamicsBullet3::CoilCreator(arg1);
  *(btInverseDynamicsBullet3::CoilCreator **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_delete_1CoilCreator(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  btInverseDynamicsBullet3::CoilCreator *arg1 = (btInverseDynamicsBullet3::CoilCreator *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(btInverseDynamicsBullet3::CoilCreator **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_new_1CloneTreeCreator(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  btInverseDynamicsBullet3::MultiBodyTree *arg1 = (btInverseDynamicsBullet3::MultiBodyTree *) 0 ;
  btInverseDynamicsBullet3::CloneTreeCreator *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(btInverseDynamicsBullet3::MultiBodyTree **)&jarg1; 
  result = (btInverseDynamicsBullet3::CloneTreeCreator *)new btInverseDynamicsBullet3::CloneTreeCreator((btInverseDynamicsBullet3::MultiBodyTree const *)arg1);
  *(btInverseDynamicsBullet3::CloneTreeCreator **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_delete_1CloneTreeCreator(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  btInverseDynamicsBullet3::CloneTreeCreator *arg1 = (btInverseDynamicsBullet3::CloneTreeCreator *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(btInverseDynamicsBullet3::CloneTreeCreator **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_new_1DillCreator(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  int arg1 ;
  btInverseDynamicsBullet3::DillCreator *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  result = (btInverseDynamicsBullet3::DillCreator *)new btInverseDynamicsBullet3::DillCreator(arg1);
  *(btInverseDynamicsBullet3::DillCreator **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_delete_1DillCreator(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  btInverseDynamicsBullet3::DillCreator *arg1 = (btInverseDynamicsBullet3::DillCreator *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(btInverseDynamicsBullet3::DillCreator **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_new_1btMultiBodyTreeCreator(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  btInverseDynamicsBullet3::btMultiBodyTreeCreator *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (btInverseDynamicsBullet3::btMultiBodyTreeCreator *)new btInverseDynamicsBullet3::btMultiBodyTreeCreator();
  *(btInverseDynamicsBullet3::btMultiBodyTreeCreator **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_delete_1btMultiBodyTreeCreator(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  btInverseDynamicsBullet3::btMultiBodyTreeCreator *arg1 = (btInverseDynamicsBullet3::btMultiBodyTreeCreator *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(btInverseDynamicsBullet3::btMultiBodyTreeCreator **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btMultiBodyTreeCreator_1createFromBtMultiBody_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jboolean jarg3) {
  jint jresult = 0 ;
  btInverseDynamicsBullet3::btMultiBodyTreeCreator *arg1 = (btInverseDynamicsBullet3::btMultiBodyTreeCreator *) 0 ;
  btMultiBody *arg2 = (btMultiBody *) 0 ;
  bool arg3 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(btInverseDynamicsBullet3::btMultiBodyTreeCreator **)&jarg1; 
  arg2 = *(btMultiBody **)&jarg2; 
  arg3 = jarg3 ? true : false; 
  result = (int)(arg1)->createFromBtMultiBody((btMultiBody const *)arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btMultiBodyTreeCreator_1createFromBtMultiBody_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  btInverseDynamicsBullet3::btMultiBodyTreeCreator *arg1 = (btInverseDynamicsBullet3::btMultiBodyTreeCreator *) 0 ;
  btMultiBody *arg2 = (btMultiBody *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(btInverseDynamicsBullet3::btMultiBodyTreeCreator **)&jarg1; 
  arg2 = *(btMultiBody **)&jarg2; 
  result = (int)(arg1)->createFromBtMultiBody((btMultiBody const *)arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_randomInit_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  (void)jenv;
  (void)jcls;
  btInverseDynamicsBullet3::randomInit();
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_randomInit_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  unsigned int arg1 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (unsigned int)jarg1; 
  btInverseDynamicsBullet3::randomInit(arg1);
}


SWIGEXPORT jint JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_randomInt(JNIEnv *jenv, jclass jcls, jint jarg1, jint jarg2) {
  jint jresult = 0 ;
  int arg1 ;
  int arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  arg2 = (int)jarg2; 
  result = (int)btInverseDynamicsBullet3::randomInt(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_randomFloat(JNIEnv *jenv, jclass jcls, jfloat jarg1, jfloat jarg2) {
  jfloat jresult = 0 ;
  float arg1 ;
  float arg2 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (float)jarg1; 
  arg2 = (float)jarg2; 
  result = (float)btInverseDynamicsBullet3::randomFloat(arg1,arg2);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_randomMass(JNIEnv *jenv, jclass jcls) {
  jfloat jresult = 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  result = (float)btInverseDynamicsBullet3::randomMass();
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_randomInertiaPrincipal(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  vec3 result;
  
  (void)jenv;
  (void)jcls;
  result = btInverseDynamicsBullet3::randomInertiaPrincipal();
  *(vec3 **)&jresult = new vec3((const vec3 &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_randomInertiaMatrix(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  mat33 result;
  
  (void)jenv;
  (void)jcls;
  result = btInverseDynamicsBullet3::randomInertiaMatrix();
  *(mat33 **)&jresult = new mat33((const mat33 &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_randomAxis(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  vec3 result;
  
  (void)jenv;
  (void)jcls;
  result = btInverseDynamicsBullet3::randomAxis();
  *(vec3 **)&jresult = new vec3((const vec3 &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_new_1MultiBodyNameMap(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  btInverseDynamicsBullet3::MultiBodyNameMap *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (btInverseDynamicsBullet3::MultiBodyNameMap *)new btInverseDynamicsBullet3::MultiBodyNameMap();
  *(btInverseDynamicsBullet3::MultiBodyNameMap **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_MultiBodyNameMap_1addBody(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3) {
  jint jresult = 0 ;
  btInverseDynamicsBullet3::MultiBodyNameMap *arg1 = (btInverseDynamicsBullet3::MultiBodyNameMap *) 0 ;
  int arg2 ;
  std::string *arg3 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(btInverseDynamicsBullet3::MultiBodyNameMap **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(std::string **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::string const & reference is null");
    return 0;
  } 
  result = (int)(arg1)->addBody(arg2,(std::string const &)*arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_MultiBodyNameMap_1addJoint(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3) {
  jint jresult = 0 ;
  btInverseDynamicsBullet3::MultiBodyNameMap *arg1 = (btInverseDynamicsBullet3::MultiBodyNameMap *) 0 ;
  int arg2 ;
  std::string *arg3 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(btInverseDynamicsBullet3::MultiBodyNameMap **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(std::string **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::string const & reference is null");
    return 0;
  } 
  result = (int)(arg1)->addJoint(arg2,(std::string const &)*arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_MultiBodyNameMap_1getBodyName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3) {
  jint jresult = 0 ;
  btInverseDynamicsBullet3::MultiBodyNameMap *arg1 = (btInverseDynamicsBullet3::MultiBodyNameMap *) 0 ;
  int arg2 ;
  std::string *arg3 = (std::string *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(btInverseDynamicsBullet3::MultiBodyNameMap **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(std::string **)&jarg3; 
  result = (int)((btInverseDynamicsBullet3::MultiBodyNameMap const *)arg1)->getBodyName(arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_MultiBodyNameMap_1getJointName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3) {
  jint jresult = 0 ;
  btInverseDynamicsBullet3::MultiBodyNameMap *arg1 = (btInverseDynamicsBullet3::MultiBodyNameMap *) 0 ;
  int arg2 ;
  std::string *arg3 = (std::string *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(btInverseDynamicsBullet3::MultiBodyNameMap **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(std::string **)&jarg3; 
  result = (int)((btInverseDynamicsBullet3::MultiBodyNameMap const *)arg1)->getJointName(arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_MultiBodyNameMap_1getBodyIndex(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg3) {
  jint jresult = 0 ;
  btInverseDynamicsBullet3::MultiBodyNameMap *arg1 = (btInverseDynamicsBullet3::MultiBodyNameMap *) 0 ;
  std::string *arg2 = 0 ;
  int *arg3 = (int *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(btInverseDynamicsBullet3::MultiBodyNameMap **)&jarg1; 
  arg2 = *(std::string **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::string const & reference is null");
    return 0;
  } 
  {
    arg3 = (int*)jenv->GetDirectBufferAddress(jarg3);
    if (arg3 == NULL) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unable to get address of direct buffer. Buffer must be allocated direct.");
    }
  }
  result = (int)((btInverseDynamicsBullet3::MultiBodyNameMap const *)arg1)->getBodyIndex((std::string const &)*arg2,arg3);
  jresult = (jint)result; 
  
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_MultiBodyNameMap_1getJointIndex(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg3) {
  jint jresult = 0 ;
  btInverseDynamicsBullet3::MultiBodyNameMap *arg1 = (btInverseDynamicsBullet3::MultiBodyNameMap *) 0 ;
  std::string *arg2 = 0 ;
  int *arg3 = (int *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(btInverseDynamicsBullet3::MultiBodyNameMap **)&jarg1; 
  arg2 = *(std::string **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::string const & reference is null");
    return 0;
  } 
  {
    arg3 = (int*)jenv->GetDirectBufferAddress(jarg3);
    if (arg3 == NULL) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unable to get address of direct buffer. Buffer must be allocated direct.");
    }
  }
  result = (int)((btInverseDynamicsBullet3::MultiBodyNameMap const *)arg1)->getJointIndex((std::string const &)*arg2,arg3);
  jresult = (jint)result; 
  
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_delete_1MultiBodyNameMap(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  btInverseDynamicsBullet3::MultiBodyNameMap *arg1 = (btInverseDynamicsBullet3::MultiBodyNameMap *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(btInverseDynamicsBullet3::MultiBodyNameMap **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_writeGraphvizDotFile(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3) {
  jint jresult = 0 ;
  btInverseDynamicsBullet3::MultiBodyTree *arg1 = (btInverseDynamicsBullet3::MultiBodyTree *) 0 ;
  btInverseDynamicsBullet3::MultiBodyNameMap *arg2 = (btInverseDynamicsBullet3::MultiBodyNameMap *) 0 ;
  char *arg3 = (char *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(btInverseDynamicsBullet3::MultiBodyTree **)&jarg1; 
  arg2 = *(btInverseDynamicsBullet3::MultiBodyNameMap **)&jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  result = (int)btInverseDynamicsBullet3::writeGraphvizDotFile((btInverseDynamicsBullet3::MultiBodyTree const *)arg1,(btInverseDynamicsBullet3::MultiBodyNameMap const *)arg2,(char const *)arg3);
  jresult = (jint)result; 
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_new_1RandomTreeCreator_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jint jarg1, jboolean jarg2) {
  jlong jresult = 0 ;
  int arg1 ;
  bool arg2 ;
  btInverseDynamicsBullet3::RandomTreeCreator *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (btInverseDynamicsBullet3::RandomTreeCreator *)new btInverseDynamicsBullet3::RandomTreeCreator(arg1,arg2);
  *(btInverseDynamicsBullet3::RandomTreeCreator **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_new_1RandomTreeCreator_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  int arg1 ;
  btInverseDynamicsBullet3::RandomTreeCreator *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  result = (btInverseDynamicsBullet3::RandomTreeCreator *)new btInverseDynamicsBullet3::RandomTreeCreator(arg1);
  *(btInverseDynamicsBullet3::RandomTreeCreator **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_delete_1RandomTreeCreator(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  btInverseDynamicsBullet3::RandomTreeCreator *arg1 = (btInverseDynamicsBullet3::RandomTreeCreator *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(btInverseDynamicsBullet3::RandomTreeCreator **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_new_1SimpleTreeCreator(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  int arg1 ;
  btInverseDynamicsBullet3::SimpleTreeCreator *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  result = (btInverseDynamicsBullet3::SimpleTreeCreator *)new btInverseDynamicsBullet3::SimpleTreeCreator(arg1);
  *(btInverseDynamicsBullet3::SimpleTreeCreator **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_delete_1SimpleTreeCreator(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  btInverseDynamicsBullet3::SimpleTreeCreator *arg1 = (btInverseDynamicsBullet3::SimpleTreeCreator *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(btInverseDynamicsBullet3::SimpleTreeCreator **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_new_1User2InternalIndex(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  btInverseDynamicsBullet3::User2InternalIndex *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (btInverseDynamicsBullet3::User2InternalIndex *)new btInverseDynamicsBullet3::User2InternalIndex();
  *(btInverseDynamicsBullet3::User2InternalIndex **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_User2InternalIndex_1addBody(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  btInverseDynamicsBullet3::User2InternalIndex *arg1 = (btInverseDynamicsBullet3::User2InternalIndex *) 0 ;
  int arg2 ;
  int arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(btInverseDynamicsBullet3::User2InternalIndex **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->addBody(arg2,arg3);
}


SWIGEXPORT jint JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_User2InternalIndex_1buildMapping(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  btInverseDynamicsBullet3::User2InternalIndex *arg1 = (btInverseDynamicsBullet3::User2InternalIndex *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(btInverseDynamicsBullet3::User2InternalIndex **)&jarg1; 
  result = (int)(arg1)->buildMapping();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_User2InternalIndex_1user2internal(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jobject jarg3) {
  jint jresult = 0 ;
  btInverseDynamicsBullet3::User2InternalIndex *arg1 = (btInverseDynamicsBullet3::User2InternalIndex *) 0 ;
  int arg2 ;
  int *arg3 = (int *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(btInverseDynamicsBullet3::User2InternalIndex **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    arg3 = (int*)jenv->GetDirectBufferAddress(jarg3);
    if (arg3 == NULL) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unable to get address of direct buffer. Buffer must be allocated direct.");
    }
  }
  result = (int)((btInverseDynamicsBullet3::User2InternalIndex const *)arg1)->user2internal(arg2,arg3);
  jresult = (jint)result; 
  
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_User2InternalIndex_1internal2user(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jobject jarg3) {
  jint jresult = 0 ;
  btInverseDynamicsBullet3::User2InternalIndex *arg1 = (btInverseDynamicsBullet3::User2InternalIndex *) 0 ;
  int arg2 ;
  int *arg3 = (int *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(btInverseDynamicsBullet3::User2InternalIndex **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    arg3 = (int*)jenv->GetDirectBufferAddress(jarg3);
    if (arg3 == NULL) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unable to get address of direct buffer. Buffer must be allocated direct.");
    }
  }
  result = (int)((btInverseDynamicsBullet3::User2InternalIndex const *)arg1)->internal2user(arg2,arg3);
  jresult = (jint)result; 
  
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_delete_1User2InternalIndex(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  btInverseDynamicsBullet3::User2InternalIndex *arg1 = (btInverseDynamicsBullet3::User2InternalIndex *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(btInverseDynamicsBullet3::User2InternalIndex **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_compareInverseAndForwardDynamics(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jobject jarg4, jboolean jarg5, jlong jarg6, jobject jarg6_, jlong jarg7, jobject jarg7_, jobject jarg8, jobject jarg9) {
  jint jresult = 0 ;
  vecx *arg1 = 0 ;
  vecx *arg2 = 0 ;
  vecx *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  bool arg5 ;
  btMultiBody *arg6 = (btMultiBody *) 0 ;
  btInverseDynamicsBullet3::MultiBodyTree *arg7 = (btInverseDynamicsBullet3::MultiBodyTree *) 0 ;
  double *arg8 = (double *) 0 ;
  double *arg9 = (double *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg6_;
  (void)jarg7_;
  arg1 = *(vecx **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "vecx & reference is null");
    return 0;
  } 
  arg2 = *(vecx **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "vecx & reference is null");
    return 0;
  } 
  arg3 = *(vecx **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "vecx & reference is null");
    return 0;
  } 
  btVector3 local_arg4;
  gdx_setbtVector3FromVector3(jenv, local_arg4, jarg4);
  arg4 = &local_arg4;
  gdxAutoCommitVector3 auto_commit_arg4(jenv, jarg4, &local_arg4);
  arg5 = jarg5 ? true : false; 
  arg6 = *(btMultiBody **)&jarg6; 
  arg7 = *(btInverseDynamicsBullet3::MultiBodyTree **)&jarg7; 
  {
    arg8 = (double*)jenv->GetDirectBufferAddress(jarg8);
    if (arg8 == NULL) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unable to get address of direct buffer. Buffer must be allocated direct.");
    }
  }
  {
    arg9 = (double*)jenv->GetDirectBufferAddress(jarg9);
    if (arg9 == NULL) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unable to get address of direct buffer. Buffer must be allocated direct.");
    }
  }
  result = (int)btInverseDynamicsBullet3::compareInverseAndForwardDynamics(*arg1,*arg2,*arg3,*arg4,arg5,arg6,arg7,arg8,arg9);
  jresult = (jint)result; 
  
  
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btBulletWorldImporter_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(btWorldImporter **)&baseptr = *(btBulletWorldImporter **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btBulletFile_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(bParse::bFile **)&baseptr = *(bParse::btBulletFile **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_CoilCreator_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(btInverseDynamicsBullet3::MultiBodyTreeCreator **)&baseptr = *(btInverseDynamicsBullet3::CoilCreator **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_CloneTreeCreator_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(btInverseDynamicsBullet3::MultiBodyTreeCreator **)&baseptr = *(btInverseDynamicsBullet3::CloneTreeCreator **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_DillCreator_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(btInverseDynamicsBullet3::MultiBodyTreeCreator **)&baseptr = *(btInverseDynamicsBullet3::DillCreator **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_btMultiBodyTreeCreator_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(btInverseDynamicsBullet3::MultiBodyTreeCreator **)&baseptr = *(btInverseDynamicsBullet3::btMultiBodyTreeCreator **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_RandomTreeCreator_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(btInverseDynamicsBullet3::MultiBodyTreeCreator **)&baseptr = *(btInverseDynamicsBullet3::RandomTreeCreator **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_SimpleTreeCreator_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(btInverseDynamicsBullet3::MultiBodyTreeCreator **)&baseptr = *(btInverseDynamicsBullet3::SimpleTreeCreator **)&jarg1;
    return baseptr;
}

SWIGEXPORT void JNICALL Java_com_badlogic_gdx_physics_bullet_extras_ExtrasJNI_swig_1module_1init(JNIEnv *jenv, jclass jcls) {
  int i;
  
  static struct {
    const char *method;
    const char *signature;
  } methods[3] = {
    {
      "SwigDirector_btBulletWorldImporter_deleteAllData", "(Lcom/badlogic/gdx/physics/bullet/extras/btBulletWorldImporter;)V" 
    },
    {
      "SwigDirector_btBulletWorldImporter_setDynamicsWorldInfo", "(Lcom/badlogic/gdx/physics/bullet/extras/btBulletWorldImporter;Lcom/badlogic/gdx/math/Vector3;J)V" 
    },
    {
      "SwigDirector_btBulletWorldImporter_convertAllObjects", "(Lcom/badlogic/gdx/physics/bullet/extras/btBulletWorldImporter;J)Z" 
    }
  };
  Swig::jclass_ExtrasJNI = (jclass) jenv->NewGlobalRef(jcls);
  if (!Swig::jclass_ExtrasJNI) return;
  for (i = 0; i < (int) (sizeof(methods)/sizeof(methods[0])); ++i) {
    Swig::director_method_ids[i] = jenv->GetStaticMethodID(jcls, methods[i].method, methods[i].signature);
    if (!Swig::director_method_ids[i]) return;
  }
}


#ifdef __cplusplus
}
#endif

