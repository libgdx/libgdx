/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.11
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */

#ifndef SWIG_Dynamics_WRAP_H_
#define SWIG_Dynamics_WRAP_H_

class SwigDirector_InternalTickCallback : public InternalTickCallback, public Swig::Director {

public:
    void swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global);
    SwigDirector_InternalTickCallback(JNIEnv *jenv, btDynamicsWorld *dynamicsWorld = NULL, bool isPreTick = false);
    virtual void onInternalTick(btDynamicsWorld *dynamicsWorld, btScalar timeStep);
public:
    bool swig_overrides(int n) {
      return (n < 1 ? swig_override[n] : false);
    }
protected:
    Swig::BoolArray<1> swig_override;
};

class SwigDirector_CustomActionInterface : public CustomActionInterface, public Swig::Director {

public:
    void swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global);
    SwigDirector_CustomActionInterface(JNIEnv *jenv);
    virtual ~SwigDirector_CustomActionInterface();
    virtual void updateAction(btCollisionWorld *collisionWorld, btScalar timeStep);
    virtual void debugDraw(btIDebugDraw *debugDrawer);
    virtual void updateAction(btScalar timeStep);
    virtual void debugDraw();
public:
    bool swig_overrides(int n) {
      return (n < 2 ? swig_override[n] : false);
    }
protected:
    Swig::BoolArray<2> swig_override;
};


#endif
