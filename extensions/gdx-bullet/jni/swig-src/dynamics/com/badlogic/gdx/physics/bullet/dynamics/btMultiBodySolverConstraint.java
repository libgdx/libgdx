/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.11
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package com.badlogic.gdx.physics.bullet.dynamics;

import com.badlogic.gdx.physics.bullet.BulletBase;
import com.badlogic.gdx.physics.bullet.linearmath.*;
import com.badlogic.gdx.physics.bullet.collision.*;
import com.badlogic.gdx.math.Vector3;
import com.badlogic.gdx.math.Quaternion;
import com.badlogic.gdx.math.Matrix3;
import com.badlogic.gdx.math.Matrix4;

public class btMultiBodySolverConstraint extends BulletBase {
	private long swigCPtr;
	
	protected btMultiBodySolverConstraint(final String className, long cPtr, boolean cMemoryOwn) {
		super(className, cPtr, cMemoryOwn);
		swigCPtr = cPtr;
	}
	
	/** Construct a new btMultiBodySolverConstraint, normally you should not need this constructor it's intended for low-level usage. */ 
	public btMultiBodySolverConstraint(long cPtr, boolean cMemoryOwn) {
		this("btMultiBodySolverConstraint", cPtr, cMemoryOwn);
		construct();
	}
	
	@Override
	protected void reset(long cPtr, boolean cMemoryOwn) {
		if (!destroyed)
			destroy();
		super.reset(swigCPtr = cPtr, cMemoryOwn);
	}
	
	public static long getCPtr(btMultiBodySolverConstraint obj) {
		return (obj == null) ? 0 : obj.swigCPtr;
	}

	@Override
	protected void finalize() throws Throwable {
		if (!destroyed)
			destroy();
		super.finalize();
	}

  @Override protected synchronized void delete() {
		if (swigCPtr != 0) {
			if (swigCMemOwn) {
				swigCMemOwn = false;
				DynamicsJNI.delete_btMultiBodySolverConstraint(swigCPtr);
			}
			swigCPtr = 0;
		}
		super.delete();
	}

  public long operatorNew(long sizeInBytes) {
    return DynamicsJNI.btMultiBodySolverConstraint_operatorNew__SWIG_0(swigCPtr, this, sizeInBytes);
  }

  public void operatorDelete(long ptr) {
    DynamicsJNI.btMultiBodySolverConstraint_operatorDelete__SWIG_0(swigCPtr, this, ptr);
  }

  public long operatorNew(long arg0, long ptr) {
    return DynamicsJNI.btMultiBodySolverConstraint_operatorNew__SWIG_1(swigCPtr, this, arg0, ptr);
  }

  public void operatorDelete(long arg0, long arg1) {
    DynamicsJNI.btMultiBodySolverConstraint_operatorDelete__SWIG_1(swigCPtr, this, arg0, arg1);
  }

  public long operatorNewArray(long sizeInBytes) {
    return DynamicsJNI.btMultiBodySolverConstraint_operatorNewArray__SWIG_0(swigCPtr, this, sizeInBytes);
  }

  public void operatorDeleteArray(long ptr) {
    DynamicsJNI.btMultiBodySolverConstraint_operatorDeleteArray__SWIG_0(swigCPtr, this, ptr);
  }

  public long operatorNewArray(long arg0, long ptr) {
    return DynamicsJNI.btMultiBodySolverConstraint_operatorNewArray__SWIG_1(swigCPtr, this, arg0, ptr);
  }

  public void operatorDeleteArray(long arg0, long arg1) {
    DynamicsJNI.btMultiBodySolverConstraint_operatorDeleteArray__SWIG_1(swigCPtr, this, arg0, arg1);
  }

  public btMultiBodySolverConstraint() {
    this(DynamicsJNI.new_btMultiBodySolverConstraint(), true);
  }

  public void setDeltaVelAindex(int value) {
    DynamicsJNI.btMultiBodySolverConstraint_deltaVelAindex_set(swigCPtr, this, value);
  }

  public int getDeltaVelAindex() {
    return DynamicsJNI.btMultiBodySolverConstraint_deltaVelAindex_get(swigCPtr, this);
  }

  public void setJacAindex(int value) {
    DynamicsJNI.btMultiBodySolverConstraint_jacAindex_set(swigCPtr, this, value);
  }

  public int getJacAindex() {
    return DynamicsJNI.btMultiBodySolverConstraint_jacAindex_get(swigCPtr, this);
  }

  public void setDeltaVelBindex(int value) {
    DynamicsJNI.btMultiBodySolverConstraint_deltaVelBindex_set(swigCPtr, this, value);
  }

  public int getDeltaVelBindex() {
    return DynamicsJNI.btMultiBodySolverConstraint_deltaVelBindex_get(swigCPtr, this);
  }

  public void setJacBindex(int value) {
    DynamicsJNI.btMultiBodySolverConstraint_jacBindex_set(swigCPtr, this, value);
  }

  public int getJacBindex() {
    return DynamicsJNI.btMultiBodySolverConstraint_jacBindex_get(swigCPtr, this);
  }

  public void setRelpos1CrossNormal(btVector3 value) {
    DynamicsJNI.btMultiBodySolverConstraint_relpos1CrossNormal_set(swigCPtr, this, btVector3.getCPtr(value), value);
  }

  public btVector3 getRelpos1CrossNormal() {
    long cPtr = DynamicsJNI.btMultiBodySolverConstraint_relpos1CrossNormal_get(swigCPtr, this);
    return (cPtr == 0) ? null : new btVector3(cPtr, false);
  }

  public void setContactNormal1(btVector3 value) {
    DynamicsJNI.btMultiBodySolverConstraint_contactNormal1_set(swigCPtr, this, btVector3.getCPtr(value), value);
  }

  public btVector3 getContactNormal1() {
    long cPtr = DynamicsJNI.btMultiBodySolverConstraint_contactNormal1_get(swigCPtr, this);
    return (cPtr == 0) ? null : new btVector3(cPtr, false);
  }

  public void setRelpos2CrossNormal(btVector3 value) {
    DynamicsJNI.btMultiBodySolverConstraint_relpos2CrossNormal_set(swigCPtr, this, btVector3.getCPtr(value), value);
  }

  public btVector3 getRelpos2CrossNormal() {
    long cPtr = DynamicsJNI.btMultiBodySolverConstraint_relpos2CrossNormal_get(swigCPtr, this);
    return (cPtr == 0) ? null : new btVector3(cPtr, false);
  }

  public void setContactNormal2(btVector3 value) {
    DynamicsJNI.btMultiBodySolverConstraint_contactNormal2_set(swigCPtr, this, btVector3.getCPtr(value), value);
  }

  public btVector3 getContactNormal2() {
    long cPtr = DynamicsJNI.btMultiBodySolverConstraint_contactNormal2_get(swigCPtr, this);
    return (cPtr == 0) ? null : new btVector3(cPtr, false);
  }

  public void setAngularComponentA(btVector3 value) {
    DynamicsJNI.btMultiBodySolverConstraint_angularComponentA_set(swigCPtr, this, btVector3.getCPtr(value), value);
  }

  public btVector3 getAngularComponentA() {
    long cPtr = DynamicsJNI.btMultiBodySolverConstraint_angularComponentA_get(swigCPtr, this);
    return (cPtr == 0) ? null : new btVector3(cPtr, false);
  }

  public void setAngularComponentB(btVector3 value) {
    DynamicsJNI.btMultiBodySolverConstraint_angularComponentB_set(swigCPtr, this, btVector3.getCPtr(value), value);
  }

  public btVector3 getAngularComponentB() {
    long cPtr = DynamicsJNI.btMultiBodySolverConstraint_angularComponentB_get(swigCPtr, this);
    return (cPtr == 0) ? null : new btVector3(cPtr, false);
  }

  public void setAppliedPushImpulse(float value) {
    DynamicsJNI.btMultiBodySolverConstraint_appliedPushImpulse_set(swigCPtr, this, value);
  }

  public float getAppliedPushImpulse() {
    return DynamicsJNI.btMultiBodySolverConstraint_appliedPushImpulse_get(swigCPtr, this);
  }

  public void setAppliedImpulse(float value) {
    DynamicsJNI.btMultiBodySolverConstraint_appliedImpulse_set(swigCPtr, this, value);
  }

  public float getAppliedImpulse() {
    return DynamicsJNI.btMultiBodySolverConstraint_appliedImpulse_get(swigCPtr, this);
  }

  public void setFriction(float value) {
    DynamicsJNI.btMultiBodySolverConstraint_friction_set(swigCPtr, this, value);
  }

  public float getFriction() {
    return DynamicsJNI.btMultiBodySolverConstraint_friction_get(swigCPtr, this);
  }

  public void setJacDiagABInv(float value) {
    DynamicsJNI.btMultiBodySolverConstraint_jacDiagABInv_set(swigCPtr, this, value);
  }

  public float getJacDiagABInv() {
    return DynamicsJNI.btMultiBodySolverConstraint_jacDiagABInv_get(swigCPtr, this);
  }

  public void setRhs(float value) {
    DynamicsJNI.btMultiBodySolverConstraint_rhs_set(swigCPtr, this, value);
  }

  public float getRhs() {
    return DynamicsJNI.btMultiBodySolverConstraint_rhs_get(swigCPtr, this);
  }

  public void setCfm(float value) {
    DynamicsJNI.btMultiBodySolverConstraint_cfm_set(swigCPtr, this, value);
  }

  public float getCfm() {
    return DynamicsJNI.btMultiBodySolverConstraint_cfm_get(swigCPtr, this);
  }

  public void setLowerLimit(float value) {
    DynamicsJNI.btMultiBodySolverConstraint_lowerLimit_set(swigCPtr, this, value);
  }

  public float getLowerLimit() {
    return DynamicsJNI.btMultiBodySolverConstraint_lowerLimit_get(swigCPtr, this);
  }

  public void setUpperLimit(float value) {
    DynamicsJNI.btMultiBodySolverConstraint_upperLimit_set(swigCPtr, this, value);
  }

  public float getUpperLimit() {
    return DynamicsJNI.btMultiBodySolverConstraint_upperLimit_get(swigCPtr, this);
  }

  public void setRhsPenetration(float value) {
    DynamicsJNI.btMultiBodySolverConstraint_rhsPenetration_set(swigCPtr, this, value);
  }

  public float getRhsPenetration() {
    return DynamicsJNI.btMultiBodySolverConstraint_rhsPenetration_get(swigCPtr, this);
  }

  public void setOriginalContactPoint(long value) {
    DynamicsJNI.btMultiBodySolverConstraint_originalContactPoint_set(swigCPtr, this, value);
  }

  public long getOriginalContactPoint() {
    return DynamicsJNI.btMultiBodySolverConstraint_originalContactPoint_get(swigCPtr, this);
  }

  public void setUnusedPadding4(float value) {
    DynamicsJNI.btMultiBodySolverConstraint_unusedPadding4_set(swigCPtr, this, value);
  }

  public float getUnusedPadding4() {
    return DynamicsJNI.btMultiBodySolverConstraint_unusedPadding4_get(swigCPtr, this);
  }

  public void setOverrideNumSolverIterations(int value) {
    DynamicsJNI.btMultiBodySolverConstraint_overrideNumSolverIterations_set(swigCPtr, this, value);
  }

  public int getOverrideNumSolverIterations() {
    return DynamicsJNI.btMultiBodySolverConstraint_overrideNumSolverIterations_get(swigCPtr, this);
  }

  public void setFrictionIndex(int value) {
    DynamicsJNI.btMultiBodySolverConstraint_frictionIndex_set(swigCPtr, this, value);
  }

  public int getFrictionIndex() {
    return DynamicsJNI.btMultiBodySolverConstraint_frictionIndex_get(swigCPtr, this);
  }

  public void setSolverBodyIdA(int value) {
    DynamicsJNI.btMultiBodySolverConstraint_solverBodyIdA_set(swigCPtr, this, value);
  }

  public int getSolverBodyIdA() {
    return DynamicsJNI.btMultiBodySolverConstraint_solverBodyIdA_get(swigCPtr, this);
  }

  public void setMultiBodyA(btMultiBody value) {
    DynamicsJNI.btMultiBodySolverConstraint_multiBodyA_set(swigCPtr, this, btMultiBody.getCPtr(value), value);
  }

  public btMultiBody getMultiBodyA() {
    long cPtr = DynamicsJNI.btMultiBodySolverConstraint_multiBodyA_get(swigCPtr, this);
    return (cPtr == 0) ? null : new btMultiBody(cPtr, false);
  }

  public void setLinkA(int value) {
    DynamicsJNI.btMultiBodySolverConstraint_linkA_set(swigCPtr, this, value);
  }

  public int getLinkA() {
    return DynamicsJNI.btMultiBodySolverConstraint_linkA_get(swigCPtr, this);
  }

  public void setSolverBodyIdB(int value) {
    DynamicsJNI.btMultiBodySolverConstraint_solverBodyIdB_set(swigCPtr, this, value);
  }

  public int getSolverBodyIdB() {
    return DynamicsJNI.btMultiBodySolverConstraint_solverBodyIdB_get(swigCPtr, this);
  }

  public void setMultiBodyB(btMultiBody value) {
    DynamicsJNI.btMultiBodySolverConstraint_multiBodyB_set(swigCPtr, this, btMultiBody.getCPtr(value), value);
  }

  public btMultiBody getMultiBodyB() {
    long cPtr = DynamicsJNI.btMultiBodySolverConstraint_multiBodyB_get(swigCPtr, this);
    return (cPtr == 0) ? null : new btMultiBody(cPtr, false);
  }

  public void setLinkB(int value) {
    DynamicsJNI.btMultiBodySolverConstraint_linkB_set(swigCPtr, this, value);
  }

  public int getLinkB() {
    return DynamicsJNI.btMultiBodySolverConstraint_linkB_get(swigCPtr, this);
  }

  public void setOrgConstraint(btMultiBodyConstraint value) {
    DynamicsJNI.btMultiBodySolverConstraint_orgConstraint_set(swigCPtr, this, btMultiBodyConstraint.getCPtr(value), value);
  }

  public btMultiBodyConstraint getOrgConstraint() {
    long cPtr = DynamicsJNI.btMultiBodySolverConstraint_orgConstraint_get(swigCPtr, this);
    return (cPtr == 0) ? null : new btMultiBodyConstraint(cPtr, false);
  }

  public void setOrgDofIndex(int value) {
    DynamicsJNI.btMultiBodySolverConstraint_orgDofIndex_set(swigCPtr, this, value);
  }

  public int getOrgDofIndex() {
    return DynamicsJNI.btMultiBodySolverConstraint_orgDofIndex_get(swigCPtr, this);
  }

  public final static class btSolverConstraintType {
    public final static int BT_SOLVER_CONTACT_1D = 0;
    public final static int BT_SOLVER_FRICTION_1D = BT_SOLVER_CONTACT_1D + 1;
  }

}
