/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.11
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package com.badlogic.gdx.physics.bullet.dynamics;

import com.badlogic.gdx.physics.bullet.BulletBase;
import com.badlogic.gdx.physics.bullet.linearmath.*;
import com.badlogic.gdx.physics.bullet.collision.*;
import com.badlogic.gdx.math.Vector3;
import com.badlogic.gdx.math.Quaternion;
import com.badlogic.gdx.math.Matrix3;
import com.badlogic.gdx.math.Matrix4;

public class btSimulationIslandManagerMt extends btSimulationIslandManager {
	private long swigCPtr;
	
	protected btSimulationIslandManagerMt(final String className, long cPtr, boolean cMemoryOwn) {
		super(className, DynamicsJNI.btSimulationIslandManagerMt_SWIGUpcast(cPtr), cMemoryOwn);
		swigCPtr = cPtr;
	}
	
	/** Construct a new btSimulationIslandManagerMt, normally you should not need this constructor it's intended for low-level usage. */
	public btSimulationIslandManagerMt(long cPtr, boolean cMemoryOwn) {
		this("btSimulationIslandManagerMt", cPtr, cMemoryOwn);
		construct();
	}
	
	@Override
	protected void reset(long cPtr, boolean cMemoryOwn) {
		if (!destroyed)
			destroy();
		super.reset(DynamicsJNI.btSimulationIslandManagerMt_SWIGUpcast(swigCPtr = cPtr), cMemoryOwn);
	}
	
	public static long getCPtr(btSimulationIslandManagerMt obj) {
		return (obj == null) ? 0 : obj.swigCPtr;
	}

	@Override
	protected void finalize() throws Throwable {
		if (!destroyed)
			destroy();
		super.finalize();
	}

  @Override protected synchronized void delete() {
		if (swigCPtr != 0) {
			if (swigCMemOwn) {
				swigCMemOwn = false;
				DynamicsJNI.delete_btSimulationIslandManagerMt(swigCPtr);
			}
			swigCPtr = 0;
		}
		super.delete();
	}

  static public class Island extends BulletBase {
  	private long swigCPtr;
  	
  	protected Island(final String className, long cPtr, boolean cMemoryOwn) {
  		super(className, cPtr, cMemoryOwn);
  		swigCPtr = cPtr;
  	}
  	
  	/** Construct a new Island, normally you should not need this constructor it's intended for low-level usage. */ 
  	public Island(long cPtr, boolean cMemoryOwn) {
  		this("Island", cPtr, cMemoryOwn);
  		construct();
  	}
  	
  	@Override
  	protected void reset(long cPtr, boolean cMemoryOwn) {
  		if (!destroyed)
  			destroy();
  		super.reset(swigCPtr = cPtr, cMemoryOwn);
  	}
  	
  	public static long getCPtr(Island obj) {
  		return (obj == null) ? 0 : obj.swigCPtr;
  	}
  
  	@Override
  	protected void finalize() throws Throwable {
  		if (!destroyed)
  			destroy();
  		super.finalize();
  	}
  
    @Override protected synchronized void delete() {
  		if (swigCPtr != 0) {
  			if (swigCMemOwn) {
  				swigCMemOwn = false;
  				DynamicsJNI.delete_btSimulationIslandManagerMt_Island(swigCPtr);
  			}
  			swigCPtr = 0;
  		}
  		super.delete();
  	}
  
    public void setBodyArray(btCollisionObjectArray value) {
      DynamicsJNI.btSimulationIslandManagerMt_Island_bodyArray_set(swigCPtr, this, btCollisionObjectArray.getCPtr(value), value);
    }
  
    public btCollisionObjectArray getBodyArray() {
      long cPtr = DynamicsJNI.btSimulationIslandManagerMt_Island_bodyArray_get(swigCPtr, this);
      return (cPtr == 0) ? null : new btCollisionObjectArray(cPtr, false);
    }
  
    public void setManifoldArray(btPersistentManifoldArray value) {
      DynamicsJNI.btSimulationIslandManagerMt_Island_manifoldArray_set(swigCPtr, this, btPersistentManifoldArray.getCPtr(value), value);
    }
  
    public btPersistentManifoldArray getManifoldArray() {
      long cPtr = DynamicsJNI.btSimulationIslandManagerMt_Island_manifoldArray_get(swigCPtr, this);
      return (cPtr == 0) ? null : new btPersistentManifoldArray(cPtr, false);
    }
  
    public void setConstraintArray(SWIGTYPE_p_btAlignedObjectArrayT_btTypedConstraint_p_t value) {
      DynamicsJNI.btSimulationIslandManagerMt_Island_constraintArray_set(swigCPtr, this, SWIGTYPE_p_btAlignedObjectArrayT_btTypedConstraint_p_t.getCPtr(value));
    }
  
    public SWIGTYPE_p_btAlignedObjectArrayT_btTypedConstraint_p_t getConstraintArray() {
      long cPtr = DynamicsJNI.btSimulationIslandManagerMt_Island_constraintArray_get(swigCPtr, this);
      return (cPtr == 0) ? null : new SWIGTYPE_p_btAlignedObjectArrayT_btTypedConstraint_p_t(cPtr, false);
    }
  
    public void setId(int value) {
      DynamicsJNI.btSimulationIslandManagerMt_Island_id_set(swigCPtr, this, value);
    }
  
    public int getId() {
      return DynamicsJNI.btSimulationIslandManagerMt_Island_id_get(swigCPtr, this);
    }
  
    public void setIsSleeping(boolean value) {
      DynamicsJNI.btSimulationIslandManagerMt_Island_isSleeping_set(swigCPtr, this, value);
    }
  
    public boolean getIsSleeping() {
      return DynamicsJNI.btSimulationIslandManagerMt_Island_isSleeping_get(swigCPtr, this);
    }
  
    public void append(btSimulationIslandManagerMt.Island other) {
      DynamicsJNI.btSimulationIslandManagerMt_Island_append(swigCPtr, this, btSimulationIslandManagerMt.Island.getCPtr(other), other);
    }
  
    public Island() {
      this(DynamicsJNI.new_btSimulationIslandManagerMt_Island(), true);
    }
  
  }

  static public class IslandCallback extends BulletBase {
  	private long swigCPtr;
  	
  	protected IslandCallback(final String className, long cPtr, boolean cMemoryOwn) {
  		super(className, cPtr, cMemoryOwn);
  		swigCPtr = cPtr;
  	}
  	
  	/** Construct a new IslandCallback, normally you should not need this constructor it's intended for low-level usage. */ 
  	public IslandCallback(long cPtr, boolean cMemoryOwn) {
  		this("IslandCallback", cPtr, cMemoryOwn);
  		construct();
  	}
  	
  	@Override
  	protected void reset(long cPtr, boolean cMemoryOwn) {
  		if (!destroyed)
  			destroy();
  		super.reset(swigCPtr = cPtr, cMemoryOwn);
  	}
  	
  	public static long getCPtr(IslandCallback obj) {
  		return (obj == null) ? 0 : obj.swigCPtr;
  	}
  
  	@Override
  	protected void finalize() throws Throwable {
  		if (!destroyed)
  			destroy();
  		super.finalize();
  	}
  
    @Override protected synchronized void delete() {
  		if (swigCPtr != 0) {
  			if (swigCMemOwn) {
  				swigCMemOwn = false;
  				DynamicsJNI.delete_btSimulationIslandManagerMt_IslandCallback(swigCPtr);
  			}
  			swigCPtr = 0;
  		}
  		super.delete();
  	}
  
    public void processIsland(SWIGTYPE_p_p_btCollisionObject bodies, int numBodies, SWIGTYPE_p_p_btPersistentManifold manifolds, int numManifolds, SWIGTYPE_p_p_btTypedConstraint constraints, int numConstraints, int islandId) {
      DynamicsJNI.btSimulationIslandManagerMt_IslandCallback_processIsland(swigCPtr, this, SWIGTYPE_p_p_btCollisionObject.getCPtr(bodies), numBodies, SWIGTYPE_p_p_btPersistentManifold.getCPtr(manifolds), numManifolds, SWIGTYPE_p_p_btTypedConstraint.getCPtr(constraints), numConstraints, islandId);
    }
  
  }

  public static void serialIslandDispatch(SWIGTYPE_p_btAlignedObjectArrayT_btSimulationIslandManagerMt__Island_p_t islandsPtr, btSimulationIslandManagerMt.IslandCallback callback) {
    DynamicsJNI.btSimulationIslandManagerMt_serialIslandDispatch(SWIGTYPE_p_btAlignedObjectArrayT_btSimulationIslandManagerMt__Island_p_t.getCPtr(islandsPtr), btSimulationIslandManagerMt.IslandCallback.getCPtr(callback), callback);
  }

  public static void parallelIslandDispatch(SWIGTYPE_p_btAlignedObjectArrayT_btSimulationIslandManagerMt__Island_p_t islandsPtr, btSimulationIslandManagerMt.IslandCallback callback) {
    DynamicsJNI.btSimulationIslandManagerMt_parallelIslandDispatch(SWIGTYPE_p_btAlignedObjectArrayT_btSimulationIslandManagerMt__Island_p_t.getCPtr(islandsPtr), btSimulationIslandManagerMt.IslandCallback.getCPtr(callback), callback);
  }

  public btSimulationIslandManagerMt() {
    this(DynamicsJNI.new_btSimulationIslandManagerMt(), true);
  }

  public void buildAndProcessIslands(btDispatcher dispatcher, btCollisionWorld collisionWorld, SWIGTYPE_p_btAlignedObjectArrayT_btTypedConstraint_p_t constraints, btSimulationIslandManagerMt.IslandCallback callback) {
    DynamicsJNI.btSimulationIslandManagerMt_buildAndProcessIslands(swigCPtr, this, btDispatcher.getCPtr(dispatcher), dispatcher, btCollisionWorld.getCPtr(collisionWorld), collisionWorld, SWIGTYPE_p_btAlignedObjectArrayT_btTypedConstraint_p_t.getCPtr(constraints), btSimulationIslandManagerMt.IslandCallback.getCPtr(callback), callback);
  }

  public void buildIslands(btDispatcher dispatcher, btCollisionWorld colWorld) {
    DynamicsJNI.btSimulationIslandManagerMt_buildIslands(swigCPtr, this, btDispatcher.getCPtr(dispatcher), dispatcher, btCollisionWorld.getCPtr(colWorld), colWorld);
  }

  public int getMinimumSolverBatchSize() {
    return DynamicsJNI.btSimulationIslandManagerMt_getMinimumSolverBatchSize(swigCPtr, this);
  }

  public void setMinimumSolverBatchSize(int sz) {
    DynamicsJNI.btSimulationIslandManagerMt_setMinimumSolverBatchSize(swigCPtr, this, sz);
  }

  public SWIGTYPE_p_f_p_btAlignedObjectArray__p_btSimulationIslandManagerMt__Island___p_btSimulationIslandManagerMt__IslandCallback__void getIslandDispatchFunction() {
    long cPtr = DynamicsJNI.btSimulationIslandManagerMt_getIslandDispatchFunction(swigCPtr, this);
    return (cPtr == 0) ? null : new SWIGTYPE_p_f_p_btAlignedObjectArray__p_btSimulationIslandManagerMt__Island___p_btSimulationIslandManagerMt__IslandCallback__void(cPtr, false);
  }

  public void setIslandDispatchFunction(SWIGTYPE_p_f_p_btAlignedObjectArray__p_btSimulationIslandManagerMt__Island___p_btSimulationIslandManagerMt__IslandCallback__void func) {
    DynamicsJNI.btSimulationIslandManagerMt_setIslandDispatchFunction(swigCPtr, this, SWIGTYPE_p_f_p_btAlignedObjectArray__p_btSimulationIslandManagerMt__Island___p_btSimulationIslandManagerMt__IslandCallback__void.getCPtr(func));
  }

}
