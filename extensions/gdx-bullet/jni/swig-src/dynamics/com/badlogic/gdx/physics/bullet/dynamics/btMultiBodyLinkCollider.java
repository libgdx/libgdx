/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.11
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package com.badlogic.gdx.physics.bullet.dynamics;

import com.badlogic.gdx.physics.bullet.BulletBase;
import com.badlogic.gdx.physics.bullet.linearmath.*;
import com.badlogic.gdx.physics.bullet.collision.*;
import com.badlogic.gdx.math.Vector3;
import com.badlogic.gdx.math.Quaternion;
import com.badlogic.gdx.math.Matrix3;
import com.badlogic.gdx.math.Matrix4;

public class btMultiBodyLinkCollider extends btCollisionObject {
	private long swigCPtr;
	
	protected btMultiBodyLinkCollider(final String className, long cPtr, boolean cMemoryOwn) {
		super(className, DynamicsJNI.btMultiBodyLinkCollider_SWIGUpcast(cPtr), cMemoryOwn);
		swigCPtr = cPtr;
	}
	
	/** Construct a new btMultiBodyLinkCollider, normally you should not need this constructor it's intended for low-level usage. */
	public btMultiBodyLinkCollider(long cPtr, boolean cMemoryOwn) {
		this("btMultiBodyLinkCollider", cPtr, cMemoryOwn);
		construct();
	}
	
	@Override
	protected void reset(long cPtr, boolean cMemoryOwn) {
		if (!destroyed)
			destroy();
		super.reset(DynamicsJNI.btMultiBodyLinkCollider_SWIGUpcast(swigCPtr = cPtr), cMemoryOwn);
	}
	
	public static long getCPtr(btMultiBodyLinkCollider obj) {
		return (obj == null) ? 0 : obj.swigCPtr;
	}

	@Override
	protected void finalize() throws Throwable {
		if (!destroyed)
			destroy();
		super.finalize();
	}

  @Override protected synchronized void delete() {
		if (swigCPtr != 0) {
			if (swigCMemOwn) {
				swigCMemOwn = false;
				DynamicsJNI.delete_btMultiBodyLinkCollider(swigCPtr);
			}
			swigCPtr = 0;
		}
		super.delete();
	}

  public void setMultiBody(btMultiBody value) {
    DynamicsJNI.btMultiBodyLinkCollider_multiBody_set(swigCPtr, this, btMultiBody.getCPtr(value), value);
  }

  public btMultiBody getMultiBody() {
    long cPtr = DynamicsJNI.btMultiBodyLinkCollider_multiBody_get(swigCPtr, this);
    return (cPtr == 0) ? null : new btMultiBody(cPtr, false);
  }

  public void setLink(int value) {
    DynamicsJNI.btMultiBodyLinkCollider_link_set(swigCPtr, this, value);
  }

  public int getLink() {
    return DynamicsJNI.btMultiBodyLinkCollider_link_get(swigCPtr, this);
  }

  public btMultiBodyLinkCollider(btMultiBody multiBody, int link) {
    this(DynamicsJNI.new_btMultiBodyLinkCollider(btMultiBody.getCPtr(multiBody), multiBody, link), true);
  }

  public static btMultiBodyLinkCollider upcast(btCollisionObject colObj) {
    long cPtr = DynamicsJNI.btMultiBodyLinkCollider_upcast(btCollisionObject.getCPtr(colObj), colObj);
    return (cPtr == 0) ? null : new btMultiBodyLinkCollider(cPtr, false);
  }

  public static btMultiBodyLinkCollider upcastConstBtCollisionObject(btCollisionObject colObj) {
    long cPtr = DynamicsJNI.btMultiBodyLinkCollider_upcastConstBtCollisionObject(btCollisionObject.getCPtr(colObj), colObj);
    return (cPtr == 0) ? null : new btMultiBodyLinkCollider(cPtr, false);
  }

}
