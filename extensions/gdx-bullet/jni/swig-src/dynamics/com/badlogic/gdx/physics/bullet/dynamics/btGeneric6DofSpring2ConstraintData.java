/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.11
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package com.badlogic.gdx.physics.bullet.dynamics;

import com.badlogic.gdx.physics.bullet.BulletBase;
import com.badlogic.gdx.physics.bullet.linearmath.*;
import com.badlogic.gdx.physics.bullet.collision.*;
import com.badlogic.gdx.math.Vector3;
import com.badlogic.gdx.math.Quaternion;
import com.badlogic.gdx.math.Matrix3;
import com.badlogic.gdx.math.Matrix4;

public class btGeneric6DofSpring2ConstraintData extends BulletBase {
	private long swigCPtr;
	
	protected btGeneric6DofSpring2ConstraintData(final String className, long cPtr, boolean cMemoryOwn) {
		super(className, cPtr, cMemoryOwn);
		swigCPtr = cPtr;
	}
	
	/** Construct a new btGeneric6DofSpring2ConstraintData, normally you should not need this constructor it's intended for low-level usage. */ 
	public btGeneric6DofSpring2ConstraintData(long cPtr, boolean cMemoryOwn) {
		this("btGeneric6DofSpring2ConstraintData", cPtr, cMemoryOwn);
		construct();
	}
	
	@Override
	protected void reset(long cPtr, boolean cMemoryOwn) {
		if (!destroyed)
			destroy();
		super.reset(swigCPtr = cPtr, cMemoryOwn);
	}
	
	public static long getCPtr(btGeneric6DofSpring2ConstraintData obj) {
		return (obj == null) ? 0 : obj.swigCPtr;
	}

	@Override
	protected void finalize() throws Throwable {
		if (!destroyed)
			destroy();
		super.finalize();
	}

  @Override protected synchronized void delete() {
		if (swigCPtr != 0) {
			if (swigCMemOwn) {
				swigCMemOwn = false;
				DynamicsJNI.delete_btGeneric6DofSpring2ConstraintData(swigCPtr);
			}
			swigCPtr = 0;
		}
		super.delete();
	}

  public void setTypeConstraintData(btTypedConstraintData value) {
    DynamicsJNI.btGeneric6DofSpring2ConstraintData_typeConstraintData_set(swigCPtr, this, btTypedConstraintData.getCPtr(value), value);
  }

  public btTypedConstraintData getTypeConstraintData() {
    long cPtr = DynamicsJNI.btGeneric6DofSpring2ConstraintData_typeConstraintData_get(swigCPtr, this);
    return (cPtr == 0) ? null : new btTypedConstraintData(cPtr, false);
  }

  public void setRbAFrame(btTransformFloatData value) {
    DynamicsJNI.btGeneric6DofSpring2ConstraintData_rbAFrame_set(swigCPtr, this, btTransformFloatData.getCPtr(value), value);
  }

  public btTransformFloatData getRbAFrame() {
    long cPtr = DynamicsJNI.btGeneric6DofSpring2ConstraintData_rbAFrame_get(swigCPtr, this);
    return (cPtr == 0) ? null : new btTransformFloatData(cPtr, false);
  }

  public void setRbBFrame(btTransformFloatData value) {
    DynamicsJNI.btGeneric6DofSpring2ConstraintData_rbBFrame_set(swigCPtr, this, btTransformFloatData.getCPtr(value), value);
  }

  public btTransformFloatData getRbBFrame() {
    long cPtr = DynamicsJNI.btGeneric6DofSpring2ConstraintData_rbBFrame_get(swigCPtr, this);
    return (cPtr == 0) ? null : new btTransformFloatData(cPtr, false);
  }

  public void setLinearUpperLimit(btVector3FloatData value) {
    DynamicsJNI.btGeneric6DofSpring2ConstraintData_linearUpperLimit_set(swigCPtr, this, btVector3FloatData.getCPtr(value), value);
  }

  public btVector3FloatData getLinearUpperLimit() {
    long cPtr = DynamicsJNI.btGeneric6DofSpring2ConstraintData_linearUpperLimit_get(swigCPtr, this);
    return (cPtr == 0) ? null : new btVector3FloatData(cPtr, false);
  }

  public void setLinearLowerLimit(btVector3FloatData value) {
    DynamicsJNI.btGeneric6DofSpring2ConstraintData_linearLowerLimit_set(swigCPtr, this, btVector3FloatData.getCPtr(value), value);
  }

  public btVector3FloatData getLinearLowerLimit() {
    long cPtr = DynamicsJNI.btGeneric6DofSpring2ConstraintData_linearLowerLimit_get(swigCPtr, this);
    return (cPtr == 0) ? null : new btVector3FloatData(cPtr, false);
  }

  public void setLinearBounce(btVector3FloatData value) {
    DynamicsJNI.btGeneric6DofSpring2ConstraintData_linearBounce_set(swigCPtr, this, btVector3FloatData.getCPtr(value), value);
  }

  public btVector3FloatData getLinearBounce() {
    long cPtr = DynamicsJNI.btGeneric6DofSpring2ConstraintData_linearBounce_get(swigCPtr, this);
    return (cPtr == 0) ? null : new btVector3FloatData(cPtr, false);
  }

  public void setLinearStopERP(btVector3FloatData value) {
    DynamicsJNI.btGeneric6DofSpring2ConstraintData_linearStopERP_set(swigCPtr, this, btVector3FloatData.getCPtr(value), value);
  }

  public btVector3FloatData getLinearStopERP() {
    long cPtr = DynamicsJNI.btGeneric6DofSpring2ConstraintData_linearStopERP_get(swigCPtr, this);
    return (cPtr == 0) ? null : new btVector3FloatData(cPtr, false);
  }

  public void setLinearStopCFM(btVector3FloatData value) {
    DynamicsJNI.btGeneric6DofSpring2ConstraintData_linearStopCFM_set(swigCPtr, this, btVector3FloatData.getCPtr(value), value);
  }

  public btVector3FloatData getLinearStopCFM() {
    long cPtr = DynamicsJNI.btGeneric6DofSpring2ConstraintData_linearStopCFM_get(swigCPtr, this);
    return (cPtr == 0) ? null : new btVector3FloatData(cPtr, false);
  }

  public void setLinearMotorERP(btVector3FloatData value) {
    DynamicsJNI.btGeneric6DofSpring2ConstraintData_linearMotorERP_set(swigCPtr, this, btVector3FloatData.getCPtr(value), value);
  }

  public btVector3FloatData getLinearMotorERP() {
    long cPtr = DynamicsJNI.btGeneric6DofSpring2ConstraintData_linearMotorERP_get(swigCPtr, this);
    return (cPtr == 0) ? null : new btVector3FloatData(cPtr, false);
  }

  public void setLinearMotorCFM(btVector3FloatData value) {
    DynamicsJNI.btGeneric6DofSpring2ConstraintData_linearMotorCFM_set(swigCPtr, this, btVector3FloatData.getCPtr(value), value);
  }

  public btVector3FloatData getLinearMotorCFM() {
    long cPtr = DynamicsJNI.btGeneric6DofSpring2ConstraintData_linearMotorCFM_get(swigCPtr, this);
    return (cPtr == 0) ? null : new btVector3FloatData(cPtr, false);
  }

  public void setLinearTargetVelocity(btVector3FloatData value) {
    DynamicsJNI.btGeneric6DofSpring2ConstraintData_linearTargetVelocity_set(swigCPtr, this, btVector3FloatData.getCPtr(value), value);
  }

  public btVector3FloatData getLinearTargetVelocity() {
    long cPtr = DynamicsJNI.btGeneric6DofSpring2ConstraintData_linearTargetVelocity_get(swigCPtr, this);
    return (cPtr == 0) ? null : new btVector3FloatData(cPtr, false);
  }

  public void setLinearMaxMotorForce(btVector3FloatData value) {
    DynamicsJNI.btGeneric6DofSpring2ConstraintData_linearMaxMotorForce_set(swigCPtr, this, btVector3FloatData.getCPtr(value), value);
  }

  public btVector3FloatData getLinearMaxMotorForce() {
    long cPtr = DynamicsJNI.btGeneric6DofSpring2ConstraintData_linearMaxMotorForce_get(swigCPtr, this);
    return (cPtr == 0) ? null : new btVector3FloatData(cPtr, false);
  }

  public void setLinearServoTarget(btVector3FloatData value) {
    DynamicsJNI.btGeneric6DofSpring2ConstraintData_linearServoTarget_set(swigCPtr, this, btVector3FloatData.getCPtr(value), value);
  }

  public btVector3FloatData getLinearServoTarget() {
    long cPtr = DynamicsJNI.btGeneric6DofSpring2ConstraintData_linearServoTarget_get(swigCPtr, this);
    return (cPtr == 0) ? null : new btVector3FloatData(cPtr, false);
  }

  public void setLinearSpringStiffness(btVector3FloatData value) {
    DynamicsJNI.btGeneric6DofSpring2ConstraintData_linearSpringStiffness_set(swigCPtr, this, btVector3FloatData.getCPtr(value), value);
  }

  public btVector3FloatData getLinearSpringStiffness() {
    long cPtr = DynamicsJNI.btGeneric6DofSpring2ConstraintData_linearSpringStiffness_get(swigCPtr, this);
    return (cPtr == 0) ? null : new btVector3FloatData(cPtr, false);
  }

  public void setLinearSpringDamping(btVector3FloatData value) {
    DynamicsJNI.btGeneric6DofSpring2ConstraintData_linearSpringDamping_set(swigCPtr, this, btVector3FloatData.getCPtr(value), value);
  }

  public btVector3FloatData getLinearSpringDamping() {
    long cPtr = DynamicsJNI.btGeneric6DofSpring2ConstraintData_linearSpringDamping_get(swigCPtr, this);
    return (cPtr == 0) ? null : new btVector3FloatData(cPtr, false);
  }

  public void setLinearEquilibriumPoint(btVector3FloatData value) {
    DynamicsJNI.btGeneric6DofSpring2ConstraintData_linearEquilibriumPoint_set(swigCPtr, this, btVector3FloatData.getCPtr(value), value);
  }

  public btVector3FloatData getLinearEquilibriumPoint() {
    long cPtr = DynamicsJNI.btGeneric6DofSpring2ConstraintData_linearEquilibriumPoint_get(swigCPtr, this);
    return (cPtr == 0) ? null : new btVector3FloatData(cPtr, false);
  }

  public void setLinearEnableMotor(String value) {
    DynamicsJNI.btGeneric6DofSpring2ConstraintData_linearEnableMotor_set(swigCPtr, this, value);
  }

  public String getLinearEnableMotor() {
    return DynamicsJNI.btGeneric6DofSpring2ConstraintData_linearEnableMotor_get(swigCPtr, this);
  }

  public void setLinearServoMotor(String value) {
    DynamicsJNI.btGeneric6DofSpring2ConstraintData_linearServoMotor_set(swigCPtr, this, value);
  }

  public String getLinearServoMotor() {
    return DynamicsJNI.btGeneric6DofSpring2ConstraintData_linearServoMotor_get(swigCPtr, this);
  }

  public void setLinearEnableSpring(String value) {
    DynamicsJNI.btGeneric6DofSpring2ConstraintData_linearEnableSpring_set(swigCPtr, this, value);
  }

  public String getLinearEnableSpring() {
    return DynamicsJNI.btGeneric6DofSpring2ConstraintData_linearEnableSpring_get(swigCPtr, this);
  }

  public void setLinearSpringStiffnessLimited(String value) {
    DynamicsJNI.btGeneric6DofSpring2ConstraintData_linearSpringStiffnessLimited_set(swigCPtr, this, value);
  }

  public String getLinearSpringStiffnessLimited() {
    return DynamicsJNI.btGeneric6DofSpring2ConstraintData_linearSpringStiffnessLimited_get(swigCPtr, this);
  }

  public void setLinearSpringDampingLimited(String value) {
    DynamicsJNI.btGeneric6DofSpring2ConstraintData_linearSpringDampingLimited_set(swigCPtr, this, value);
  }

  public String getLinearSpringDampingLimited() {
    return DynamicsJNI.btGeneric6DofSpring2ConstraintData_linearSpringDampingLimited_get(swigCPtr, this);
  }

  public void setPadding1(String value) {
    DynamicsJNI.btGeneric6DofSpring2ConstraintData_padding1_set(swigCPtr, this, value);
  }

  public String getPadding1() {
    return DynamicsJNI.btGeneric6DofSpring2ConstraintData_padding1_get(swigCPtr, this);
  }

  public void setAngularUpperLimit(btVector3FloatData value) {
    DynamicsJNI.btGeneric6DofSpring2ConstraintData_angularUpperLimit_set(swigCPtr, this, btVector3FloatData.getCPtr(value), value);
  }

  public btVector3FloatData getAngularUpperLimit() {
    long cPtr = DynamicsJNI.btGeneric6DofSpring2ConstraintData_angularUpperLimit_get(swigCPtr, this);
    return (cPtr == 0) ? null : new btVector3FloatData(cPtr, false);
  }

  public void setAngularLowerLimit(btVector3FloatData value) {
    DynamicsJNI.btGeneric6DofSpring2ConstraintData_angularLowerLimit_set(swigCPtr, this, btVector3FloatData.getCPtr(value), value);
  }

  public btVector3FloatData getAngularLowerLimit() {
    long cPtr = DynamicsJNI.btGeneric6DofSpring2ConstraintData_angularLowerLimit_get(swigCPtr, this);
    return (cPtr == 0) ? null : new btVector3FloatData(cPtr, false);
  }

  public void setAngularBounce(btVector3FloatData value) {
    DynamicsJNI.btGeneric6DofSpring2ConstraintData_angularBounce_set(swigCPtr, this, btVector3FloatData.getCPtr(value), value);
  }

  public btVector3FloatData getAngularBounce() {
    long cPtr = DynamicsJNI.btGeneric6DofSpring2ConstraintData_angularBounce_get(swigCPtr, this);
    return (cPtr == 0) ? null : new btVector3FloatData(cPtr, false);
  }

  public void setAngularStopERP(btVector3FloatData value) {
    DynamicsJNI.btGeneric6DofSpring2ConstraintData_angularStopERP_set(swigCPtr, this, btVector3FloatData.getCPtr(value), value);
  }

  public btVector3FloatData getAngularStopERP() {
    long cPtr = DynamicsJNI.btGeneric6DofSpring2ConstraintData_angularStopERP_get(swigCPtr, this);
    return (cPtr == 0) ? null : new btVector3FloatData(cPtr, false);
  }

  public void setAngularStopCFM(btVector3FloatData value) {
    DynamicsJNI.btGeneric6DofSpring2ConstraintData_angularStopCFM_set(swigCPtr, this, btVector3FloatData.getCPtr(value), value);
  }

  public btVector3FloatData getAngularStopCFM() {
    long cPtr = DynamicsJNI.btGeneric6DofSpring2ConstraintData_angularStopCFM_get(swigCPtr, this);
    return (cPtr == 0) ? null : new btVector3FloatData(cPtr, false);
  }

  public void setAngularMotorERP(btVector3FloatData value) {
    DynamicsJNI.btGeneric6DofSpring2ConstraintData_angularMotorERP_set(swigCPtr, this, btVector3FloatData.getCPtr(value), value);
  }

  public btVector3FloatData getAngularMotorERP() {
    long cPtr = DynamicsJNI.btGeneric6DofSpring2ConstraintData_angularMotorERP_get(swigCPtr, this);
    return (cPtr == 0) ? null : new btVector3FloatData(cPtr, false);
  }

  public void setAngularMotorCFM(btVector3FloatData value) {
    DynamicsJNI.btGeneric6DofSpring2ConstraintData_angularMotorCFM_set(swigCPtr, this, btVector3FloatData.getCPtr(value), value);
  }

  public btVector3FloatData getAngularMotorCFM() {
    long cPtr = DynamicsJNI.btGeneric6DofSpring2ConstraintData_angularMotorCFM_get(swigCPtr, this);
    return (cPtr == 0) ? null : new btVector3FloatData(cPtr, false);
  }

  public void setAngularTargetVelocity(btVector3FloatData value) {
    DynamicsJNI.btGeneric6DofSpring2ConstraintData_angularTargetVelocity_set(swigCPtr, this, btVector3FloatData.getCPtr(value), value);
  }

  public btVector3FloatData getAngularTargetVelocity() {
    long cPtr = DynamicsJNI.btGeneric6DofSpring2ConstraintData_angularTargetVelocity_get(swigCPtr, this);
    return (cPtr == 0) ? null : new btVector3FloatData(cPtr, false);
  }

  public void setAngularMaxMotorForce(btVector3FloatData value) {
    DynamicsJNI.btGeneric6DofSpring2ConstraintData_angularMaxMotorForce_set(swigCPtr, this, btVector3FloatData.getCPtr(value), value);
  }

  public btVector3FloatData getAngularMaxMotorForce() {
    long cPtr = DynamicsJNI.btGeneric6DofSpring2ConstraintData_angularMaxMotorForce_get(swigCPtr, this);
    return (cPtr == 0) ? null : new btVector3FloatData(cPtr, false);
  }

  public void setAngularServoTarget(btVector3FloatData value) {
    DynamicsJNI.btGeneric6DofSpring2ConstraintData_angularServoTarget_set(swigCPtr, this, btVector3FloatData.getCPtr(value), value);
  }

  public btVector3FloatData getAngularServoTarget() {
    long cPtr = DynamicsJNI.btGeneric6DofSpring2ConstraintData_angularServoTarget_get(swigCPtr, this);
    return (cPtr == 0) ? null : new btVector3FloatData(cPtr, false);
  }

  public void setAngularSpringStiffness(btVector3FloatData value) {
    DynamicsJNI.btGeneric6DofSpring2ConstraintData_angularSpringStiffness_set(swigCPtr, this, btVector3FloatData.getCPtr(value), value);
  }

  public btVector3FloatData getAngularSpringStiffness() {
    long cPtr = DynamicsJNI.btGeneric6DofSpring2ConstraintData_angularSpringStiffness_get(swigCPtr, this);
    return (cPtr == 0) ? null : new btVector3FloatData(cPtr, false);
  }

  public void setAngularSpringDamping(btVector3FloatData value) {
    DynamicsJNI.btGeneric6DofSpring2ConstraintData_angularSpringDamping_set(swigCPtr, this, btVector3FloatData.getCPtr(value), value);
  }

  public btVector3FloatData getAngularSpringDamping() {
    long cPtr = DynamicsJNI.btGeneric6DofSpring2ConstraintData_angularSpringDamping_get(swigCPtr, this);
    return (cPtr == 0) ? null : new btVector3FloatData(cPtr, false);
  }

  public void setAngularEquilibriumPoint(btVector3FloatData value) {
    DynamicsJNI.btGeneric6DofSpring2ConstraintData_angularEquilibriumPoint_set(swigCPtr, this, btVector3FloatData.getCPtr(value), value);
  }

  public btVector3FloatData getAngularEquilibriumPoint() {
    long cPtr = DynamicsJNI.btGeneric6DofSpring2ConstraintData_angularEquilibriumPoint_get(swigCPtr, this);
    return (cPtr == 0) ? null : new btVector3FloatData(cPtr, false);
  }

  public void setAngularEnableMotor(String value) {
    DynamicsJNI.btGeneric6DofSpring2ConstraintData_angularEnableMotor_set(swigCPtr, this, value);
  }

  public String getAngularEnableMotor() {
    return DynamicsJNI.btGeneric6DofSpring2ConstraintData_angularEnableMotor_get(swigCPtr, this);
  }

  public void setAngularServoMotor(String value) {
    DynamicsJNI.btGeneric6DofSpring2ConstraintData_angularServoMotor_set(swigCPtr, this, value);
  }

  public String getAngularServoMotor() {
    return DynamicsJNI.btGeneric6DofSpring2ConstraintData_angularServoMotor_get(swigCPtr, this);
  }

  public void setAngularEnableSpring(String value) {
    DynamicsJNI.btGeneric6DofSpring2ConstraintData_angularEnableSpring_set(swigCPtr, this, value);
  }

  public String getAngularEnableSpring() {
    return DynamicsJNI.btGeneric6DofSpring2ConstraintData_angularEnableSpring_get(swigCPtr, this);
  }

  public void setAngularSpringStiffnessLimited(String value) {
    DynamicsJNI.btGeneric6DofSpring2ConstraintData_angularSpringStiffnessLimited_set(swigCPtr, this, value);
  }

  public String getAngularSpringStiffnessLimited() {
    return DynamicsJNI.btGeneric6DofSpring2ConstraintData_angularSpringStiffnessLimited_get(swigCPtr, this);
  }

  public void setAngularSpringDampingLimited(String value) {
    DynamicsJNI.btGeneric6DofSpring2ConstraintData_angularSpringDampingLimited_set(swigCPtr, this, value);
  }

  public String getAngularSpringDampingLimited() {
    return DynamicsJNI.btGeneric6DofSpring2ConstraintData_angularSpringDampingLimited_get(swigCPtr, this);
  }

  public void setRotateOrder(int value) {
    DynamicsJNI.btGeneric6DofSpring2ConstraintData_rotateOrder_set(swigCPtr, this, value);
  }

  public int getRotateOrder() {
    return DynamicsJNI.btGeneric6DofSpring2ConstraintData_rotateOrder_get(swigCPtr, this);
  }

  public btGeneric6DofSpring2ConstraintData() {
    this(DynamicsJNI.new_btGeneric6DofSpring2ConstraintData(), true);
  }

}
