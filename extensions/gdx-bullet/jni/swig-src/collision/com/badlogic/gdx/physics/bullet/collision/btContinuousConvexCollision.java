/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.11
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package com.badlogic.gdx.physics.bullet.collision;

import com.badlogic.gdx.physics.bullet.BulletBase;
import com.badlogic.gdx.physics.bullet.linearmath.*;
import com.badlogic.gdx.math.Vector3;
import com.badlogic.gdx.math.Quaternion;
import com.badlogic.gdx.math.Matrix3;
import com.badlogic.gdx.math.Matrix4;

public class btContinuousConvexCollision extends btConvexCast {
	private long swigCPtr;
	
	protected btContinuousConvexCollision(final String className, long cPtr, boolean cMemoryOwn) {
		super(className, CollisionJNI.btContinuousConvexCollision_SWIGUpcast(cPtr), cMemoryOwn);
		swigCPtr = cPtr;
	}
	
	/** Construct a new btContinuousConvexCollision, normally you should not need this constructor it's intended for low-level usage. */
	public btContinuousConvexCollision(long cPtr, boolean cMemoryOwn) {
		this("btContinuousConvexCollision", cPtr, cMemoryOwn);
		construct();
	}
	
	@Override
	protected void reset(long cPtr, boolean cMemoryOwn) {
		if (!destroyed)
			destroy();
		super.reset(CollisionJNI.btContinuousConvexCollision_SWIGUpcast(swigCPtr = cPtr), cMemoryOwn);
	}
	
	public static long getCPtr(btContinuousConvexCollision obj) {
		return (obj == null) ? 0 : obj.swigCPtr;
	}

	@Override
	protected void finalize() throws Throwable {
		if (!destroyed)
			destroy();
		super.finalize();
	}

  @Override protected synchronized void delete() {
		if (swigCPtr != 0) {
			if (swigCMemOwn) {
				swigCMemOwn = false;
				CollisionJNI.delete_btContinuousConvexCollision(swigCPtr);
			}
			swigCPtr = 0;
		}
		super.delete();
	}

  public btContinuousConvexCollision(btConvexShape shapeA, btConvexShape shapeB, btVoronoiSimplexSolver simplexSolver, btConvexPenetrationDepthSolver penetrationDepthSolver) {
    this(CollisionJNI.new_btContinuousConvexCollision__SWIG_0(btConvexShape.getCPtr(shapeA), shapeA, btConvexShape.getCPtr(shapeB), shapeB, btVoronoiSimplexSolver.getCPtr(simplexSolver), simplexSolver, btConvexPenetrationDepthSolver.getCPtr(penetrationDepthSolver), penetrationDepthSolver), true);
  }

  public btContinuousConvexCollision(btConvexShape shapeA, btStaticPlaneShape plane) {
    this(CollisionJNI.new_btContinuousConvexCollision__SWIG_1(btConvexShape.getCPtr(shapeA), shapeA, btStaticPlaneShape.getCPtr(plane), plane), true);
  }

}
