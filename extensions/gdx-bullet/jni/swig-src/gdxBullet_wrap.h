/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.10
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */

#ifndef SWIG_gdxBullet_WRAP_H_
#define SWIG_gdxBullet_WRAP_H_

class SwigDirector_btIDebugDraw : public btIDebugDraw, public Swig::Director {

public:
    void swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global);
    SwigDirector_btIDebugDraw(JNIEnv *jenv);
    virtual ~SwigDirector_btIDebugDraw();
    virtual void drawLine(btVector3 const &from, btVector3 const &to, btVector3 const &color);
    virtual void drawLine(btVector3 const &from, btVector3 const &to, btVector3 const &fromColor, btVector3 const &toColor);
    virtual void drawSphere(btScalar radius, btTransform const &transform, btVector3 const &color);
    virtual void drawSphere(btVector3 const &p, btScalar radius, btVector3 const &color);
    virtual void drawTriangle(btVector3 const &v0, btVector3 const &v1, btVector3 const &v2, btVector3 const &arg3, btVector3 const &arg4, btVector3 const &arg5, btVector3 const &color, btScalar alpha);
    virtual void drawTriangle(btVector3 const &v0, btVector3 const &v1, btVector3 const &v2, btVector3 const &color, btScalar arg4);
    virtual void drawContactPoint(btVector3 const &PointOnB, btVector3 const &normalOnB, btScalar distance, int lifeTime, btVector3 const &color);
    virtual void reportErrorWarning(char const *warningString);
    virtual void draw3dText(btVector3 const &location, char const *textString);
    virtual void setDebugMode(int debugMode);
    virtual int getDebugMode() const;
    virtual void drawAabb(btVector3 const &from, btVector3 const &to, btVector3 const &color);
    virtual void drawTransform(btTransform const &transform, btScalar orthoLen);
    virtual void drawArc(btVector3 const &center, btVector3 const &normal, btVector3 const &axis, btScalar radiusA, btScalar radiusB, btScalar minAngle, btScalar maxAngle, btVector3 const &color, bool drawSect, btScalar stepDegrees = btScalar(10.f));
    virtual void drawSpherePatch(btVector3 const &center, btVector3 const &up, btVector3 const &axis, btScalar radius, btScalar minTh, btScalar maxTh, btScalar minPs, btScalar maxPs, btVector3 const &color, btScalar stepDegrees = btScalar(10.f));
    virtual void drawBox(btVector3 const &bbMin, btVector3 const &bbMax, btVector3 const &color);
    virtual void drawBox(btVector3 const &bbMin, btVector3 const &bbMax, btTransform const &trans, btVector3 const &color);
    virtual void drawCapsule(btScalar radius, btScalar halfHeight, int upAxis, btTransform const &transform, btVector3 const &color);
    virtual void drawCylinder(btScalar radius, btScalar halfHeight, int upAxis, btTransform const &transform, btVector3 const &color);
    virtual void drawCone(btScalar radius, btScalar height, int upAxis, btTransform const &transform, btVector3 const &color);
    virtual void drawPlane(btVector3 const &planeNormal, btScalar planeConst, btTransform const &transform, btVector3 const &color);
public:
    bool swig_overrides(int n) {
      return (n < 23 ? swig_override[n] : false);
    }
protected:
    bool swig_override[23];
};

class SwigDirector_btMotionState : public btMotionState, public Swig::Director {

public:
    void swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global);
    SwigDirector_btMotionState(JNIEnv *jenv);
    virtual ~SwigDirector_btMotionState();
    virtual void getWorldTransform(btTransform &worldTrans) const;
    virtual void setWorldTransform(btTransform const &worldTrans);
public:
    bool swig_overrides(int n) {
      return (n < 2 ? swig_override[n] : false);
    }
protected:
    bool swig_override[2];
};

struct SwigDirector_RayResultCallback : public RayResultCallback, public Swig::Director {

public:
    void swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global);
    SwigDirector_RayResultCallback(JNIEnv *jenv);
    virtual ~SwigDirector_RayResultCallback();
    virtual bool needsCollision(btBroadphaseProxy *proxy0) const;
    virtual btScalar addSingleResult(LocalRayResult &rayResult, bool normalInWorldSpace);
public:
    bool swig_overrides(int n) {
      return (n < 2 ? swig_override[n] : false);
    }
protected:
    bool swig_override[2];
};

struct SwigDirector_ClosestRayResultCallback : public ClosestRayResultCallback, public Swig::Director {

public:
    void swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global);
    SwigDirector_ClosestRayResultCallback(JNIEnv *jenv, btVector3 const &rayFromWorld, btVector3 const &rayToWorld);
    virtual ~SwigDirector_ClosestRayResultCallback();
    virtual bool needsCollision(btBroadphaseProxy *proxy0) const;
    virtual btScalar addSingleResult(LocalRayResult &rayResult, bool normalInWorldSpace);
public:
    bool swig_overrides(int n) {
      return (n < 2 ? swig_override[n] : false);
    }
protected:
    bool swig_override[2];
};

struct SwigDirector_AllHitsRayResultCallback : public AllHitsRayResultCallback, public Swig::Director {

public:
    void swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global);
    SwigDirector_AllHitsRayResultCallback(JNIEnv *jenv, btVector3 const &rayFromWorld, btVector3 const &rayToWorld);
    virtual ~SwigDirector_AllHitsRayResultCallback();
    virtual bool needsCollision(btBroadphaseProxy *proxy0) const;
    virtual btScalar addSingleResult(LocalRayResult &rayResult, bool normalInWorldSpace);
public:
    bool swig_overrides(int n) {
      return (n < 2 ? swig_override[n] : false);
    }
protected:
    bool swig_override[2];
};

struct SwigDirector_ConvexResultCallback : public ConvexResultCallback, public Swig::Director {

public:
    void swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global);
    SwigDirector_ConvexResultCallback(JNIEnv *jenv);
    virtual ~SwigDirector_ConvexResultCallback();
    virtual bool needsCollision(btBroadphaseProxy *proxy0) const;
    virtual btScalar addSingleResult(LocalConvexResult &convexResult, bool normalInWorldSpace);
public:
    bool swig_overrides(int n) {
      return (n < 2 ? swig_override[n] : false);
    }
protected:
    bool swig_override[2];
};

struct SwigDirector_ClosestConvexResultCallback : public ClosestConvexResultCallback, public Swig::Director {

public:
    void swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global);
    SwigDirector_ClosestConvexResultCallback(JNIEnv *jenv, btVector3 const &convexFromWorld, btVector3 const &convexToWorld);
    virtual ~SwigDirector_ClosestConvexResultCallback();
    virtual bool needsCollision(btBroadphaseProxy *proxy0) const;
    virtual btScalar addSingleResult(LocalConvexResult &convexResult, bool normalInWorldSpace);
public:
    bool swig_overrides(int n) {
      return (n < 2 ? swig_override[n] : false);
    }
protected:
    bool swig_override[2];
};

struct SwigDirector_ContactResultCallback : public ContactResultCallback, public Swig::Director {

public:
    void swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global);
    SwigDirector_ContactResultCallback(JNIEnv *jenv);
    virtual ~SwigDirector_ContactResultCallback();
    virtual bool needsCollision(btBroadphaseProxy *proxy0) const;
    virtual btScalar addSingleResult(btManifoldPoint &cp, btCollisionObjectWrapper const *colObj0Wrap, int partId0, int index0, btCollisionObjectWrapper const *colObj1Wrap, int partId1, int index1);
public:
    bool swig_overrides(int n) {
      return (n < 2 ? swig_override[n] : false);
    }
protected:
    bool swig_override[2];
};

class SwigDirector_ContactListener : public ContactListener, public Swig::Director {

public:
    void swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global);
    SwigDirector_ContactListener(JNIEnv *jenv, bool dummy);
    virtual bool onContactAdded(btManifoldPoint &cp, btCollisionObjectWrapper const *colObj0Wrap, int partId0, int index0, btCollisionObjectWrapper const *colObj1Wrap, int partId1, int index1);
    virtual bool onContactAdded(btManifoldPoint &cp, btCollisionObject const *colObj0, int partId0, int index0, btCollisionObject const *colObj1, int partId1, int index1);
    virtual bool onContactAdded(btManifoldPoint &cp, int userValue0, int partId0, int index0, int userValue1, int partId1, int index1);
    virtual bool onContactAdded(btManifoldPoint &cp, btCollisionObjectWrapper const *colObj0Wrap, int partId0, int index0, bool match0, btCollisionObjectWrapper const *colObj1Wrap, int partId1, int index1, bool match1);
    virtual bool onContactAdded(btManifoldPoint &cp, btCollisionObject const *colObj0, int partId0, int index0, bool match0, btCollisionObject const *colObj1, int partId1, int index1, bool match1);
    virtual bool onContactAdded(btManifoldPoint &cp, int userValue0, int partId0, int index0, bool match0, int userValue1, int partId1, int index1, bool match1);
    virtual bool onContactAdded(btCollisionObjectWrapper const *colObj0Wrap, int partId0, int index0, btCollisionObjectWrapper const *colObj1Wrap, int partId1, int index1);
    virtual bool onContactAdded(btCollisionObject const *colObj0, int partId0, int index0, btCollisionObject const *colObj1, int partId1, int index1);
    virtual bool onContactAdded(int userValue0, int partId0, int index0, int userValue1, int partId1, int index1);
    virtual bool onContactAdded(btCollisionObjectWrapper const *colObj0Wrap, int partId0, int index0, bool match0, btCollisionObjectWrapper const *colObj1Wrap, int partId1, int index1, bool match1);
    virtual bool onContactAdded(btCollisionObject const *colObj0, int partId0, int index0, bool match0, btCollisionObject const *colObj1, int partId1, int index1, bool match1);
    virtual bool onContactAdded(int userValue0, int partId0, int index0, bool match0, int userValue1, int partId1, int index1, bool match1);
    virtual void onContactProcessed(btManifoldPoint &cp, btCollisionObject const *colObj0, btCollisionObject const *colObj1);
    virtual void onContactProcessed(btManifoldPoint &cp, int userValue0, int userValue1);
    virtual void onContactProcessed(btManifoldPoint &cp, btCollisionObject const *colObj0, bool match0, btCollisionObject const *colObj1, bool match1);
    virtual void onContactProcessed(btManifoldPoint &cp, int userValue0, bool match0, int userValue1, bool match1);
    virtual void onContactProcessed(btCollisionObject const *colObj0, btCollisionObject const *colObj1);
    virtual void onContactProcessed(int userValue0, int userValue1);
    virtual void onContactProcessed(btCollisionObject const *colObj0, bool match0, btCollisionObject const *colObj1, bool match1);
    virtual void onContactProcessed(int userValue0, bool match0, int userValue1, bool match1);
    virtual void onContactDestroyed(int manifoldPointUserValue);
    virtual void onContactStarted(btPersistentManifold *manifold);
    virtual void onContactStarted(btCollisionObject const *colObj0, btCollisionObject const *colObj1);
    virtual void onContactStarted(int const &userValue0, int const &userValue1);
    virtual void onContactStarted(btPersistentManifold *manifold, bool const &match0, bool const &match1);
    virtual void onContactStarted(btCollisionObject const *colObj0, bool const &match0, btCollisionObject const *colObj1, bool const &match1);
    virtual void onContactStarted(int const &userValue0, bool const &match0, int const &userValue1, bool const &match1);
    virtual void onContactEnded(btPersistentManifold *manifold);
    virtual void onContactEnded(btCollisionObject const *colObj0, btCollisionObject const *colObj1);
    virtual void onContactEnded(int const &userValue0, int const &userValue1);
    virtual void onContactEnded(btPersistentManifold *manifold, bool const &match0, bool const &match1);
    virtual void onContactEnded(btCollisionObject const *colObj0, bool const &match0, btCollisionObject const *colObj1, bool const &match1);
    virtual void onContactEnded(int const &userValue0, bool const &match0, int const &userValue1, bool const &match1);
public:
    bool swig_overrides(int n) {
      return (n < 33 ? swig_override[n] : false);
    }
protected:
    bool swig_override[33];
};

class SwigDirector_ContactCache : public ContactCache, public Swig::Director {

public:
    void swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global);
    SwigDirector_ContactCache(JNIEnv *jenv, bool dummy);
    virtual void onContactStarted(btPersistentManifold *manifold, bool const &match0, bool const &match1);
    virtual void onContactEnded(btCollisionObject const *colObj0, bool const &match0, btCollisionObject const *colObj1, bool const &match1);
public:
    bool swig_overrides(int n) {
      return (n < 2 ? swig_override[n] : false);
    }
protected:
    bool swig_override[2];
};

class SwigDirector_InternalTickCallback : public InternalTickCallback, public Swig::Director {

public:
    void swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global);
    SwigDirector_InternalTickCallback(JNIEnv *jenv, btDynamicsWorld *dynamicsWorld = NULL, bool isPreTick = false);
    virtual void onInternalTick(btDynamicsWorld *dynamicsWorld, btScalar timeStep);
public:
    bool swig_overrides(int n) {
      return (n < 1 ? swig_override[n] : false);
    }
protected:
    bool swig_override[1];
};

class SwigDirector_btBulletWorldImporter : public btBulletWorldImporter, public Swig::Director {

public:
    void swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global);
    SwigDirector_btBulletWorldImporter(JNIEnv *jenv, btDynamicsWorld *world = 0);
    virtual ~SwigDirector_btBulletWorldImporter();
    virtual void deleteAllData();
    virtual void setDynamicsWorldInfo(btVector3 const &gravity, btContactSolverInfo const &solverInfo);
    virtual btRigidBody *createRigidBody(bool isDynamic, btScalar mass, btTransform const &startTransform, btCollisionShape *shape, char const *bodyName);
    virtual btCollisionObject *createCollisionObject(btTransform const &startTransform, btCollisionShape *shape, char const *bodyName);
    virtual btCollisionShape *createPlaneShape(btVector3 const &planeNormal, btScalar planeConstant);
    virtual btCollisionShape *createBoxShape(btVector3 const &halfExtents);
    virtual btCollisionShape *createSphereShape(btScalar radius);
    virtual btCollisionShape *createCapsuleShapeX(btScalar radius, btScalar height);
    virtual btCollisionShape *createCapsuleShapeY(btScalar radius, btScalar height);
    virtual btCollisionShape *createCapsuleShapeZ(btScalar radius, btScalar height);
    virtual btCollisionShape *createCylinderShapeX(btScalar radius, btScalar height);
    virtual btCollisionShape *createCylinderShapeY(btScalar radius, btScalar height);
    virtual btCollisionShape *createCylinderShapeZ(btScalar radius, btScalar height);
    virtual btTriangleIndexVertexArray *createTriangleMeshContainer();
    virtual btBvhTriangleMeshShape *createBvhTriangleMeshShape(btStridingMeshInterface *trimesh, btOptimizedBvh *bvh);
    virtual btCollisionShape *createConvexTriangleMeshShape(btStridingMeshInterface *trimesh);
    virtual btGImpactMeshShape *createGimpactShape(btStridingMeshInterface *trimesh);
    virtual btStridingMeshInterfaceData *createStridingMeshInterfaceData(btStridingMeshInterfaceData *interfaceData);
    virtual btConvexHullShape *createConvexHullShape();
    virtual btCompoundShape *createCompoundShape();
    virtual btScaledBvhTriangleMeshShape *createScaledTrangleMeshShape(btBvhTriangleMeshShape *meshShape, btVector3 const &localScalingbtBvhTriangleMeshShape);
    virtual btTriangleIndexVertexArray *createMeshInterface(btStridingMeshInterfaceData &meshData);
    virtual btOptimizedBvh *createOptimizedBvh();
    virtual btTriangleInfoMap *createTriangleInfoMap();
    virtual btPoint2PointConstraint *createPoint2PointConstraint(btRigidBody &rbA, btRigidBody &rbB, btVector3 const &pivotInA, btVector3 const &pivotInB);
    virtual btPoint2PointConstraint *createPoint2PointConstraint(btRigidBody &rbA, btVector3 const &pivotInA);
    virtual btHingeConstraint *createHingeConstraint(btRigidBody &rbA, btRigidBody &rbB, btTransform const &rbAFrame, btTransform const &rbBFrame, bool useReferenceFrameA = false);
    virtual btHingeConstraint *createHingeConstraint(btRigidBody &rbA, btTransform const &rbAFrame, bool useReferenceFrameA = false);
    virtual btConeTwistConstraint *createConeTwistConstraint(btRigidBody &rbA, btRigidBody &rbB, btTransform const &rbAFrame, btTransform const &rbBFrame);
    virtual btConeTwistConstraint *createConeTwistConstraint(btRigidBody &rbA, btTransform const &rbAFrame);
    virtual btGeneric6DofConstraint *createGeneric6DofConstraint(btRigidBody &rbA, btRigidBody &rbB, btTransform const &frameInA, btTransform const &frameInB, bool useLinearReferenceFrameA);
    virtual btGeneric6DofConstraint *createGeneric6DofConstraint(btRigidBody &rbB, btTransform const &frameInB, bool useLinearReferenceFrameB);
    virtual btGeneric6DofSpringConstraint *createGeneric6DofSpringConstraint(btRigidBody &rbA, btRigidBody &rbB, btTransform const &frameInA, btTransform const &frameInB, bool useLinearReferenceFrameA);
    virtual btSliderConstraint *createSliderConstraint(btRigidBody &rbA, btRigidBody &rbB, btTransform const &frameInA, btTransform const &frameInB, bool useLinearReferenceFrameA);
    virtual btSliderConstraint *createSliderConstraint(btRigidBody &rbB, btTransform const &frameInB, bool useLinearReferenceFrameA);
    virtual bool convertAllObjects(bParse::btBulletFile *file);
public:
    bool swig_overrides(int n) {
      return (n < 38 ? swig_override[n] : false);
    }
protected:
    bool swig_override[38];
};


#endif
