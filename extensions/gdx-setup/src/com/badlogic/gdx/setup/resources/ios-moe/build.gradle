task copyNatives << {
    file("xcode/native/ios/").mkdirs();

    def LD_FLAGS = "XRT_CUSTOM_OTHER_LDFLAGS = "

    configurations.natives.files.each { jar->
        def outputDir = null
        if (jar.name.endsWith("natives-ios.jar")) outputDir = file("xcode/native/ios")
        if (outputDir != null) {
            FileCollection fileCollection = zipTree(jar)
            for (File libFile : fileCollection) {
                if (libFile.getAbsolutePath().endsWith(".a") && !libFile.getAbsolutePath().contains("/tvos/")) {
                    copy {
                        from libFile.getAbsolutePath()
                        into outputDir
                    }

                    LD_FLAGS += " -force_load \${SRCROOT}/native/ios/" + libFile.getName();
                }
            }
        }
    }

    def outputFlags = file("xcode/" + project.name + "/custom.xcconfig");
    outputFlags.write LD_FLAGS

    def proguard = file(System.getenv("INTEL_MULTI_OS_ENGINE_HOME") + "/tools/proguard.cfg")
    if(proguard.exists()) {
        if(!proguard.text.contains("-keep class com.badlogic.**")) {
            proguard << "-keep class com.badlogic.** { *; }\n"
            proguard << "-keep enum com.badlogic.** { *; }\n"
        }
    }
}

sourceSets.main.java.srcDirs = [ "src/" ]

xrt {
    sdkVersion = "9.2"
}

buildApp.dependsOn copyNatives
