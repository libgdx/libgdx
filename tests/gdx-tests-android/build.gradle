/*******************************************************************************
 * Copyright 2011 See AUTHORS file.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 ******************************************************************************/

buildscript {
	dependencies {
		classpath "com.android.tools.build:gradle:${versions.androidPlugin}"
	}
}

def localProperties = new File(rootProject.rootDir, "local.properties")
def hasAndroidSDKDir = false
if (localProperties.exists()) {
	Properties properties = new Properties()
	localProperties.withInputStream { instr ->
		properties.load(instr)
	}

	def sdkDirProp = properties.getProperty('sdk.dir')

	if (sdkDirProp != null) {
		hasAndroidSDKDir = true;
	} else {
		sdkDirProp = properties.getProperty('android.dir')
		if (sdkDirProp != null) {
			hasAndroidSDKDir = true;
		}
	}
}

if(!hasAndroidSDKDir && System.getenv("ANDROID_HOME") == null && System.getenv("ANDROID_SDK_ROOT") == null) {
	logger.warn("==============================================================================================");
	logger.warn("sdk.dir/ANDROID_HOME/ANDROID_SDK_ROOT are unset, gdx-tests-android will not be properly setup.");
	logger.warn("==============================================================================================");
	apply plugin: "java-library"
	return;
}

apply plugin: "com.android.application"
apply from: "obb.gradle"

dependencies {
	implementation project(":tests:gdx-tests")
	implementation project(":backends:gdx-backend-android")
	implementation libraries.compileOnly.android
	implementation "androidx.multidex:multidex:${versions.multiDex}"
}

android {
	namespace "com.badlogic.gdx.tests.android"
	buildToolsVersion versions.androidBuildTools
	compileSdkVersion versions.androidCompileSdk
	sourceSets {
		main {
			manifest.srcFile 'AndroidManifest.xml'
			java.srcDirs = ['src']
			aidl.srcDirs = ['src']
			renderscript.srcDirs = ['src']
			res.srcDirs = ['res']
			assets.srcDirs = ['assets']
			jniLibs.srcDirs = ['libs']
		}
	}

	defaultConfig {
		multiDexEnabled true
		applicationId "com.badlogic.gdx.tests.android"
		minSdkVersion versions.androidMinSdk
		targetSdkVersion versions.androidTargetSdk
		versionCode 1
		versionName "1.0"
	}
}

// called every time gradle gets executed, takes the native dependencies of
// the natives configuration, and extracts them to the proper libs/ folders
// so they get packed with the APK.
task copyAndroidNatives() {
	doFirst {
		file("libs/armeabi-v7a/").mkdirs();
		file("libs/arm64-v8a/").mkdirs();
		file("libs/x86_64/").mkdirs();
		file("libs/x86/").mkdirs();

		[
			'arm64-v8a',
			'armeabi-v7a',
			'x86_64',
			'x86'
		].each { arch ->
			[
				project(":gdx"),
				project(":extensions:gdx-bullet"),
				project(":extensions:gdx-box2d-parent:gdx-box2d"),
				project(":extensions:gdx-freetype")
			].each { p ->
				copy {
					from new File(p.projectDir, "libs/${arch}")
					into "libs/${arch}"
					include "*.so"
				}
			}
		}
	}
}

tasks.whenTaskAdded { packageTask ->
	if (packageTask.name.contains("merge") && packageTask.name.contains("JniLibFolders")) {
		packageTask.dependsOn 'copyAndroidNatives'
	}
}
