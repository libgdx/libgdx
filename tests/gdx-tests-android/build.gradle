/*******************************************************************************
 * Copyright 2011 See AUTHORS file.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 ******************************************************************************/

buildscript {
	dependencies {
		classpath "com.android.tools.build:gradle:${versions.androidPlugin}"
	}
}

apply plugin: "com.android.application"
apply from: "obb.gradle"

configurations {
	natives
}

dependencies {
	compile project(":tests:gdx-tests")
	compile project(":gdx")
	compile project(":extensions:gdx-box2d:gdx-box2d")
	compile project(":extensions:gdx-bullet")
	compile project(":extensions:gdx-controllers:gdx-controllers-android")
	compile project(":extensions:gdx-freetype")
	compile project(":backends:gdx-backend-android")
	compile libraries.android
	compile "com.android.support:multidex:${versions.multiDex}"
}

android {
	buildToolsVersion versions.androidBuildTools
	compileSdkVersion versions.androidSdk
	sourceSets {
		main {
			manifest.srcFile 'AndroidManifest.xml'
			java.srcDirs = ['src']
			aidl.srcDirs = ['src']
			renderscript.srcDirs = ['src']
			res.srcDirs = ['res']
			assets.srcDirs = ['assets']
			jniLibs.srcDirs = ['libs']
		}		
	}

	defaultConfig {
		multiDexEnabled true
	}

	lintOptions {
		// Since this is a test apk, it is fine to ignore the missing densities for the icon.
		disable 'IconMissingDensityFolder'
	}
}

// called every time gradle gets executed, takes the native dependencies of
// the natives configuration, and extracts them to the proper libs/ folders
// so they get packed with the APK.
task copyAndroidNatives {
	doFirst {
		file("libs/armeabi/").mkdirs()
		file("libs/armeabi-v7a/").mkdirs()
		file("libs/arm64-v8a/").mkdirs()
		file("libs/x86_64/").mkdirs()
		file("libs/x86/").mkdirs()

		configurations.natives.files.each { jar ->
			def outputDir = null
			if (jar.name.endsWith("natives-arm64-v8a.jar")) outputDir = file("libs/arm64-v8a")
			if (jar.name.endsWith("natives-armeabi-v7a.jar")) outputDir = file("libs/armeabi-v7a")
			if(jar.name.endsWith("natives-armeabi.jar")) outputDir = file("libs/armeabi")
			if(jar.name.endsWith("natives-x86_64.jar")) outputDir = file("libs/x86_64")
			if(jar.name.endsWith("natives-x86.jar")) outputDir = file("libs/x86")
			if(outputDir != null) {
				copy {
					from zipTree(jar)
					into outputDir
					include "*.so"
				}
			}
		}
	}
}

tasks.whenTaskAdded { packageTask ->
	if (packageTask.name.contains("package")) {
		packageTask.dependsOn 'copyAndroidNatives'
	}
}